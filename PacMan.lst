------- FILE PacMan.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE PacMan.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE PacMan.asm
      4  0000 ????
      5  0000 ????						;==================================================================================
      6  0000 ????						; Program Definitions
      7  0000 ????						;==================================================================================
      8  0000 ????
      9  0000 ????	       00 12	   SPRITE_HEIGHT =	18
     10  0000 ????	       00 05	   TIMER_LIMIT1 =	5
     11  0000 ????	       00 14	   TIMER_LIMIT2 =	20
     12  0000 ????
     13  0000 ????						;==================================================================================
     14  0000 ????						; Program Variables
     15  0000 ????						;==================================================================================
     16  0000 ????
     17 U00a8 ????				      SEG.U	Variables
     18 U0080					      ORG	$80
     19 U0080
     20 U0080		       00	   PS_temp    ds	1
     21 U0081
     22 U0081		       00 00	   SpriteAddrPtr ds	2
     23 U0083		       00	   SpriteYPos ds	1
     24 U0084		       00	   LastSpriteXPos ds	1
     25 U0085		       00	   LastSpriteYPos ds	1
     26 U0086		       00	   PlayerVelocityMask ds	1
     27 U0087
     28 U0087		       00 00	   SpriteGhostAddrPtr ds	2
     29 U0089
     30 U0089		       00	   SpriteXPos ds	1
     31 U008a		       00	   GhostSpriteXPos ds	1
     32 U008b		       00	   CurWaferXPos0 ds	1
     33 U008c
     34 U008c		       00	   GhostSpriteYPos ds	1
     35 U008d
     36 U008d		       00	   WaferXPosIndex ds	1
     37 U008e		       00 00 00 00*WaferArray ds	6
     38 U0094		       00	   PickedUpWaferBuffer ds	1
     39 U0095
     40 U0095		       00	   SpriteAnimationIndex ds	1
     41 U0096		       00	   IsFrameGoingUp ds	1
     42 U0097
     43 U0097		       00	   ScoreHundreds ds	1
     44 U0098		       00	   ScoreTens  ds	1
     45 U0099		       00	   ScoreOnes  ds	1
     46 U009a
     47 U009a		       00	   HundredsOffset ds	1
     48 U009b		       00	   TensOffset ds	1
     49 U009c		       00	   OnesOffset ds	1
     50 U009d
     51 U009d		       00	   ScoreDisplayBufferHundreds ds	1
     52 U009e		       00	   ScoreDisplayBufferTens ds	1
     53 U009f		       00	   ScoreDisplayBufferOnes ds	1
     54 U00a0
     55 U00a0		       00	   TimerCounter5 ds	1
     56 U00a1		       00	   TimerCounter20 ds	1
     57 U00a2
     58 U00a2		       00	   PlayerReflectedBuffer ds	1
     59 U00a3		       00	   GhostReflectedBuffer ds	1
     60 U00a4
     61 U00a4		       00	   LifeCount  ds	1
     62 U00a5		       00	   WaferCount ds	1
     63 U00a6
     64 U00a6		       00	   WasButtonPressed ds	1
     65 U00a7
     66 U00a7							; Game State - 0 = PlayingGame; 1 = PlayingDeathAnimation; 2 = GamePaused;
     67 U00a7							; 3 = GameOver; 4 = PlayingWinningScreen
     68 U00a7		       00	   GameState  ds	1
     69 U00a8
     70 U00a8							;==================================================================================
     71 U00a8							; Program Initialization
     72 U00a8							;==================================================================================
     73 U00a8
     74  fb8c ????				      SEG	Executable
     75  f000					      ORG	$F000
     76  f000
     77  f000				   Reset
     78  f000				   ClearMemory
     79  f000		       a2 00		      LDX	#0
     80  f002		       9a		      TXS
     81  f003		       48		      PHA
     82  f004		       8a		      TXA
     83  f005
     84  f005				   ClearMemoryLoop
     85  f005		       48		      PHA
     86  f006		       ca		      DEX
     87  f007		       d0 fc		      BNE	ClearMemoryLoop
     88  f009
     89  f009		       20 55 f1 	      JSR	InitVariables
     90  f00c
     91  f00c							;==================================================================================
     92  f00c							; Main Loop
     93  f00c							;==================================================================================
     94  f00c
     95  f00c				   Main
     96  f00c		       20 1b f0 	      JSR	HandleVSync
     97  f00f		       20 2a f0 	      JSR	HandleVBlank
     98  f012		       20 4b f0 	      JSR	MainKernel
     99  f015		       20 da f0 	      JSR	Overscan
    100  f018		       4c 0c f0 	      JMP	Main
    101  f01b
    102  f01b							;==================================================================================
    103  f01b							; HandleVSync
    104  f01b							;==================================================================================
    105  f01b
    106  f01b				   HandleVSync
    107  f01b		       a9 00		      LDA	#0
    108  f01d		       85 01		      STA	VBLANK
    109  f01f		       a9 02		      LDA	#2
    110  f021		       85 00		      STA	VSYNC
    111  f023
    112  f023				   VSyncLoop
    113  f023		       85 02		      STA	WSYNC
    114  f025		       85 02		      STA	WSYNC
    115  f027		       85 02		      STA	WSYNC
    116  f029
    117  f029		       60		      RTS
    118  f02a
    119  f02a							;==================================================================================
    120  f02a							; HandleVBlank
    121  f02a							; Handle Part of Game Logic
    122  f02a							;==================================================================================
    123  f02a
    124  f02a				   HandleVBlank
    125  f02a
    126  f02a							; Initialize TIM64T
    127  f02a		       a9 2a		      LDA	#42
    128  f02c		       8d 96 02 	      STA	TIM64T
    129  f02f
    130  f02f							; Prepare Registers for VBLANK
    131  f02f		       a9 00		      LDA	#0
    132  f031		       85 00		      STA	VSYNC
    133  f033		       a9 42		      LDA	#%01000010
    134  f035		       85 01		      STA	VBLANK
    135  f037
    136  f037							; Processing Tasks
    137  f037		       20 49 f4 	      JSR	GetControllerInputsDirectional
    138  f03a		       20 8d f4 	      JSR	GetControllerInputsButton
    139  f03d		       20 b7 f4 	      JSR	GetController2InputsDEBUG
    140  f040		       20 e3 f1 	      JSR	UpdateEntities
    141  f043
    142  f043				   VBlankLoop
    143  f043		       ad 84 02 	      LDA	INTIM
    144  f046		       d0 fb		      BNE	VBlankLoop
    145  f048
    146  f048		       85 02		      STA	WSYNC
    147  f04a		       60		      RTS
    148  f04b
    149  f04b							;==================================================================================
    150  f04b							; MainKernel
    151  f04b							;==================================================================================
    152  f04b
    153  f04b				   MainKernel
    154  f04b		       a9 00		      LDA	#0
    155  f04d		       85 01		      STA	VBLANK
    156  f04f
    157  f04f							; Position Player, Ghost and Wafer According to XPos
    158  f04f		       20 a9 f1 	      JSR	PositionSpriteX
    159  f052
    160  f052		       a2 bf		      LDX	#191
    161  f054		       85 02		      STA	WSYNC
    162  f056
    163  f056				   MainFrameLoop
    164  f056							; First Line
    165  f056							; Load First Playfield
    166  f056		       bd 00 f8 	      LDA	MainBoard_STRIP_0,x	; 4  4   0
    167  f059		       85 0d		      STA	PF0	; 3  7   12
    168  f05b
    169  f05b		       bd c0 f8 	      LDA	MainBoard_STRIP_1,x	; 4  11   33
    170  f05e		       85 0e		      STA	PF1	; 3  14   42
    171  f060
    172  f060		       bd 80 f9 	      LDA	MainBoard_STRIP_2,x	; 4  18
    173  f063		       85 0f		      STA	PF2	; 3  21
    174  f065
    175  f065							; Check if line has wafer
    176  f065		       bd c0 f5 	      LDA	CheckLineBytes,x
    177  f068		       f0 14		      BEQ	DoNotDrawWafer
    178  f06a
    179  f06a				   CheckIfWaferCollected
    180  f06a							; Verify if wafer is picked up
    181  f06a		       a4 8d		      LDY	WaferXPosIndex
    182  f06c		       b9 8e 00 	      LDA	WaferArray,y
    183  f06f
    184  f06f		       bc c0 f5 	      LDY	CheckLineBytes,x
    185  f072		       39 a9 f5 	      AND	FindWaferLookUp,y
    186  f075		       d0 07		      BNE	DoNotDrawWafer
    187  f077
    188  f077							; Draw wafer
    189  f077		       a9 02		      LDA	#%10
    190  f079		       85 1d		      STA	ENAM0
    191  f07b		       4c 82 f0 	      JMP	AfterDrawing
    192  f07e
    193  f07e				   DoNotDrawWafer
    194  f07e		       a9 00		      LDA	#0
    195  f080		       85 1d		      STA	ENAM0
    196  f082
    197  f082				   AfterDrawing
    198  f082							; Check Vertical Sprite (P0) Drawing
    199  f082		       8a		      TXA		; 2
    200  f083		       38		      SEC		; 2
    201  f084		       e5 83		      SBC	SpriteYPos	; 3
    202  f086		       69 12		      ADC	#SPRITE_HEIGHT	; 2
    203  f088		       90 05		      BCC	SkipDrawingP0	; 3
    204  f08a
    205  f08a							; Load P0 Sprite Data
    206  f08a		       a8		      TAY		; 3
    207  f08b		       b1 81		      LDA	(SpriteAddrPtr),y	; 5
    208  f08d		       85 1b		      STA	GRP0	; 3
    209  f08f
    210  f08f				   SkipDrawingP0
    211  f08f							; Decrease X and Go To Next Line
    212  f08f		       85 02		      STA	WSYNC	; 3
    213  f091		       ca		      DEX		; 2
    214  f092		       f0 39		      BEQ	MainFrameLoopEnd	; 2 
    215  f094
    216  f094							; Second Line
    217  f094
    218  f094							; Load First Playfield
    219  f094		       bd 00 f8 	      LDA	MainBoard_STRIP_0,x	; 4
    220  f097		       85 0d		      STA	PF0	; 3
    221  f099
    222  f099		       bd c0 f8 	      LDA	MainBoard_STRIP_1,x	; 4
    223  f09c		       85 0e		      STA	PF1	; 3
    224  f09e
    225  f09e		       bd 80 f9 	      LDA	MainBoard_STRIP_2,x	; 4
    226  f0a1		       85 0f		      STA	PF2	; 3
    227  f0a3
    228  f0a3							; Check Collision Between Player and Wafer
    229  f0a3		       24 00		      BIT	CXM0P
    230  f0a5		       50 14		      BVC	DidntGetWafer
    231  f0a7
    232  f0a7				   GotWafer
    233  f0a7							; Routine to save wafer as picked up
    234  f0a7		       a4 8d		      LDY	WaferXPosIndex
    235  f0a9		       b9 8e 00 	      LDA	WaferArray,y
    236  f0ac
    237  f0ac		       bc c0 f5 	      LDY	CheckLineBytes,x
    238  f0af
    239  f0af							; Mark Wafer Picked Up for Frame
    240  f0af		       19 a9 f5 	      ORA	FindWaferLookUp,y
    241  f0b2
    242  f0b2		       a4 8d		      LDY	WaferXPosIndex
    243  f0b4		       99 8e 00 	      STA	WaferArray,y
    244  f0b7
    245  f0b7							; Reset Collision Detection
    246  f0b7		       85 94		      STA	PickedUpWaferBuffer
    247  f0b9		       85 2c		      STA	CXCLR
    248  f0bb
    249  f0bb				   DidntGetWafer
    250  f0bb							; Check Ghost Vertical Drawing
    251  f0bb		       8a		      TXA		; 2
    252  f0bc		       38		      SEC		; 2
    253  f0bd		       e5 8c		      SBC	GhostSpriteYPos	; 3
    254  f0bf		       69 12		      ADC	#SPRITE_HEIGHT	; 2
    255  f0c1		       90 05		      BCC	SkipGhostDrawing	; 3
    256  f0c3
    257  f0c3							; Load Ghost Sprite Data
    258  f0c3		       a8		      TAY		; 3
    259  f0c4		       b1 87		      LDA	(SpriteGhostAddrPtr),y	; 5
    260  f0c6		       85 1c		      STA	GRP1	; 3
    261  f0c8
    262  f0c8				   SkipGhostDrawing
    263  f0c8							; Decrease X and Go To Next Line
    264  f0c8		       85 02		      STA	WSYNC	; 3
    265  f0ca		       ca		      DEX		; 2
    266  f0cb		       d0 89		      BNE	MainFrameLoop	; 2
    267  f0cd
    268  f0cd				   MainFrameLoopEnd
    269  f0cd							; Clearing Playfield Registers
    270  f0cd		       a9 00		      LDA	#0
    271  f0cf		       85 0d		      STA	PF0
    272  f0d1		       85 0e		      STA	PF1
    273  f0d3		       85 0f		      STA	PF2
    274  f0d5
    275  f0d5		       85 1b		      STA	GRP0
    276  f0d7		       85 1c		      STA	GRP1
    277  f0d9
    278  f0d9		       60		      RTS
    279  f0da
    280  f0da							;==================================================================================
    281  f0da							; Overscan
    282  f0da							;==================================================================================
    283  f0da
    284  f0da				   Overscan
    285  f0da
    286  f0da							; Prepare Registers for Overscan Drawing
    287  f0da		       a9 00		      LDA	#0
    288  f0dc		       85 0b		      STA	REFP0
    289  f0de		       85 0c		      STA	REFP1
    290  f0e0
    291  f0e0		       a9 0e		      LDA	#$0E
    292  f0e2		       85 07		      STA	COLUP1
    293  f0e4
    294  f0e4		       a9 03		      LDA	#%011
    295  f0e6
    296  f0e6							; Triplicate P1 (Score)
    297  f0e6		       85 05		      STA	NUSIZ1
    298  f0e8
    299  f0e8							; Select Ammount of Icons According to LifeCount
    300  f0e8		       a4 a4		      LDY	LifeCount
    301  f0ea
    302  f0ea							; Select position of Score
    303  f0ea		       85 11		      STA	RESP1
    304  f0ec
    305  f0ec		       b9 bc f5 	      LDA	LivesNUSIZ0LookUp,y
    306  f0ef		       85 04		      STA	NUSIZ0
    307  f0f1
    308  f0f1							; Calculate Hundreds Offset
    309  f0f1		       a6 97		      LDX	ScoreHundreds
    310  f0f3		       bd b1 f5 	      LDA	MultBy14,x
    311  f0f6		       85 9a		      STA	HundredsOffset
    312  f0f8
    313  f0f8							; Calculate Tens Offset
    314  f0f8		       a6 98		      LDX	ScoreTens
    315  f0fa		       bd b1 f5 	      LDA	MultBy14,x
    316  f0fd		       85 9b		      STA	TensOffset
    317  f0ff
    318  f0ff							; Calculate Ones Offset
    319  f0ff		       a6 99		      LDX	ScoreOnes
    320  f101		       bd b1 f5 	      LDA	MultBy14,x
    321  f104		       85 9c		      STA	OnesOffset
    322  f106
    323  f106		       85 02		      STA	WSYNC
    324  f108
    325  f108							; Select position of Lives
    326  f108		       85 10		      STA	RESP0
    327  f10a
    328  f10a		       a2 1d		      LDX	#29
    329  f10c				   OverscanLoop
    330  f10c
    331  f10c							; Is it time to draw?
    332  f10c		       e0 10		      CPX	#16
    333  f10e		       90 27		      BCC	SmallerThan16
    334  f110
    335  f110				   BiggerThan16
    336  f110							; Time to draw
    337  f110
    338  f110							; Draw Lives
    339  f110		       bd d2 f7 	      LDA	SpriteLifeData,x
    340  f113		       85 1b		      STA	GRP0
    341  f115
    342  f115							; Prepare draw bits for hundreds
    343  f115		       18		      CLC
    344  f116		       8a		      TXA
    345  f117		       65 9a		      ADC	HundredsOffset
    346  f119		       a8		      TAY
    347  f11a		       b9 00 fb 	      LDA	BottomData,y
    348  f11d		       85 1c		      STA	GRP1
    349  f11f
    350  f11f							; Prepare draw bits for ones
    351  f11f		       18		      CLC
    352  f120		       8a		      TXA
    353  f121		       65 9c		      ADC	OnesOffset
    354  f123		       a8		      TAY
    355  f124		       b9 00 fb 	      LDA	BottomData,y
    356  f127		       85 9f		      STA	ScoreDisplayBufferOnes
    357  f129
    358  f129							; Prepare draw bits for tens
    359  f129		       18		      CLC
    360  f12a		       8a		      TXA
    361  f12b		       65 9b		      ADC	TensOffset
    362  f12d		       a8		      TAY
    363  f12e		       b9 00 fb 	      LDA	BottomData,y
    364  f131
    365  f131							; Draw Tens
    366  f131		       85 1c		      STA	GRP1
    367  f133
    368  f133							; Draw Ones
    369  f133		       a5 9f		      LDA	ScoreDisplayBufferOnes
    370  f135		       85 1c		      STA	GRP1
    371  f137
    372  f137				   SmallerThan16
    373  f137		       ca		      DEX
    374  f138		       85 02		      STA	WSYNC
    375  f13a		       d0 d0		      BNE	OverscanLoop
    376  f13c
    377  f13c							; Clear Player Registers
    378  f13c		       a9 00		      LDA	#0
    379  f13e		       85 1b		      STA	GRP0
    380  f140		       85 1c		      STA	GRP1
    381  f142
    382  f142							; Return NUSIZ0 and NUSIZ1
    383  f142		       a9 20		      LDA	#%100000
    384  f144		       85 04		      STA	NUSIZ0
    385  f146		       85 05		      STA	NUSIZ1
    386  f148
    387  f148							; Return P0 Register Reflection Value
    388  f148		       a5 a2		      LDA	PlayerReflectedBuffer
    389  f14a		       85 0b		      STA	REFP0
    390  f14c
    391  f14c							; Return P1 Register Reflection Value
    392  f14c		       a5 a3		      LDA	GhostReflectedBuffer
    393  f14e		       85 0c		      STA	REFP1
    394  f150
    395  f150							; Return P1 color
    396  f150		       a9 58		      LDA	#$58
    397  f152		       85 07		      STA	COLUP1
    398  f154
    399  f154		       60		      RTS
    400  f155
    401  f155							;==================================================================================
    402  f155							; InitVariables
    403  f155							;==================================================================================
    404  f155
    405  f155				   InitVariables
    406  f155							; Initialize BG Color and PF Color
    407  f155		       a9 00		      LDA	#$00
    408  f157		       85 09		      STA	COLUBK
    409  f159		       a9 72		      LDA	#$72
    410  f15b		       85 08		      STA	COLUPF
    411  f15d
    412  f15d							; Initialize Player Color and Pattern
    413  f15d		       a9 1e		      LDA	#$1E
    414  f15f		       85 06		      STA	COLUP0
    415  f161		       a9 58		      LDA	#$58
    416  f163		       85 07		      STA	COLUP1
    417  f165
    418  f165							; Initialize CTRLPF
    419  f165		       a9 01		      LDA	#1
    420  f167		       85 0a		      STA	CTRLPF
    421  f169
    422  f169							; Initialize Missile Graphics
    423  f169		       a9 20		      LDA	#%100000
    424  f16b		       85 04		      STA	NUSIZ0
    425  f16d
    426  f16d							; Initialize Variables
    427  f16d
    428  f16d							; SpriteXPos and YPos
    429  f16d		       a9 50		      LDA	#80
    430  f16f		       85 89		      STA	SpriteXPos
    431  f171		       a9 6b		      LDA	#107
    432  f173		       85 83		      STA	SpriteYPos
    433  f175
    434  f175							; SpriteGhostXPos and YPos
    435  f175		       a9 4d		      LDA	#77
    436  f177		       85 8a		      STA	GhostSpriteXPos
    437  f179		       a9 8c		      LDA	#140
    438  f17b		       85 8c		      STA	GhostSpriteYPos
    439  f17d
    440  f17d							; LifeCount
    441  f17d		       a9 03		      LDA	#3
    442  f17f		       85 a4		      STA	LifeCount
    443  f181
    444  f181							; Set SpriteAnimationIndex
    445  f181		       85 95		      STA	SpriteAnimationIndex
    446  f183
    447  f183							; GameState
    448  f183		       a9 04		      LDA	#4
    449  f185		       85 a7		      STA	GameState
    450  f187
    451  f187							; TimerCounter20
    452  f187		       a9 c8		      LDA	#200
    453  f189		       85 a1		      STA	TimerCounter20
    454  f18b
    455  f18b							; ScoreHundreds
    456  f18b		       a9 ff		      LDA	#-1
    457  f18d		       85 97		      STA	ScoreHundreds
    458  f18f
    459  f18f							; Set Controller Inputs
    460  f18f		       a9 00		      LDA	#0
    461  f191		       8d 81 02 	      STA	SWACNT
    462  f194
    463  f194							; Set P0 and P1 Delays
    464  f194		       85 25		      STA	VDELP0
    465  f196
    466  f196							; Set Wafer XPos Index
    467  f196		       85 8d		      STA	WaferXPosIndex
    468  f198
    469  f198							; PacmanSpriteDataPointer
    470  f198		       a9 00		      LDA	#<Sprite0Data
    471  f19a		       85 81		      STA	SpriteAddrPtr
    472  f19c		       a9 f7		      LDA	#>Sprite0Data
    473  f19e		       85 82		      STA	SpriteAddrPtr+1
    474  f1a0
    475  f1a0							; GhostSpriteDataPointer
    476  f1a0		       a9 c0		      LDA	#<SpriteGhostData
    477  f1a2		       85 87		      STA	SpriteGhostAddrPtr
    478  f1a4		       a9 f7		      LDA	#>SpriteGhostData
    479  f1a6		       85 88		      STA	SpriteGhostAddrPtr+1
    480  f1a8
    481  f1a8		       60		      RTS
    482  f1a9
    483  f1a9							;==================================================================================
    484  f1a9							; PositionSpriteX - Subroutine to position all sprites (P0,P1,M0)
    485  f1a9							;==================================================================================
    486  f1a9
    487  f1a9				   PositionSpriteX
    488  f1a9		       85 02		      STA	WSYNC	; 3
    489  f1ab		       85 2b		      STA	HMCLR	; clear any previous movement	  ; 3
    490  f1ad
    491  f1ad		       a2 03		      LDX	#3	; sprite index 		  ; 2
    492  f1af
    493  f1af				   PosSP1
    494  f1af
    495  f1af		       b5 88		      LDA	SpriteXPos-1,x	; 4
    496  f1b1		       a8		      TAY		; 2
    497  f1b2
    498  f1b2							; Divide by 16
    499  f1b2		       4a		      LSR		; 2
    500  f1b3		       4a		      LSR		; 2
    501  f1b4		       4a		      LSR		; 2
    502  f1b5		       4a		      LSR		; 2
    503  f1b6		       85 80		      STA	PS_temp	; 3
    504  f1b8
    505  f1b8		       98		      TYA		; 2
    506  f1b9		       29 0f		      AND	#15	; 2
    507  f1bb
    508  f1bb		       18		      CLC		; 2
    509  f1bc
    510  f1bc		       65 80		      ADC	PS_temp	; 3
    511  f1be		       a4 80		      LDY	PS_temp	; 3
    512  f1c0
    513  f1c0		       c9 0f		      CMP	#15	; 2
    514  f1c2		       90 03		      BCC	NH1	; 3
    515  f1c4		       e9 0f		      SBC	#15	; 2
    516  f1c6		       c8		      INY		; 2
    517  f1c7
    518  f1c7				   NH1
    519  f1c7							; Use remainder for fine adjustment
    520  f1c7		       49 07		      EOR	#7	; 2
    521  f1c9		       0a		      ASL		; 2
    522  f1ca		       0a		      ASL		; 2
    523  f1cb		       0a		      ASL		; 2
    524  f1cc		       0a		      ASL		; 2
    525  f1cd
    526  f1cd		       95 1f		      STA	HMP0-1,x	; fine movement	     ; 4
    527  f1cf		       85 02		      STA	WSYNC	; 3
    528  f1d1
    529  f1d1		       20 e2 f1 	      JSR	Ret1	; just a 12 cycle delay     ; 12
    530  f1d4		       24 00		      BIT	0	; 15 cycles = 3 loops :)    ; 3
    531  f1d6
    532  f1d6
    533  f1d6				   Jiggle1
    534  f1d6		       88		      DEY		; 2
    535  f1d7		       10 fd		      BPL	Jiggle1	; 3
    536  f1d9
    537  f1d9		       95 0f		      STA	RESP0-1,x	; 4
    538  f1db
    539  f1db		       ca		      DEX		; 2
    540  f1dc		       d0 d1		      BNE	PosSP1	; 3
    541  f1de
    542  f1de		       85 02		      STA	WSYNC	; 3
    543  f1e0		       85 2a		      STA	HMOVE	; 3
    544  f1e2
    545  f1e2				   Ret1
    546  f1e2		       60		      RTS		; 6
    547  f1e3
    548  f1e3							;==================================================================================
    549  f1e3							; UpdateEntities - Update Game Logic
    550  f1e3							;==================================================================================
    551  f1e3
    552  f1e3				   UpdateEntities
    553  f1e3							; Check if Game Is Paused
    554  f1e3		       a5 a7		      LDA	GameState
    555  f1e5		       c9 02		      CMP	#2
    556  f1e7		       f0 2a		      BEQ	EndUpdateEntities
    557  f1e9
    558  f1e9							; Update Timer
    559  f1e9		       20 ef f4 	      JSR	UpdateTimer
    560  f1ec
    561  f1ec							; Get Out End of Level (If it's the case)
    562  f1ec		       20 1b f2 	      JSR	LevelEndOut
    563  f1ef
    564  f1ef							; Apply Animation Frame
    565  f1ef		       20 9f f3 	      JSR	ApplyAnimationFrame
    566  f1f2
    567  f1f2							; Check if it's playing the end of the level
    568  f1f2		       a5 a7		      LDA	GameState
    569  f1f4		       c9 04		      CMP	#4
    570  f1f6		       f0 1b		      BEQ	EndUpdateEntities
    571  f1f8
    572  f1f8							; Change Animation Frame
    573  f1f8		       20 4d f3 	      JSR	ChangeAnimationFrame
    574  f1fb
    575  f1fb							; Check Player Collision with PF
    576  f1fb		       20 93 f2 	      JSR	CheckPlayerCollisionPF
    577  f1fe
    578  f1fe							; Update Sprite Pos According to Velocity Mask
    579  f1fe		       20 e8 f2 	      JSR	UpdatePlayerPosition
    580  f201
    581  f201							; Check Player Collision with Ghosts
    582  f201		       20 7a f2 	      JSR	CheckPlayerCollisionGhosts
    583  f204
    584  f204							; Remove Collisions After Checks
    585  f204		       85 2c		      STA	CXCLR
    586  f206
    587  f206							; Increase Score According with Picked Up Wafer Buffer
    588  f206		       20 0e f5 	      JSR	UpdateScore
    589  f209
    590  f209							; Update Wafer XPos Index
    591  f209		       20 68 f2 	      JSR	UpdateWaferIndex
    592  f20c
    593  f20c							; Check Game Over
    594  f20c		       a5 a4		      LDA	LifeCount
    595  f20e		       f0 04		      BEQ	GoToGameOver
    596  f210
    597  f210							; Check End of Level
    598  f210		       20 3c f2 	      JSR	CheckLevelEnd
    599  f213
    600  f213				   EndUpdateEntities
    601  f213		       60		      RTS
    602  f214
    603  f214				   GoToGameOver
    604  f214		       a9 03		      LDA	#3
    605  f216		       85 a7		      STA	GameState
    606  f218		       4c 3f f5 	      JMP	HandleGameOver
    607  f21b
    608  f21b							;==================================================================================
    609  f21b							; LevelEndOut - Get out of level end tune
    610  f21b							;==================================================================================
    611  f21b
    612  f21b				   LevelEndOut
    613  f21b							; Verify if it's in level end
    614  f21b		       a5 a7		      LDA	GameState
    615  f21d		       c9 04		      CMP	#4
    616  f21f		       d0 0d		      BNE	LevelEndOutRet
    617  f221
    618  f221							; Verify Counter
    619  f221		       a5 a1		      LDA	TimerCounter20
    620  f223		       d0 09		      BNE	LevelEndOutRet
    621  f225
    622  f225							; Out of Level End
    623  f225		       a9 00		      LDA	#0
    624  f227		       85 a7		      STA	GameState
    625  f229
    626  f229							; Give 100 Points
    627  f229		       e6 97		      INC	ScoreHundreds
    628  f22b
    629  f22b							; Give a Free Life (Max 3)
    630  f22b		       20 2f f2 	      JSR	GiveLife
    631  f22e
    632  f22e				   LevelEndOutRet
    633  f22e		       60		      RTS
    634  f22f
    635  f22f							;==================================================================================
    636  f22f							; GiveLife - Give an extra life to the player
    637  f22f							;==================================================================================
    638  f22f
    639  f22f				   GiveLife
    640  f22f		       e6 a4		      INC	LifeCount
    641  f231		       a5 a4		      LDA	LifeCount
    642  f233		       c9 04		      CMP	#4
    643  f235		       d0 04		      BNE	GiveLifeRet
    644  f237
    645  f237		       a9 03		      LDA	#3
    646  f239		       85 a4		      STA	LifeCount
    647  f23b
    648  f23b				   GiveLifeRet
    649  f23b		       60		      RTS
    650  f23c
    651  f23c							;==================================================================================
    652  f23c							; CheckLevelEnd - Verify if all wafers were collected
    653  f23c							;==================================================================================
    654  f23c
    655  f23c				   CheckLevelEnd
    656  f23c		       a5 a5		      LDA	WaferCount
    657  f23e		       c9 2a		      CMP	#42
    658  f240		       d0 25		      BNE	NotLevelEnd
    659  f242
    660  f242				   LevelEnd
    661  f242		       a9 00		      LDA	#0
    662  f244		       a2 06		      LDX	#6
    663  f246
    664  f246							; Zero All Wafers
    665  f246				   ZeroWaferArrayLoop
    666  f246		       ca		      DEX
    667  f247		       95 8e		      STA	WaferArray,x
    668  f249		       e0 00		      CPX	#0
    669  f24b		       d0 f9		      BNE	ZeroWaferArrayLoop
    670  f24d
    671  f24d							; Zero WaferCount
    672  f24d		       85 a5		      STA	WaferCount
    673  f24f
    674  f24f							; Return Player to Center of Screen
    675  f24f		       a9 50		      LDA	#80
    676  f251		       85 89		      STA	SpriteXPos
    677  f253		       a9 6b		      LDA	#107
    678  f255		       85 83		      STA	SpriteYPos
    679  f257
    680  f257							; Start Playing Level End Tune
    681  f257		       a9 04		      LDA	#4
    682  f259		       85 a7		      STA	GameState
    683  f25b
    684  f25b							; Change Character Frame to 3
    685  f25b		       a9 03		      LDA	#3
    686  f25d		       85 95		      STA	SpriteAnimationIndex
    687  f25f		       a9 00		      LDA	#0
    688  f261		       85 96		      STA	IsFrameGoingUp
    689  f263
    690  f263							; Prepare Timer For Level End Tune
    691  f263		       a9 c8		      LDA	#200
    692  f265		       85 a1		      STA	TimerCounter20
    693  f267
    694  f267				   NotLevelEnd
    695  f267		       60		      RTS
    696  f268
    697  f268							;==================================================================================
    698  f268							; UpdateWaferIndex - increase wafer XPos Index and apply it
    699  f268							;==================================================================================
    700  f268
    701  f268				   UpdateWaferIndex
    702  f268		       e6 8d		      INC	WaferXPosIndex
    703  f26a
    704  f26a		       a6 8d		      LDX	WaferXPosIndex
    705  f26c		       e0 06		      CPX	#6
    706  f26e		       d0 04		      BNE	ReturnWaferIndex
    707  f270
    708  f270				   WaferIndexEquals6
    709  f270		       a2 00		      LDX	#0
    710  f272		       86 8d		      STX	WaferXPosIndex
    711  f274
    712  f274				   ReturnWaferIndex
    713  f274		       bd a3 f5 	      LDA	WaferXPosArray0,x
    714  f277		       85 8b		      STA	CurWaferXPos0
    715  f279		       60		      RTS
    716  f27a
    717  f27a							;==================================================================================
    718  f27a							; CheckPlayerCollisionGhosts - Verify for Player Collision with Ghosts
    719  f27a							;==================================================================================
    720  f27a
    721  f27a				   CheckPlayerCollisionGhosts
    722  f27a
    723  f27a							; Check if death animation is playing
    724  f27a		       a5 a7		      LDA	GameState
    725  f27c		       c9 01		      CMP	#1
    726  f27e		       f0 12		      BEQ	NoP0P1Collision
    727  f280
    728  f280							; Check Collision
    729  f280		       a5 07		      LDA	CXPPMM
    730  f282		       29 80		      AND	#%10000000
    731  f284		       f0 0c		      BEQ	NoP0P1Collision
    732  f286
    733  f286				   P0P1Collision
    734  f286							; Reset Player Velocity
    735  f286		       a9 00		      LDA	#0
    736  f288		       85 86		      STA	PlayerVelocityMask
    737  f28a
    738  f28a							; Set Animation Frame to 4 and IsPlayingDeathAnimation
    739  f28a		       a9 04		      LDA	#4
    740  f28c		       85 95		      STA	SpriteAnimationIndex
    741  f28e
    742  f28e		       a9 01		      LDA	#1
    743  f290		       85 a7		      STA	GameState
    744  f292
    745  f292				   NoP0P1Collision
    746  f292		       60		      RTS
    747  f293
    748  f293							;==================================================================================
    749  f293							; CheckPlayerCollisionPF - Verify for Player Collision with PF and Update Velocity Mask
    750  f293							;==================================================================================
    751  f293
    752  f293				   CheckPlayerCollisionPF
    753  f293							; Verify P0PF Collision Bit
    754  f293		       a5 02		      LDA	CXP0FB
    755  f295		       29 80		      AND	#%10000000
    756  f297		       f0 4e		      BEQ	PlayerPFCollisionNotDetected
    757  f299
    758  f299							; Check Where Player Was Going
    759  f299		       a6 86		      LDX	PlayerVelocityMask
    760  f29b
    761  f29b							; Return Player to Previous Spot Before Zeoring Velocity
    762  f29b		       8a		      TXA
    763  f29c		       29 08		      AND	#%1000
    764  f29e		       d0 1a		      BNE	WasGoingRight
    765  f2a0
    766  f2a0		       8a		      TXA
    767  f2a1		       29 04		      AND	#%0100
    768  f2a3		       d0 20		      BNE	WasGoingLeft
    769  f2a5
    770  f2a5		       8a		      TXA
    771  f2a6		       29 02		      AND	#%0010
    772  f2a8		       d0 26		      BNE	WasGoingDown
    773  f2aa
    774  f2aa		       8a		      TXA
    775  f2ab		       29 01		      AND	#%0001
    776  f2ad		       d0 2c		      BNE	WasGoingUp
    777  f2af
    778  f2af							; Return X and Y in case Player isnt moving and is still stuck
    779  f2af		       a5 84		      LDA	LastSpriteXPos
    780  f2b1		       85 89		      STA	SpriteXPos
    781  f2b3		       a5 85		      LDA	LastSpriteYPos
    782  f2b5		       85 83		      STA	SpriteYPos
    783  f2b7
    784  f2b7		       4c e3 f2 	      JMP	ZeroPlayerVelocity
    785  f2ba
    786  f2ba				   WasGoingRight
    787  f2ba		       a5 84		      LDA	LastSpriteXPos
    788  f2bc		       85 89		      STA	SpriteXPos
    789  f2be
    790  f2be		       c6 89		      DEC	SpriteXPos
    791  f2c0		       c6 89		      DEC	SpriteXPos
    792  f2c2
    793  f2c2		       4c e3 f2 	      JMP	ZeroPlayerVelocity
    794  f2c5
    795  f2c5				   WasGoingLeft
    796  f2c5		       a5 84		      LDA	LastSpriteXPos
    797  f2c7		       85 89		      STA	SpriteXPos
    798  f2c9
    799  f2c9		       e6 89		      INC	SpriteXPos
    800  f2cb		       e6 89		      INC	SpriteXPos
    801  f2cd
    802  f2cd		       4c e3 f2 	      JMP	ZeroPlayerVelocity
    803  f2d0
    804  f2d0				   WasGoingDown
    805  f2d0		       a5 85		      LDA	LastSpriteYPos
    806  f2d2		       85 83		      STA	SpriteYPos
    807  f2d4
    808  f2d4		       e6 83		      INC	SpriteYPos
    809  f2d6		       e6 83		      INC	SpriteYPos
    810  f2d8
    811  f2d8		       4c e3 f2 	      JMP	ZeroPlayerVelocity
    812  f2db
    813  f2db				   WasGoingUp
    814  f2db		       a5 85		      LDA	LastSpriteYPos
    815  f2dd		       85 83		      STA	SpriteYPos
    816  f2df
    817  f2df		       c6 83		      DEC	SpriteYPos
    818  f2e1		       c6 83		      DEC	SpriteYPos
    819  f2e3
    820  f2e3				   ZeroPlayerVelocity
    821  f2e3		       a9 00		      LDA	#0
    822  f2e5		       85 86		      STA	PlayerVelocityMask
    823  f2e7
    824  f2e7				   PlayerPFCollisionNotDetected
    825  f2e7		       60		      RTS
    826  f2e8
    827  f2e8							;==================================================================================
    828  f2e8							; UpdatePlayerPosition - Update Player Position According to Velocity Mask
    829  f2e8							;==================================================================================
    830  f2e8
    831  f2e8				   UpdatePlayerPosition
    832  f2e8							; Verify Collision and Refuse to Move in case is colliding
    833  f2e8		       a5 02		      LDA	CXP0FB
    834  f2ea		       29 80		      AND	#%10000000
    835  f2ec		       d0 5e		      BNE	UpdatePlayerPositionRet
    836  f2ee
    837  f2ee		       a6 86		      LDX	PlayerVelocityMask
    838  f2f0
    839  f2f0		       8a		      TXA
    840  f2f1		       29 08		      AND	#%1000
    841  f2f3		       d0 12		      BNE	GoRight
    842  f2f5
    843  f2f5		       8a		      TXA
    844  f2f6		       29 04		      AND	#%0100
    845  f2f8		       d0 24		      BNE	GoLeft
    846  f2fa
    847  f2fa		       8a		      TXA
    848  f2fb		       29 02		      AND	#%0010
    849  f2fd		       d0 36		      BNE	GoDown
    850  f2ff
    851  f2ff		       8a		      TXA
    852  f300		       29 01		      AND	#%0001
    853  f302		       d0 3e		      BNE	GoUp
    854  f304
    855  f304		       4c 4c f3 	      JMP	UpdatePlayerPositionRet
    856  f307
    857  f307				   GoRight
    858  f307		       a5 89		      LDA	SpriteXPos
    859  f309		       85 84		      STA	LastSpriteXPos
    860  f30b		       a5 83		      LDA	SpriteYPos
    861  f30d		       85 85		      STA	LastSpriteYPos
    862  f30f
    863  f30f		       e6 89		      INC	SpriteXPos
    864  f311
    865  f311							; Verify If Sprite is in Far Right
    866  f311		       a5 89		      LDA	SpriteXPos
    867  f313		       c9 a0		      CMP	#160
    868  f315		       90 04		      BCC	NotFarRight
    869  f317
    870  f317		       a9 00		      LDA	#0
    871  f319		       85 89		      STA	SpriteXPos
    872  f31b
    873  f31b				   NotFarRight
    874  f31b		       4c 4c f3 	      JMP	UpdatePlayerPositionRet
    875  f31e
    876  f31e				   GoLeft
    877  f31e		       a5 89		      LDA	SpriteXPos
    878  f320		       85 84		      STA	LastSpriteXPos
    879  f322		       a5 83		      LDA	SpriteYPos
    880  f324		       85 85		      STA	LastSpriteYPos
    881  f326
    882  f326		       c6 89		      DEC	SpriteXPos
    883  f328
    884  f328							; Verify If Sprite is in Far Left
    885  f328		       a5 89		      LDA	SpriteXPos
    886  f32a		       c9 00		      CMP	#0
    887  f32c		       d0 04		      BNE	NotFarLeft
    888  f32e
    889  f32e		       a9 a0		      LDA	#160
    890  f330		       85 89		      STA	SpriteXPos
    891  f332
    892  f332				   NotFarLeft
    893  f332		       4c 4c f3 	      JMP	UpdatePlayerPositionRet
    894  f335
    895  f335				   GoDown
    896  f335		       a5 89		      LDA	SpriteXPos
    897  f337		       85 84		      STA	LastSpriteXPos
    898  f339		       a5 83		      LDA	SpriteYPos
    899  f33b		       85 85		      STA	LastSpriteYPos
    900  f33d
    901  f33d		       c6 83		      DEC	SpriteYPos
    902  f33f		       4c 4c f3 	      JMP	UpdatePlayerPositionRet
    903  f342
    904  f342				   GoUp
    905  f342		       a5 89		      LDA	SpriteXPos
    906  f344		       85 84		      STA	LastSpriteXPos
    907  f346		       a5 83		      LDA	SpriteYPos
    908  f348		       85 85		      STA	LastSpriteYPos
    909  f34a
    910  f34a		       e6 83		      INC	SpriteYPos
    911  f34c
    912  f34c				   UpdatePlayerPositionRet
    913  f34c		       60		      RTS
    914  f34d
    915  f34d							;==================================================================================
    916  f34d							; ChangeAnimationFrame
    917  f34d							;==================================================================================
    918  f34d
    919  f34d				   ChangeAnimationFrame
    920  f34d							; Verify If Is Death Animation
    921  f34d		       a5 a7		      LDA	GameState
    922  f34f		       c9 01		      CMP	#1
    923  f351		       f0 25		      BEQ	FrameIsDeath
    924  f353
    925  f353				   FrameNotDeath
    926  f353							; Verify TimerCounter5
    927  f353		       a5 a0		      LDA	TimerCounter5
    928  f355		       d0 47		      BNE	DontChangeFrame
    929  f357
    930  f357							; Load Current Frame Index
    931  f357		       a4 95		      LDY	SpriteAnimationIndex
    932  f359
    933  f359							; Verify Next Frame
    934  f359		       a6 96		      LDX	IsFrameGoingUp
    935  f35b		       d0 04		      BNE	FrameIsGoingUp
    936  f35d
    937  f35d				   FrameIsGoingDown
    938  f35d		       88		      DEY
    939  f35e		       4c 62 f3 	      JMP	FrameChanged
    940  f361
    941  f361				   FrameIsGoingUp
    942  f361		       c8		      INY
    943  f362
    944  f362				   FrameChanged
    945  f362							; Check if Index is Either 0 or 3
    946  f362		       84 95		      STY	SpriteAnimationIndex
    947  f364		       c0 03		      CPY	#3
    948  f366		       f0 07		      BEQ	ChangeDirection
    949  f368		       c0 00		      CPY	#0
    950  f36a		       f0 03		      BEQ	ChangeDirection
    951  f36c
    952  f36c							; If not
    953  f36c		       4c 9e f3 	      JMP	FrameChangeReturn
    954  f36f
    955  f36f				   ChangeDirection
    956  f36f		       a5 96		      LDA	IsFrameGoingUp
    957  f371		       49 01		      EOR	#1
    958  f373		       85 96		      STA	IsFrameGoingUp
    959  f375		       4c 9e f3 	      JMP	FrameChangeReturn
    960  f378
    961  f378				   FrameIsDeath
    962  f378							; Verify TimerCounter20
    963  f378		       a5 a1		      LDA	TimerCounter20
    964  f37a		       d0 22		      BNE	DontChangeFrame
    965  f37c
    966  f37c				   CheckIfLastDeathFrame
    967  f37c							; Check if Frame is 10 (Last Death Frame)
    968  f37c		       a5 95		      LDA	SpriteAnimationIndex
    969  f37e		       c9 0a		      CMP	#10
    970  f380		       d0 17		      BNE	ChangeDeathFrame
    971  f382
    972  f382							; End Death Animation
    973  f382		       a9 00		      LDA	#0
    974  f384		       85 a7		      STA	GameState
    975  f386		       85 95		      STA	SpriteAnimationIndex
    976  f388
    977  f388		       a9 01		      LDA	#1
    978  f38a		       85 96		      STA	IsFrameGoingUp
    979  f38c
    980  f38c							; Reset Player Coordinates
    981  f38c		       a9 50		      LDA	#80
    982  f38e		       85 89		      STA	SpriteXPos
    983  f390		       a9 6b		      LDA	#107
    984  f392		       85 83		      STA	SpriteYPos
    985  f394
    986  f394							; Take One Life
    987  f394		       c6 a4		      DEC	LifeCount
    988  f396
    989  f396		       4c 9e f3 	      JMP	FrameChangeReturn
    990  f399
    991  f399				   ChangeDeathFrame
    992  f399		       e6 95		      INC	SpriteAnimationIndex
    993  f39b		       4c 9e f3 	      JMP	FrameChangeReturn
    994  f39e
    995  f39e				   DontRestartFrame
    996  f39e				   DontChangeFrame
    997  f39e				   FrameChangeReturn
    998  f39e		       60		      RTS
    999  f39f
   1000  f39f							;==================================================================================
   1001  f39f							; ApplyAnimationFrame
   1002  f39f							;==================================================================================
   1003  f39f
   1004  f39f				   ApplyAnimationFrame
   1005  f39f							; Check Counter
   1006  f39f		       a5 a0		      LDA	TimerCounter5
   1007  f3a1		       d0 2c		      BNE	AnimationFrameRet
   1008  f3a3
   1009  f3a3		       a5 95		      LDA	SpriteAnimationIndex
   1010  f3a5		       f0 2b		      BEQ	Animation0
   1011  f3a7		       c9 01		      CMP	#1
   1012  f3a9		       f0 32		      BEQ	Animation1
   1013  f3ab		       c9 02		      CMP	#2
   1014  f3ad		       f0 39		      BEQ	Animation2
   1015  f3af		       c9 03		      CMP	#3
   1016  f3b1		       f0 40		      BEQ	Animation3
   1017  f3b3		       c9 04		      CMP	#4
   1018  f3b5		       f0 47		      BEQ	Animation4
   1019  f3b7		       c9 05		      CMP	#5
   1020  f3b9		       f0 4e		      BEQ	Animation5
   1021  f3bb		       c9 06		      CMP	#6
   1022  f3bd		       f0 55		      BEQ	Animation6
   1023  f3bf		       c9 07		      CMP	#7
   1024  f3c1		       f0 5c		      BEQ	Animation7
   1025  f3c3		       c9 08		      CMP	#8
   1026  f3c5		       f0 63		      BEQ	Animation8
   1027  f3c7		       c9 09		      CMP	#9
   1028  f3c9		       f0 6a		      BEQ	Animation9
   1029  f3cb		       c9 0a		      CMP	#10
   1030  f3cd		       f0 71		      BEQ	Animation10
   1031  f3cf
   1032  f3cf				   AnimationFrameRet
   1033  f3cf		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1034  f3d2
   1035  f3d2				   Animation0
   1036  f3d2		       a9 00		      LDA	#<Sprite0Data
   1037  f3d4		       85 81		      STA	SpriteAddrPtr
   1038  f3d6		       a9 f7		      LDA	#>Sprite0Data
   1039  f3d8		       85 82		      STA	SpriteAddrPtr+1
   1040  f3da		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1041  f3dd
   1042  f3dd				   Animation1
   1043  f3dd		       a9 12		      LDA	#<Sprite1Data
   1044  f3df		       85 81		      STA	SpriteAddrPtr
   1045  f3e1		       a9 f7		      LDA	#>Sprite1Data
   1046  f3e3		       85 82		      STA	SpriteAddrPtr+1
   1047  f3e5		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1048  f3e8
   1049  f3e8				   Animation2
   1050  f3e8		       a9 24		      LDA	#<Sprite2Data
   1051  f3ea		       85 81		      STA	SpriteAddrPtr
   1052  f3ec		       a9 f7		      LDA	#>Sprite2Data
   1053  f3ee		       85 82		      STA	SpriteAddrPtr+1
   1054  f3f0		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1055  f3f3
   1056  f3f3				   Animation3
   1057  f3f3		       a9 36		      LDA	#<Sprite3Data
   1058  f3f5		       85 81		      STA	SpriteAddrPtr
   1059  f3f7		       a9 f7		      LDA	#>Sprite3Data
   1060  f3f9		       85 82		      STA	SpriteAddrPtr+1
   1061  f3fb		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1062  f3fe
   1063  f3fe				   Animation4
   1064  f3fe		       a9 48		      LDA	#<Sprite4Data
   1065  f400		       85 81		      STA	SpriteAddrPtr
   1066  f402		       a9 f7		      LDA	#>Sprite4Data
   1067  f404		       85 82		      STA	SpriteAddrPtr+1
   1068  f406		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1069  f409
   1070  f409				   Animation5
   1071  f409		       a9 5a		      LDA	#<Sprite5Data
   1072  f40b		       85 81		      STA	SpriteAddrPtr
   1073  f40d		       a9 f7		      LDA	#>Sprite5Data
   1074  f40f		       85 82		      STA	SpriteAddrPtr+1
   1075  f411		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1076  f414
   1077  f414				   Animation6
   1078  f414		       a9 6c		      LDA	#<Sprite6Data
   1079  f416		       85 81		      STA	SpriteAddrPtr
   1080  f418		       a9 f7		      LDA	#>Sprite6Data
   1081  f41a		       85 82		      STA	SpriteAddrPtr+1
   1082  f41c		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1083  f41f
   1084  f41f				   Animation7
   1085  f41f		       a9 7e		      LDA	#<Sprite7Data
   1086  f421		       85 81		      STA	SpriteAddrPtr
   1087  f423		       a9 f7		      LDA	#>Sprite7Data
   1088  f425		       85 82		      STA	SpriteAddrPtr+1
   1089  f427		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1090  f42a
   1091  f42a				   Animation8
   1092  f42a		       a9 90		      LDA	#<Sprite8Data
   1093  f42c		       85 81		      STA	SpriteAddrPtr
   1094  f42e		       a9 f7		      LDA	#>Sprite8Data
   1095  f430		       85 82		      STA	SpriteAddrPtr+1
   1096  f432		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1097  f435
   1098  f435				   Animation9
   1099  f435		       a9 a0		      LDA	#<Sprite9Data
   1100  f437		       85 81		      STA	SpriteAddrPtr
   1101  f439		       a9 f7		      LDA	#>Sprite9Data
   1102  f43b		       85 82		      STA	SpriteAddrPtr+1
   1103  f43d		       4c 48 f4 	      JMP	ApplyAnimationFrameRet
   1104  f440
   1105  f440				   Animation10
   1106  f440		       a9 b0		      LDA	#<Sprite10Data
   1107  f442		       85 81		      STA	SpriteAddrPtr
   1108  f444		       a9 f7		      LDA	#>Sprite10Data
   1109  f446		       85 82		      STA	SpriteAddrPtr+1
   1110  f448
   1111  f448				   ApplyAnimationFrameRet
   1112  f448		       60		      RTS
   1113  f449
   1114  f449							;==================================================================================
   1115  f449							; GetControllerInputsDirectional - Update Player Velocity Mask According to Inputs
   1116  f449							;==================================================================================
   1117  f449
   1118  f449				   GetControllerInputsDirectional
   1119  f449							; Check if game is in death animation
   1120  f449		       a5 a7		      LDA	GameState
   1121  f44b		       c9 01		      CMP	#1
   1122  f44d		       f0 3d		      BEQ	ControllerRet
   1123  f44f
   1124  f44f		       ae 80 02 	      LDX	SWCHA
   1125  f452
   1126  f452							; Check Right Input
   1127  f452		       8a		      TXA
   1128  f453		       29 80		      AND	#%10000000
   1129  f455		       f0 12		      BEQ	RightInput
   1130  f457
   1131  f457							; Check Left Input
   1132  f457		       8a		      TXA
   1133  f458		       29 40		      AND	#%01000000
   1134  f45a		       f0 18		      BEQ	LeftInput
   1135  f45c
   1136  f45c							; Check Down Input
   1137  f45c		       8a		      TXA
   1138  f45d		       29 20		      AND	#%00100000
   1139  f45f		       f0 20		      BEQ	DownInput
   1140  f461
   1141  f461							; Check Up Input
   1142  f461		       8a		      TXA
   1143  f462		       29 10		      AND	#%00010000
   1144  f464		       f0 22		      BEQ	UpInput
   1145  f466
   1146  f466							; No Input Detected
   1147  f466		       4c 8c f4 	      JMP	ControllerRet
   1148  f469
   1149  f469				   RightInput
   1150  f469		       a9 08		      LDA	#%1000
   1151  f46b		       85 0b		      STA	REFP0
   1152  f46d		       85 a2		      STA	PlayerReflectedBuffer
   1153  f46f
   1154  f46f		       85 86		      STA	PlayerVelocityMask
   1155  f471		       4c 8c f4 	      JMP	ControllerRet
   1156  f474
   1157  f474				   LeftInput
   1158  f474		       a9 00		      LDA	#0
   1159  f476		       85 0b		      STA	REFP0
   1160  f478		       85 a2		      STA	PlayerReflectedBuffer
   1161  f47a
   1162  f47a		       a9 04		      LDA	#%0100
   1163  f47c		       85 86		      STA	PlayerVelocityMask
   1164  f47e		       4c 8c f4 	      JMP	ControllerRet
   1165  f481
   1166  f481				   DownInput
   1167  f481		       a9 02		      LDA	#%0010
   1168  f483		       85 86		      STA	PlayerVelocityMask
   1169  f485		       4c 8c f4 	      JMP	ControllerRet
   1170  f488
   1171  f488				   UpInput
   1172  f488		       a9 01		      LDA	#%0001
   1173  f48a		       85 86		      STA	PlayerVelocityMask
   1174  f48c
   1175  f48c				   ControllerRet
   1176  f48c		       60		      RTS
   1177  f48d
   1178  f48d							;==================================================================================
   1179  f48d							; GetControllerInputsButton - Pause Game
   1180  f48d							;==================================================================================
   1181  f48d
   1182  f48d				   GetControllerInputsButton
   1183  f48d							; Verify Button Press
   1184  f48d		       a5 0c		      LDA	INPT4
   1185  f48f		       29 80		      AND	#%10000000
   1186  f491		       a8		      TAY
   1187  f492
   1188  f492							; See if it's Edge
   1189  f492		       c5 a6		      CMP	WasButtonPressed
   1190  f494		       f0 1e		      BEQ	StateNotChanged
   1191  f496
   1192  f496				   StateChanged
   1193  f496							; Only React to One Edge
   1194  f496		       c9 00		      CMP	#0
   1195  f498		       d0 1a		      BNE	ButtonNotPushed
   1196  f49a
   1197  f49a							; Check Expected Behavior if in Game Over Screen
   1198  f49a		       a5 a7		      LDA	GameState
   1199  f49c		       c9 03		      CMP	#3
   1200  f49e		       d0 03		      BNE	PauseUnpauseGame
   1201  f4a0
   1202  f4a0				   RestartGame
   1203  f4a0							; Fully Reset Game
   1204  f4a0		       4c 00 f0 	      JMP	Reset
   1205  f4a3
   1206  f4a3				   PauseUnpauseGame
   1207  f4a3							; Pause/Unpause Game
   1208  f4a3		       a5 a7		      LDA	GameState
   1209  f4a5		       c9 00		      CMP	#0
   1210  f4a7		       f0 07		      BEQ	PauseGame
   1211  f4a9
   1212  f4a9				   UnpauseGame
   1213  f4a9		       a9 00		      LDA	#0
   1214  f4ab		       85 a7		      STA	GameState
   1215  f4ad		       4c b4 f4 	      JMP	ControllerButtonRet
   1216  f4b0
   1217  f4b0				   PauseGame
   1218  f4b0		       a9 02		      LDA	#2
   1219  f4b2		       85 a7		      STA	GameState
   1220  f4b4
   1221  f4b4				   StateNotChanged
   1222  f4b4				   ButtonNotPushed
   1223  f4b4				   ControllerButtonRet
   1224  f4b4		       84 a6		      STY	WasButtonPressed
   1225  f4b6		       60		      RTS
   1226  f4b7
   1227  f4b7							;==================================================================================
   1228  f4b7							; GetController2Inputs - DEBUG - Controls Ghost
   1229  f4b7							;==================================================================================
   1230  f4b7
   1231  f4b7				   GetController2InputsDEBUG
   1232  f4b7		       ae 80 02 	      LDX	SWCHA
   1233  f4ba
   1234  f4ba							; Check Right Input
   1235  f4ba		       8a		      TXA
   1236  f4bb		       29 08		      AND	#%00001000
   1237  f4bd		       f0 12		      BEQ	RightInputGhost
   1238  f4bf
   1239  f4bf							; Check Left Input
   1240  f4bf		       8a		      TXA
   1241  f4c0		       29 04		      AND	#%00000100
   1242  f4c2		       f0 18		      BEQ	LeftInputGhost
   1243  f4c4
   1244  f4c4							; Check Down Input
   1245  f4c4		       8a		      TXA
   1246  f4c5		       29 02		      AND	#%00000010
   1247  f4c7		       f0 1e		      BEQ	DownInputGhost
   1248  f4c9
   1249  f4c9							; Check Up Input
   1250  f4c9		       8a		      TXA
   1251  f4ca		       29 01		      AND	#%00000001
   1252  f4cc		       f0 1e		      BEQ	UpInputGhost
   1253  f4ce
   1254  f4ce							; No Input Detected
   1255  f4ce		       4c ee f4 	      JMP	ControllerRetGhost
   1256  f4d1
   1257  f4d1				   RightInputGhost
   1258  f4d1		       e6 8a		      INC	GhostSpriteXPos
   1259  f4d3		       a9 08		      LDA	#%1000
   1260  f4d5		       85 0c		      STA	REFP1
   1261  f4d7		       85 a3		      STA	GhostReflectedBuffer
   1262  f4d9		       4c ee f4 	      JMP	ControllerRetGhost
   1263  f4dc
   1264  f4dc				   LeftInputGhost
   1265  f4dc		       c6 8a		      DEC	GhostSpriteXPos
   1266  f4de		       a9 00		      LDA	#0
   1267  f4e0		       85 0c		      STA	REFP1
   1268  f4e2		       85 a3		      STA	GhostReflectedBuffer
   1269  f4e4		       4c ee f4 	      JMP	ControllerRetGhost
   1270  f4e7
   1271  f4e7				   DownInputGhost
   1272  f4e7		       c6 8c		      DEC	GhostSpriteYPos
   1273  f4e9		       4c ee f4 	      JMP	ControllerRetGhost
   1274  f4ec
   1275  f4ec				   UpInputGhost
   1276  f4ec		       e6 8c		      INC	GhostSpriteYPos
   1277  f4ee
   1278  f4ee				   ControllerRetGhost
   1279  f4ee		       60		      RTS
   1280  f4ef
   1281  f4ef							;==================================================================================
   1282  f4ef							; UpdateTimer - Updates All Timers
   1283  f4ef							;==================================================================================
   1284  f4ef
   1285  f4ef				   UpdateTimer
   1286  f4ef				   UpdateTimer5
   1287  f4ef		       a5 a0		      LDA	TimerCounter5
   1288  f4f1		       c9 00		      CMP	#0
   1289  f4f3		       d0 07		      BNE	DidntReachLimitTimer5
   1290  f4f5
   1291  f4f5				   ReachedLimitTimer5
   1292  f4f5		       a9 05		      LDA	#TIMER_LIMIT1
   1293  f4f7		       85 a0		      STA	TimerCounter5
   1294  f4f9		       4c fe f4 	      JMP	UpdateTimer20
   1295  f4fc
   1296  f4fc				   DidntReachLimitTimer5
   1297  f4fc		       c6 a0		      DEC	TimerCounter5
   1298  f4fe
   1299  f4fe				   UpdateTimer20
   1300  f4fe		       a5 a1		      LDA	TimerCounter20
   1301  f500		       c9 00		      CMP	#0
   1302  f502		       d0 07		      BNE	DidntReachLimitTimer20
   1303  f504
   1304  f504				   ReachedLimitTimer20
   1305  f504		       a9 14		      LDA	#TIMER_LIMIT2
   1306  f506		       85 a1		      STA	TimerCounter20
   1307  f508		       4c 0d f5 	      JMP	TimerRet
   1308  f50b
   1309  f50b				   DidntReachLimitTimer20
   1310  f50b		       c6 a1		      DEC	TimerCounter20
   1311  f50d
   1312  f50d				   TimerRet
   1313  f50d		       60		      RTS
   1314  f50e
   1315  f50e							;==================================================================================
   1316  f50e							; UpdateScore
   1317  f50e							;==================================================================================
   1318  f50e
   1319  f50e				   UpdateScore
   1320  f50e							; Check If Wafer Was Picked Up
   1321  f50e		       a5 94		      LDA	PickedUpWaferBuffer
   1322  f510		       c9 00		      CMP	#0
   1323  f512		       f0 26		      BEQ	DidntPickUpWafer
   1324  f514
   1325  f514							; Picked Up Wafer - Increase Ones and Add to Wafer Count
   1326  f514		       e6 99		      INC	ScoreOnes
   1327  f516		       e6 a5		      INC	WaferCount
   1328  f518
   1329  f518							; Check if Ones reached 10
   1330  f518		       a6 99		      LDX	ScoreOnes
   1331  f51a		       e0 0a		      CPX	#10
   1332  f51c		       d0 1c		      BNE	NotYet10
   1333  f51e
   1334  f51e				   OnesReached10
   1335  f51e							; Reset Ones and Increase Tens
   1336  f51e		       a2 00		      LDX	#0
   1337  f520		       86 99		      STX	ScoreOnes
   1338  f522		       e6 98		      INC	ScoreTens
   1339  f524
   1340  f524							; Check if Tens reached 10
   1341  f524		       a6 98		      LDX	ScoreTens
   1342  f526		       e0 0a		      CPX	#10
   1343  f528		       d0 10		      BNE	NotYet10
   1344  f52a
   1345  f52a				   TensReached10
   1346  f52a							; Reset Tens
   1347  f52a		       a2 00		      LDX	#0
   1348  f52c		       86 98		      STX	ScoreTens
   1349  f52e		       e6 97		      INC	ScoreHundreds
   1350  f530
   1351  f530							; Check if Hundreds reached 10
   1352  f530		       a6 97		      LDX	ScoreHundreds
   1353  f532		       e0 0a		      CPX	#10
   1354  f534		       d0 04		      BNE	NotYet10
   1355  f536
   1356  f536				   HundredsReached10
   1357  f536							; Reset Hundreds
   1358  f536		       a2 00		      LDX	#0
   1359  f538		       86 97		      STX	ScoreHundreds
   1360  f53a
   1361  f53a				   DidntPickUpWafer
   1362  f53a				   NotYet10
   1363  f53a							; Flush PickedUpWaferBuffer
   1364  f53a		       a9 00		      LDA	#0
   1365  f53c		       85 94		      STA	PickedUpWaferBuffer
   1366  f53e
   1367  f53e		       60		      RTS
   1368  f53f
   1369  f53f							;==================================================================================
   1370  f53f							; HandleGameOver
   1371  f53f							;==================================================================================
   1372  f53f
   1373  f53f				   HandleGameOver
   1374  f53f							; Check if Button is Pressed
   1375  f53f		       20 8d f4 	      JSR	GetControllerInputsButton
   1376  f542
   1377  f542							; TIM64T Loop
   1378  f542				   VBlankLoopGameOver
   1379  f542		       ad 84 02 	      LDA	INTIM
   1380  f545		       d0 fb		      BNE	VBlankLoopGameOver
   1381  f547
   1382  f547							; Show Screen
   1383  f547		       20 60 f5 	      JSR	ShowGameOverScreen
   1384  f54a		       20 9a f5 	      JSR	GameOverOverscan
   1385  f54d		       20 1b f0 	      JSR	HandleVSync
   1386  f550
   1387  f550							; Initialize TIM64T
   1388  f550		       a9 2a		      LDA	#42
   1389  f552		       8d 96 02 	      STA	TIM64T
   1390  f555
   1391  f555							; Prepare Registers for VBLANK
   1392  f555		       a9 00		      LDA	#0
   1393  f557		       85 00		      STA	VSYNC
   1394  f559		       a9 42		      LDA	#%01000010
   1395  f55b		       85 01		      STA	VBLANK
   1396  f55d
   1397  f55d		       4c 3f f5 	      JMP	HandleGameOver
   1398  f560
   1399  f560							;==================================================================================
   1400  f560							; ShowGameOverScreen
   1401  f560							;==================================================================================
   1402  f560
   1403  f560				   ShowGameOverScreen
   1404  f560		       a9 00		      LDA	#0
   1405  f562		       85 01		      STA	VBLANK
   1406  f564
   1407  f564		       a9 0e		      LDA	#$0E
   1408  f566		       85 08		      STA	COLUPF
   1409  f568
   1410  f568		       a2 3c		      LDX	#60
   1411  f56a		       85 02		      STA	WSYNC
   1412  f56c				   GameOverLoop1
   1413  f56c		       85 02		      STA	WSYNC
   1414  f56e		       ca		      DEX
   1415  f56f		       d0 fb		      BNE	GameOverLoop1
   1416  f571
   1417  f571		       a2 32		      LDX	#50
   1418  f573				   GameOverLoop2
   1419  f573							; Display Game Over Message
   1420  f573		       bd 40 fa 	      LDA	GameOverMessage_STRIP_0,x
   1421  f576		       85 0d		      STA	PF0
   1422  f578		       bd 72 fa 	      LDA	GameOverMessage_STRIP_1,x
   1423  f57b		       85 0e		      STA	PF1
   1424  f57d		       bd a4 fa 	      LDA	GameOverMessage_STRIP_2,x
   1425  f580		       85 0f		      STA	PF2
   1426  f582
   1427  f582		       20 a2 f5 	      JSR	Delay12
   1428  f585
   1429  f585		       a9 00		      LDA	#0
   1430  f587		       85 0d		      STA	PF0
   1431  f589		       85 0e		      STA	PF1
   1432  f58b		       85 0f		      STA	PF2
   1433  f58d
   1434  f58d		       85 02		      STA	WSYNC
   1435  f58f		       ca		      DEX
   1436  f590		       d0 e1		      BNE	GameOverLoop2
   1437  f592
   1438  f592		       a2 51		      LDX	#81
   1439  f594				   GameOverLoop3
   1440  f594		       85 02		      STA	WSYNC
   1441  f596		       ca		      DEX
   1442  f597		       d0 fb		      BNE	GameOverLoop3
   1443  f599
   1444  f599		       60		      RTS
   1445  f59a
   1446  f59a							;==================================================================================
   1447  f59a							; GameOverOverscan
   1448  f59a							;==================================================================================
   1449  f59a
   1450  f59a				   GameOverOverscan
   1451  f59a
   1452  f59a		       a2 1e		      LDX	#30
   1453  f59c				   GameOverOverscanLoop
   1454  f59c		       85 02		      STA	WSYNC
   1455  f59e		       ca		      DEX
   1456  f59f		       d0 fb		      BNE	GameOverOverscanLoop
   1457  f5a1
   1458  f5a1		       60		      RTS
   1459  f5a2
   1460  f5a2							;==================================================================================
   1461  f5a2							; Delay12 - Waste 12 cycles of CPU
   1462  f5a2							;==================================================================================
   1463  f5a2
   1464  f5a2				   Delay12
   1465  f5a2		       60		      RTS
   1466  f5a3
   1467  f5a3							;==================================================================================
   1468  f5a3							; WaferXPosArray0
   1469  f5a3							;==================================================================================
   1470  f5a3
   1471  f5a3				   WaferXPosArray0
   1472  f5a3		       19 23 3c 64*	      .byte.b	25,35,60,100,130,140
   1473  f5a9
   1474  f5a9							;==================================================================================
   1475  f5a9							; FindWaferLookUp - Look up table for finding wafer in memory
   1476  f5a9							;==================================================================================
   1477  f5a9
   1478  f5a9				   FindWaferLookUp
   1479  f5a9		       00 02 04 08*	      .byte.b	0,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000
   1480  f5b1
   1481  f5b1							;==================================================================================
   1482  f5b1							; MultBy14
   1483  f5b1							;==================================================================================
   1484  f5b1
   1485  f5b1				   MultBy14
   1486  f5b1		       f0 fe 0c 1a*	      .byte.b	-16,-2,12,26,40,54,68,82,96,110,124
   1487  f5bc
   1488  f5bc							;==================================================================================
   1489  f5bc							; Lives Icons NUSIZ0 Look up table
   1490  f5bc							;==================================================================================
   1491  f5bc
   1492  f5bc				   LivesNUSIZ0LookUp
   1493  f5bc		       00 00 01 03	      .byte.b	0,0,%001,%011
   1494  f5c0
   1495  f5c0							;==================================================================================
   1496  f5c0							; CheckLineBytes
   1497  f5c0							;==================================================================================
   1498  f5c0
   1499  f5c0				   CheckLineBytes
   1500  f5c0		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1501  f5cb		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,7,7,0,0
   1502  f5d6		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1503  f5e1		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1504  f5ec		       06 06 00 00*	      .byte.b	6,6,0,0,0,0,0,0,0,0,0
   1505  f5f7		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1506  f602		       00 00 00 00*	      .byte.b	0,0,0,0,5,5,0,0,0,0,0
   1507  f60d		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1508  f618		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,4,4,0,0,0
   1509  f623		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1510  f62e		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,3,3,0
   1511  f639		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1512  f644		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,2
   1513  f64f		       02 00 00 00*	      .byte.b	2,0,0,0,0,0,0,0,0,0,0
   1514  f65a		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1515  f665		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,1,1
   1516  f670		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1517  f67b		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1518  f686		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1519  f691		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1520  f69c
   1521  f69c							;===============================================================================
   1522  f69c							; free space check before page boundry
   1523  f69c							;===============================================================================
   1524  f69c
 Start of Sprite0Data is:  $f69c
   1525  f69c					      echo	"Start of Sprite0Data is: ", *
   1526  f700		       00 00 00 00*	      align	256
   1527  f700
   1528  f700							;==================================================================================
   1529  f700							; Sprite Data - Pacman
   1530  f700							;==================================================================================
   1531  f700
   1532  f700				   Sprite0Data
   1533  f700							; Frame 0
   1534  f700		       00		      .byte.b	#%00000000
   1535  f701		       00		      .byte.b	#%00000000
   1536  f702		       7e		      .byte.b	#%01111110
   1537  f703		       7e		      .byte.b	#%01111110
   1538  f704		       3f		      .byte.b	#%00111111
   1539  f705		       3f		      .byte.b	#%00111111
   1540  f706		       0f		      .byte.b	#%00001111
   1541  f707		       0f		      .byte.b	#%00001111
   1542  f708		       07		      .byte.b	#%00000111
   1543  f709		       07		      .byte.b	#%00000111
   1544  f70a		       0f		      .byte.b	#%00001111
   1545  f70b		       0f		      .byte.b	#%00001111
   1546  f70c		       3f		      .byte.b	#%00111111
   1547  f70d		       3f		      .byte.b	#%00111111
   1548  f70e		       7e		      .byte.b	#%01111110
   1549  f70f		       7e		      .byte.b	#%01111110
   1550  f710		       00		      .byte.b	#%00000000
   1551  f711		       00		      .byte.b	#%00000000
   1552  f712
   1553  f712				   Sprite1Data
   1554  f712							; Frame 1
   1555  f712		       00		      .byte.b	#%00000000
   1556  f713		       00		      .byte.b	#%00000000
   1557  f714		       7e		      .byte.b	#%01111110
   1558  f715		       7e		      .byte.b	#%01111110
   1559  f716		       ff		      .byte.b	#%11111111
   1560  f717		       ff		      .byte.b	#%11111111
   1561  f718		       3f		      .byte.b	#%00111111
   1562  f719		       3f		      .byte.b	#%00111111
   1563  f71a		       0f		      .byte.b	#%00001111
   1564  f71b		       0f		      .byte.b	#%00001111
   1565  f71c		       3f		      .byte.b	#%00111111
   1566  f71d		       3f		      .byte.b	#%00111111
   1567  f71e		       ff		      .byte.b	#%11111111
   1568  f71f		       ff		      .byte.b	#%11111111
   1569  f720		       7e		      .byte.b	#%01111110
   1570  f721		       7e		      .byte.b	#%01111110
   1571  f722		       00		      .byte.b	#%00000000
   1572  f723		       00		      .byte.b	#%00000000
   1573  f724
   1574  f724				   Sprite2Data
   1575  f724							; Frame 2
   1576  f724		       00		      .byte.b	#%00000000
   1577  f725		       00		      .byte.b	#%00000000
   1578  f726		       7e		      .byte.b	#%01111110
   1579  f727		       7e		      .byte.b	#%01111110
   1580  f728		       ff		      .byte.b	#%11111111
   1581  f729		       ff		      .byte.b	#%11111111
   1582  f72a		       ff		      .byte.b	#%11111111
   1583  f72b		       ff		      .byte.b	#%11111111
   1584  f72c		       0f		      .byte.b	#%00001111
   1585  f72d		       0f		      .byte.b	#%00001111
   1586  f72e		       ff		      .byte.b	#%11111111
   1587  f72f		       ff		      .byte.b	#%11111111
   1588  f730		       ff		      .byte.b	#%11111111
   1589  f731		       ff		      .byte.b	#%11111111
   1590  f732		       7e		      .byte.b	#%01111110
   1591  f733		       7e		      .byte.b	#%01111110
   1592  f734		       00		      .byte.b	#%00000000
   1593  f735		       00		      .byte.b	#%00000000
   1594  f736
   1595  f736				   Sprite3Data
   1596  f736							; Frame 3
   1597  f736		       00		      .byte.b	#%00000000
   1598  f737		       00		      .byte.b	#%00000000
   1599  f738		       7e		      .byte.b	#%01111110
   1600  f739		       7e		      .byte.b	#%01111110
   1601  f73a		       ff		      .byte.b	#%11111111
   1602  f73b		       ff		      .byte.b	#%11111111
   1603  f73c		       ff		      .byte.b	#%11111111
   1604  f73d		       ff		      .byte.b	#%11111111
   1605  f73e		       ff		      .byte.b	#%11111111
   1606  f73f		       ff		      .byte.b	#%11111111
   1607  f740		       ff		      .byte.b	#%11111111
   1608  f741		       ff		      .byte.b	#%11111111
   1609  f742		       ff		      .byte.b	#%11111111
   1610  f743		       ff		      .byte.b	#%11111111
   1611  f744		       7e		      .byte.b	#%01111110
   1612  f745		       7e		      .byte.b	#%01111110
   1613  f746		       00		      .byte.b	#%00000000
   1614  f747		       00		      .byte.b	#%00000000
   1615  f748
   1616  f748				   Sprite4Data
   1617  f748							; Frame 4
   1618  f748		       00		      .byte.b	#%00000000
   1619  f749		       00		      .byte.b	#%00000000
   1620  f74a		       1e		      .byte.b	#%00011110
   1621  f74b		       1e		      .byte.b	#%00011110
   1622  f74c		       1f		      .byte.b	#%00011111
   1623  f74d		       1f		      .byte.b	#%00011111
   1624  f74e		       0f		      .byte.b	#%00001111
   1625  f74f		       0f		      .byte.b	#%00001111
   1626  f750		       07		      .byte.b	#%00000111
   1627  f751		       07		      .byte.b	#%00000111
   1628  f752		       0f		      .byte.b	#%00001111
   1629  f753		       0f		      .byte.b	#%00001111
   1630  f754		       1f		      .byte.b	#%00011111
   1631  f755		       1f		      .byte.b	#%00011111
   1632  f756		       1e		      .byte.b	#%00011110
   1633  f757		       1e		      .byte.b	#%00011110
   1634  f758		       00		      .byte.b	#%00000000
   1635  f759		       00		      .byte.b	#%00000000
   1636  f75a
   1637  f75a				   Sprite5Data
   1638  f75a							; Frame 5
   1639  f75a		       00		      .byte.b	#%00000000
   1640  f75b		       00		      .byte.b	#%00000000
   1641  f75c		       02		      .byte.b	#%00000010
   1642  f75d		       02		      .byte.b	#%00000010
   1643  f75e		       07		      .byte.b	#%00000111
   1644  f75f		       07		      .byte.b	#%00000111
   1645  f760		       07		      .byte.b	#%00000111
   1646  f761		       07		      .byte.b	#%00000111
   1647  f762		       07		      .byte.b	#%00000111
   1648  f763		       07		      .byte.b	#%00000111
   1649  f764		       07		      .byte.b	#%00000111
   1650  f765		       07		      .byte.b	#%00000111
   1651  f766		       07		      .byte.b	#%00000111
   1652  f767		       07		      .byte.b	#%00000111
   1653  f768		       02		      .byte.b	#%00000010
   1654  f769		       02		      .byte.b	#%00000010
   1655  f76a		       00		      .byte.b	#%00000000
   1656  f76b		       00		      .byte.b	#%00000000
   1657  f76c
   1658  f76c				   Sprite6Data
   1659  f76c							; Frame 6
   1660  f76c		       00		      .byte.b	#%00000000
   1661  f76d		       00		      .byte.b	#%00000000
   1662  f76e		       00		      .byte.b	#%00000000
   1663  f76f		       00		      .byte.b	#%00000000
   1664  f770		       00		      .byte.b	#%00000000
   1665  f771		       03		      .byte.b	#%00000011
   1666  f772		       03		      .byte.b	#%00000011
   1667  f773		       07		      .byte.b	#%00000111
   1668  f774		       07		      .byte.b	#%00000111
   1669  f775		       07		      .byte.b	#%00000111
   1670  f776		       07		      .byte.b	#%00000111
   1671  f777		       03		      .byte.b	#%00000011
   1672  f778		       03		      .byte.b	#%00000011
   1673  f779		       00		      .byte.b	#%00000000
   1674  f77a		       00		      .byte.b	#%00000000
   1675  f77b		       00		      .byte.b	#%00000000
   1676  f77c		       00		      .byte.b	#%00000000
   1677  f77d		       00		      .byte.b	#%00000000
   1678  f77e
   1679  f77e				   Sprite7Data
   1680  f77e							; Frame 7
   1681  f77e		       00		      .byte.b	#%00000000
   1682  f77f		       00		      .byte.b	#%00000000
   1683  f780		       00		      .byte.b	#%00000000
   1684  f781		       00		      .byte.b	#%00000000
   1685  f782		       00		      .byte.b	#%00000000
   1686  f783		       00		      .byte.b	#%00000000
   1687  f784		       00		      .byte.b	#%00000000
   1688  f785		       07		      .byte.b	#%00000111
   1689  f786		       07		      .byte.b	#%00000111
   1690  f787		       07		      .byte.b	#%00000111
   1691  f788		       07		      .byte.b	#%00000111
   1692  f789		       00		      .byte.b	#%00000000
   1693  f78a		       00		      .byte.b	#%00000000
   1694  f78b		       00		      .byte.b	#%00000000
   1695  f78c		       00		      .byte.b	#%00000000
   1696  f78d		       00		      .byte.b	#%00000000
   1697  f78e		       00		      .byte.b	#%00000000
   1698  f78f		       00		      .byte.b	#%00000000
   1699  f790
   1700  f790				   Sprite8Data
   1701  f790							; Frame 8
   1702  f790		       00		      .byte.b	#%00000000
   1703  f791		       00		      .byte.b	#%00000000
   1704  f792		       81		      .byte.b	#%10000001
   1705  f793		       81		      .byte.b	#%10000001
   1706  f794		       44		      .byte.b	#%01000100
   1707  f795		       44		      .byte.b	#%01000100
   1708  f796		       38		      .byte.b	#%00111000
   1709  f797		       38		      .byte.b	#%00111000
   1710  f798		       46		      .byte.b	#%01000110
   1711  f799		       46		      .byte.b	#%01000110
   1712  f79a		       81		      .byte.b	#%10000001
   1713  f79b		       81		      .byte.b	#%10000001
   1714  f79c		       00		      .byte.b	#%00000000
   1715  f79d		       00		      .byte.b	#%00000000
   1716  f79e		       00		      .byte.b	#%00000000
   1717  f79f		       00		      .byte.b	#%00000000
   1718  f7a0
   1719  f7a0				   Sprite9Data
   1720  f7a0							; Frame 9
   1721  f7a0		       00		      .byte.b	#%00000000
   1722  f7a1		       00		      .byte.b	#%00000000
   1723  f7a2		       10		      .byte.b	#%00010000
   1724  f7a3		       10		      .byte.b	#%00010000
   1725  f7a4		       81		      .byte.b	#%10000001
   1726  f7a5		       81		      .byte.b	#%10000001
   1727  f7a6		       00		      .byte.b	#%00000000
   1728  f7a7		       00		      .byte.b	#%00000000
   1729  f7a8		       80		      .byte.b	#%10000000
   1730  f7a9		       80		      .byte.b	#%10000000
   1731  f7aa		       01		      .byte.b	#%00000001
   1732  f7ab		       01		      .byte.b	#%00000001
   1733  f7ac		       00		      .byte.b	#%00000000
   1734  f7ad		       00		      .byte.b	#%00000000
   1735  f7ae		       00		      .byte.b	#%00000000
   1736  f7af		       00		      .byte.b	#%00000000
   1737  f7b0
   1738  f7b0				   Sprite10Data
   1739  f7b0							; Frame 10
   1740  f7b0		       00		      .byte.b	#%00000000
   1741  f7b1		       00		      .byte.b	#%00000000
   1742  f7b2		       00		      .byte.b	#%00000000
   1743  f7b3		       00		      .byte.b	#%00000000
   1744  f7b4		       00		      .byte.b	#%00000000
   1745  f7b5		       00		      .byte.b	#%00000000
   1746  f7b6		       00		      .byte.b	#%00000000
   1747  f7b7		       00		      .byte.b	#%00000000
   1748  f7b8		       00		      .byte.b	#%00000000
   1749  f7b9		       00		      .byte.b	#%00000000
   1750  f7ba		       00		      .byte.b	#%00000000
   1751  f7bb		       00		      .byte.b	#%00000000
   1752  f7bc		       00		      .byte.b	#%00000000
   1753  f7bd		       00		      .byte.b	#%00000000
   1754  f7be		       00		      .byte.b	#%00000000
   1755  f7bf		       00		      .byte.b	#%00000000
   1756  f7c0
   1757  f7c0							;==================================================================================
   1758  f7c0							; Sprite Data - Ghost
   1759  f7c0							;==================================================================================
   1760  f7c0
   1761  f7c0				   SpriteGhostData
   1762  f7c0		       00		      .byte.b	#%00000000
   1763  f7c1		       00		      .byte.b	#%00000000
   1764  f7c2		       55		      .byte.b	#%01010101
   1765  f7c3		       55		      .byte.b	#%01010101
   1766  f7c4		       ff		      .byte.b	#%11111111
   1767  f7c5		       ff		      .byte.b	#%11111111
   1768  f7c6		       ff		      .byte.b	#%11111111
   1769  f7c7		       99		      .byte.b	#%10011001
   1770  f7c8		       99		      .byte.b	#%10011001
   1771  f7c9		       bb		      .byte.b	#%10111011
   1772  f7ca		       bb		      .byte.b	#%10111011
   1773  f7cb		       ff		      .byte.b	#%11111111
   1774  f7cc		       7e		      .byte.b	#%01111110
   1775  f7cd		       7e		      .byte.b	#%01111110
   1776  f7ce		       7e		      .byte.b	#%01111110
   1777  f7cf		       7e		      .byte.b	#%01111110
   1778  f7d0		       00		      .byte.b	#%00000000
   1779  f7d1		       00		      .byte.b	#%00000000
   1780  f7d2
   1781  f7d2							;==================================================================================
   1782  f7d2							; Sprite Data - Lives
   1783  f7d2							;==================================================================================
   1784  f7d2
   1785  f7d2				   SpriteLifeData
   1786  f7d2		       00		      .byte.b	#%00000000
   1787  f7d3		       00		      .byte.b	#%00000000
   1788  f7d4		       00		      .byte.b	#%00000000
   1789  f7d5		       00		      .byte.b	#%00000000
   1790  f7d6		       00		      .byte.b	#%00000000
   1791  f7d7		       00		      .byte.b	#%00000000
   1792  f7d8		       00		      .byte.b	#%00000000
   1793  f7d9		       00		      .byte.b	#%00000000
   1794  f7da		       00		      .byte.b	#%00000000
   1795  f7db		       00		      .byte.b	#%00000000
   1796  f7dc		       00		      .byte.b	#%00000000
   1797  f7dd		       00		      .byte.b	#%00000000
   1798  f7de		       00		      .byte.b	#%00000000
   1799  f7df		       00		      .byte.b	#%00000000
   1800  f7e0		       00		      .byte.b	#%00000000
   1801  f7e1		       00		      .byte.b	#%00000000
   1802  f7e2		       00		      .byte.b	#%00000000
   1803  f7e3		       00		      .byte.b	#%00000000
   1804  f7e4		       3c		      .byte.b	#%00111100
   1805  f7e5		       7e		      .byte.b	#%01111110
   1806  f7e6		       ff		      .byte.b	#%11111111
   1807  f7e7		       ff		      .byte.b	#%11111111
   1808  f7e8		       3f		      .byte.b	#%00111111
   1809  f7e9		       0f		      .byte.b	#%00001111
   1810  f7ea		       3f		      .byte.b	#%00111111
   1811  f7eb		       ff		      .byte.b	#%11111111
   1812  f7ec		       ff		      .byte.b	#%11111111
   1813  f7ed		       7e		      .byte.b	#%01111110
   1814  f7ee		       3c		      .byte.b	#%00111100
   1815  f7ef		       00		      .byte.b	#%00000000
   1816  f7f0
   1817  f7f0							;==================================================================================
   1818  f7f0							; free space check before page boundry
   1819  f7f0							;==================================================================================
   1820  f7f0
 End of Sprite0Data is:  $f7f0
   1821  f7f0					      echo	"End of Sprite0Data is: ", *
   1822  f800		       00 00 00 00*	      align	256
   1823  f800
   1824  f800							;==================================================================================
   1825  f800							; Board Data
   1826  f800							;==================================================================================
   1827  f800
------- FILE MainBoard.asm LEVEL 2 PASS 2
      0  f800					      include	"MainBoard.asm"
      1  f800				   MainBoard
      2  f800
      3  f800				   MainBoard_STRIP_0
      4  f800		       50		      .byte.b	80
      5  f801		       00		      .byte.b	0
      6  f802		       f0		      .byte.b	240
      7  f803		       f0		      .byte.b	240
      8  f804		       f0		      .byte.b	240
      9  f805		       10		      .byte.b	16
     10  f806		       10		      .byte.b	16
     11  f807		       10		      .byte.b	16
     12  f808		       10		      .byte.b	16
     13  f809		       10		      .byte.b	16
     14  f80a		       10		      .byte.b	16
     15  f80b		       10		      .byte.b	16
     16  f80c		       10		      .byte.b	16
     17  f80d		       10		      .byte.b	16
     18  f80e		       10		      .byte.b	16
     19  f80f		       10		      .byte.b	16
     20  f810		       10		      .byte.b	16
     21  f811		       10		      .byte.b	16
     22  f812		       10		      .byte.b	16
     23  f813		       10		      .byte.b	16
     24  f814		       10		      .byte.b	16
     25  f815		       10		      .byte.b	16
     26  f816		       10		      .byte.b	16
     27  f817		       10		      .byte.b	16
     28  f818		       10		      .byte.b	16
     29  f819		       10		      .byte.b	16
     30  f81a		       10		      .byte.b	16
     31  f81b		       10		      .byte.b	16
     32  f81c		       10		      .byte.b	16
     33  f81d		       10		      .byte.b	16
     34  f81e		       10		      .byte.b	16
     35  f81f		       10		      .byte.b	16
     36  f820		       10		      .byte.b	16
     37  f821		       10		      .byte.b	16
     38  f822		       10		      .byte.b	16
     39  f823		       10		      .byte.b	16
     40  f824		       10		      .byte.b	16
     41  f825		       10		      .byte.b	16
     42  f826		       10		      .byte.b	16
     43  f827		       10		      .byte.b	16
     44  f828		       10		      .byte.b	16
     45  f829		       10		      .byte.b	16
     46  f82a		       10		      .byte.b	16
     47  f82b		       10		      .byte.b	16
     48  f82c		       10		      .byte.b	16
     49  f82d		       10		      .byte.b	16
     50  f82e		       10		      .byte.b	16
     51  f82f		       10		      .byte.b	16
     52  f830		       10		      .byte.b	16
     53  f831		       10		      .byte.b	16
     54  f832		       10		      .byte.b	16
     55  f833		       10		      .byte.b	16
     56  f834		       10		      .byte.b	16
     57  f835		       10		      .byte.b	16
     58  f836		       10		      .byte.b	16
     59  f837		       10		      .byte.b	16
     60  f838		       10		      .byte.b	16
     61  f839		       f0		      .byte.b	240
     62  f83a		       f0		      .byte.b	240
     63  f83b		       f0		      .byte.b	240
     64  f83c		       f0		      .byte.b	240
     65  f83d		       80		      .byte.b	128
     66  f83e		       80		      .byte.b	128
     67  f83f		       80		      .byte.b	128
     68  f840		       80		      .byte.b	128
     69  f841		       80		      .byte.b	128
     70  f842		       80		      .byte.b	128
     71  f843		       80		      .byte.b	128
     72  f844		       80		      .byte.b	128
     73  f845		       80		      .byte.b	128
     74  f846		       80		      .byte.b	128
     75  f847		       80		      .byte.b	128
     76  f848		       80		      .byte.b	128
     77  f849		       80		      .byte.b	128
     78  f84a		       80		      .byte.b	128
     79  f84b		       80		      .byte.b	128
     80  f84c		       80		      .byte.b	128
     81  f84d		       80		      .byte.b	128
     82  f84e		       80		      .byte.b	128
     83  f84f		       80		      .byte.b	128
     84  f850		       80		      .byte.b	128
     85  f851		       f0		      .byte.b	240
     86  f852		       f0		      .byte.b	240
     87  f853		       f0		      .byte.b	240
     88  f854		       f0		      .byte.b	240
     89  f855		       00		      .byte.b	0
     90  f856		       00		      .byte.b	0
     91  f857		       00		      .byte.b	0
     92  f858		       00		      .byte.b	0
     93  f859		       00		      .byte.b	0
     94  f85a		       00		      .byte.b	0
     95  f85b		       00		      .byte.b	0
     96  f85c		       00		      .byte.b	0
     97  f85d		       00		      .byte.b	0
     98  f85e		       00		      .byte.b	0
     99  f85f		       00		      .byte.b	0
    100  f860		       00		      .byte.b	0
    101  f861		       00		      .byte.b	0
    102  f862		       00		      .byte.b	0
    103  f863		       00		      .byte.b	0
    104  f864		       00		      .byte.b	0
    105  f865		       00		      .byte.b	0
    106  f866		       00		      .byte.b	0
    107  f867		       00		      .byte.b	0
    108  f868		       00		      .byte.b	0
    109  f869		       00		      .byte.b	0
    110  f86a		       00		      .byte.b	0
    111  f86b		       f0		      .byte.b	240
    112  f86c		       f0		      .byte.b	240
    113  f86d		       f0		      .byte.b	240
    114  f86e		       80		      .byte.b	128
    115  f86f		       80		      .byte.b	128
    116  f870		       80		      .byte.b	128
    117  f871		       80		      .byte.b	128
    118  f872		       80		      .byte.b	128
    119  f873		       80		      .byte.b	128
    120  f874		       80		      .byte.b	128
    121  f875		       80		      .byte.b	128
    122  f876		       80		      .byte.b	128
    123  f877		       80		      .byte.b	128
    124  f878		       80		      .byte.b	128
    125  f879		       80		      .byte.b	128
    126  f87a		       80		      .byte.b	128
    127  f87b		       80		      .byte.b	128
    128  f87c		       80		      .byte.b	128
    129  f87d		       80		      .byte.b	128
    130  f87e		       80		      .byte.b	128
    131  f87f		       80		      .byte.b	128
    132  f880		       80		      .byte.b	128
    133  f881		       f0		      .byte.b	240
    134  f882		       f0		      .byte.b	240
    135  f883		       f0		      .byte.b	240
    136  f884		       f0		      .byte.b	240
    137  f885		       10		      .byte.b	16
    138  f886		       10		      .byte.b	16
    139  f887		       10		      .byte.b	16
    140  f888		       10		      .byte.b	16
    141  f889		       10		      .byte.b	16
    142  f88a		       10		      .byte.b	16
    143  f88b		       10		      .byte.b	16
    144  f88c		       10		      .byte.b	16
    145  f88d		       10		      .byte.b	16
    146  f88e		       10		      .byte.b	16
    147  f88f		       10		      .byte.b	16
    148  f890		       10		      .byte.b	16
    149  f891		       10		      .byte.b	16
    150  f892		       10		      .byte.b	16
    151  f893		       10		      .byte.b	16
    152  f894		       10		      .byte.b	16
    153  f895		       10		      .byte.b	16
    154  f896		       10		      .byte.b	16
    155  f897		       10		      .byte.b	16
    156  f898		       10		      .byte.b	16
    157  f899		       10		      .byte.b	16
    158  f89a		       10		      .byte.b	16
    159  f89b		       10		      .byte.b	16
    160  f89c		       10		      .byte.b	16
    161  f89d		       10		      .byte.b	16
    162  f89e		       10		      .byte.b	16
    163  f89f		       10		      .byte.b	16
    164  f8a0		       10		      .byte.b	16
    165  f8a1		       10		      .byte.b	16
    166  f8a2		       10		      .byte.b	16
    167  f8a3		       10		      .byte.b	16
    168  f8a4		       10		      .byte.b	16
    169  f8a5		       10		      .byte.b	16
    170  f8a6		       10		      .byte.b	16
    171  f8a7		       10		      .byte.b	16
    172  f8a8		       10		      .byte.b	16
    173  f8a9		       10		      .byte.b	16
    174  f8aa		       10		      .byte.b	16
    175  f8ab		       10		      .byte.b	16
    176  f8ac		       10		      .byte.b	16
    177  f8ad		       10		      .byte.b	16
    178  f8ae		       10		      .byte.b	16
    179  f8af		       10		      .byte.b	16
    180  f8b0		       10		      .byte.b	16
    181  f8b1		       10		      .byte.b	16
    182  f8b2		       10		      .byte.b	16
    183  f8b3		       10		      .byte.b	16
    184  f8b4		       10		      .byte.b	16
    185  f8b5		       10		      .byte.b	16
    186  f8b6		       10		      .byte.b	16
    187  f8b7		       10		      .byte.b	16
    188  f8b8		       10		      .byte.b	16
    189  f8b9		       10		      .byte.b	16
    190  f8ba		       f0		      .byte.b	240
    191  f8bb		       f0		      .byte.b	240
    192  f8bc		       f0		      .byte.b	240
    193  f8bd		       f0		      .byte.b	240
    194  f8be		       00		      .byte.b	0
    195  f8bf		       00		      .byte.b	0
    196  f8c0				   MainBoard_STRIP_1
    197  f8c0		       aa		      .byte.b	170
    198  f8c1		       00		      .byte.b	0
    199  f8c2		       ff		      .byte.b	255
    200  f8c3		       ff		      .byte.b	255
    201  f8c4		       ff		      .byte.b	255
    202  f8c5		       00		      .byte.b	0
    203  f8c6		       00		      .byte.b	0
    204  f8c7		       00		      .byte.b	0
    205  f8c8		       00		      .byte.b	0
    206  f8c9		       00		      .byte.b	0
    207  f8ca		       00		      .byte.b	0
    208  f8cb		       00		      .byte.b	0
    209  f8cc		       00		      .byte.b	0
    210  f8cd		       00		      .byte.b	0
    211  f8ce		       00		      .byte.b	0
    212  f8cf		       00		      .byte.b	0
    213  f8d0		       00		      .byte.b	0
    214  f8d1		       00		      .byte.b	0
    215  f8d2		       00		      .byte.b	0
    216  f8d3		       00		      .byte.b	0
    217  f8d4		       00		      .byte.b	0
    218  f8d5		       00		      .byte.b	0
    219  f8d6		       00		      .byte.b	0
    220  f8d7		       00		      .byte.b	0
    221  f8d8		       00		      .byte.b	0
    222  f8d9		       00		      .byte.b	0
    223  f8da		       00		      .byte.b	0
    224  f8db		       00		      .byte.b	0
    225  f8dc		       00		      .byte.b	0
    226  f8dd		       00		      .byte.b	0
    227  f8de		       00		      .byte.b	0
    228  f8df		       e3		      .byte.b	227
    229  f8e0		       e3		      .byte.b	227
    230  f8e1		       e3		      .byte.b	227
    231  f8e2		       e3		      .byte.b	227
    232  f8e3		       03		      .byte.b	3
    233  f8e4		       03		      .byte.b	3
    234  f8e5		       03		      .byte.b	3
    235  f8e6		       03		      .byte.b	3
    236  f8e7		       03		      .byte.b	3
    237  f8e8		       03		      .byte.b	3
    238  f8e9		       03		      .byte.b	3
    239  f8ea		       03		      .byte.b	3
    240  f8eb		       03		      .byte.b	3
    241  f8ec		       03		      .byte.b	3
    242  f8ed		       03		      .byte.b	3
    243  f8ee		       03		      .byte.b	3
    244  f8ef		       03		      .byte.b	3
    245  f8f0		       03		      .byte.b	3
    246  f8f1		       03		      .byte.b	3
    247  f8f2		       03		      .byte.b	3
    248  f8f3		       03		      .byte.b	3
    249  f8f4		       03		      .byte.b	3
    250  f8f5		       03		      .byte.b	3
    251  f8f6		       03		      .byte.b	3
    252  f8f7		       03		      .byte.b	3
    253  f8f8		       03		      .byte.b	3
    254  f8f9		       e3		      .byte.b	227
    255  f8fa		       e3		      .byte.b	227
    256  f8fb		       e3		      .byte.b	227
    257  f8fc		       e3		      .byte.b	227
    258  f8fd		       00		      .byte.b	0
    259  f8fe		       00		      .byte.b	0
    260  f8ff		       00		      .byte.b	0
    261  f900		       00		      .byte.b	0
    262  f901		       00		      .byte.b	0
    263  f902		       00		      .byte.b	0
    264  f903		       00		      .byte.b	0
    265  f904		       00		      .byte.b	0
    266  f905		       00		      .byte.b	0
    267  f906		       00		      .byte.b	0
    268  f907		       00		      .byte.b	0
    269  f908		       00		      .byte.b	0
    270  f909		       00		      .byte.b	0
    271  f90a		       00		      .byte.b	0
    272  f90b		       00		      .byte.b	0
    273  f90c		       00		      .byte.b	0
    274  f90d		       00		      .byte.b	0
    275  f90e		       00		      .byte.b	0
    276  f90f		       00		      .byte.b	0
    277  f910		       00		      .byte.b	0
    278  f911		       00		      .byte.b	0
    279  f912		       1f		      .byte.b	31
    280  f913		       1f		      .byte.b	31
    281  f914		       1f		      .byte.b	31
    282  f915		       00		      .byte.b	0
    283  f916		       00		      .byte.b	0
    284  f917		       00		      .byte.b	0
    285  f918		       00		      .byte.b	0
    286  f919		       00		      .byte.b	0
    287  f91a		       00		      .byte.b	0
    288  f91b		       00		      .byte.b	0
    289  f91c		       00		      .byte.b	0
    290  f91d		       00		      .byte.b	0
    291  f91e		       00		      .byte.b	0
    292  f91f		       00		      .byte.b	0
    293  f920		       00		      .byte.b	0
    294  f921		       00		      .byte.b	0
    295  f922		       00		      .byte.b	0
    296  f923		       00		      .byte.b	0
    297  f924		       00		      .byte.b	0
    298  f925		       00		      .byte.b	0
    299  f926		       00		      .byte.b	0
    300  f927		       00		      .byte.b	0
    301  f928		       00		      .byte.b	0
    302  f929		       00		      .byte.b	0
    303  f92a		       00		      .byte.b	0
    304  f92b		       1f		      .byte.b	31
    305  f92c		       1f		      .byte.b	31
    306  f92d		       00		      .byte.b	0
    307  f92e		       00		      .byte.b	0
    308  f92f		       00		      .byte.b	0
    309  f930		       00		      .byte.b	0
    310  f931		       00		      .byte.b	0
    311  f932		       00		      .byte.b	0
    312  f933		       00		      .byte.b	0
    313  f934		       00		      .byte.b	0
    314  f935		       00		      .byte.b	0
    315  f936		       00		      .byte.b	0
    316  f937		       00		      .byte.b	0
    317  f938		       00		      .byte.b	0
    318  f939		       00		      .byte.b	0
    319  f93a		       00		      .byte.b	0
    320  f93b		       00		      .byte.b	0
    321  f93c		       00		      .byte.b	0
    322  f93d		       00		      .byte.b	0
    323  f93e		       00		      .byte.b	0
    324  f93f		       00		      .byte.b	0
    325  f940		       00		      .byte.b	0
    326  f941		       00		      .byte.b	0
    327  f942		       1f		      .byte.b	31
    328  f943		       1f		      .byte.b	31
    329  f944		       1f		      .byte.b	31
    330  f945		       00		      .byte.b	0
    331  f946		       00		      .byte.b	0
    332  f947		       00		      .byte.b	0
    333  f948		       00		      .byte.b	0
    334  f949		       00		      .byte.b	0
    335  f94a		       00		      .byte.b	0
    336  f94b		       00		      .byte.b	0
    337  f94c		       00		      .byte.b	0
    338  f94d		       00		      .byte.b	0
    339  f94e		       00		      .byte.b	0
    340  f94f		       00		      .byte.b	0
    341  f950		       00		      .byte.b	0
    342  f951		       00		      .byte.b	0
    343  f952		       00		      .byte.b	0
    344  f953		       00		      .byte.b	0
    345  f954		       00		      .byte.b	0
    346  f955		       00		      .byte.b	0
    347  f956		       00		      .byte.b	0
    348  f957		       00		      .byte.b	0
    349  f958		       00		      .byte.b	0
    350  f959		       00		      .byte.b	0
    351  f95a		       00		      .byte.b	0
    352  f95b		       f8		      .byte.b	248
    353  f95c		       f8		      .byte.b	248
    354  f95d		       f8		      .byte.b	248
    355  f95e		       f8		      .byte.b	248
    356  f95f		       f8		      .byte.b	248
    357  f960		       f8		      .byte.b	248
    358  f961		       f8		      .byte.b	248
    359  f962		       f8		      .byte.b	248
    360  f963		       f8		      .byte.b	248
    361  f964		       00		      .byte.b	0
    362  f965		       00		      .byte.b	0
    363  f966		       00		      .byte.b	0
    364  f967		       00		      .byte.b	0
    365  f968		       00		      .byte.b	0
    366  f969		       00		      .byte.b	0
    367  f96a		       00		      .byte.b	0
    368  f96b		       00		      .byte.b	0
    369  f96c		       00		      .byte.b	0
    370  f96d		       00		      .byte.b	0
    371  f96e		       00		      .byte.b	0
    372  f96f		       00		      .byte.b	0
    373  f970		       00		      .byte.b	0
    374  f971		       00		      .byte.b	0
    375  f972		       00		      .byte.b	0
    376  f973		       00		      .byte.b	0
    377  f974		       00		      .byte.b	0
    378  f975		       00		      .byte.b	0
    379  f976		       00		      .byte.b	0
    380  f977		       00		      .byte.b	0
    381  f978		       00		      .byte.b	0
    382  f979		       00		      .byte.b	0
    383  f97a		       ff		      .byte.b	255
    384  f97b		       ff		      .byte.b	255
    385  f97c		       ff		      .byte.b	255
    386  f97d		       ff		      .byte.b	255
    387  f97e		       00		      .byte.b	0
    388  f97f		       00		      .byte.b	0
    389  f980				   MainBoard_STRIP_2
    390  f980		       00		      .byte.b	0
    391  f981		       00		      .byte.b	0
    392  f982		       ff		      .byte.b	255
    393  f983		       ff		      .byte.b	255
    394  f984		       ff		      .byte.b	255
    395  f985		       80		      .byte.b	128
    396  f986		       80		      .byte.b	128
    397  f987		       80		      .byte.b	128
    398  f988		       80		      .byte.b	128
    399  f989		       80		      .byte.b	128
    400  f98a		       80		      .byte.b	128
    401  f98b		       80		      .byte.b	128
    402  f98c		       80		      .byte.b	128
    403  f98d		       80		      .byte.b	128
    404  f98e		       80		      .byte.b	128
    405  f98f		       80		      .byte.b	128
    406  f990		       80		      .byte.b	128
    407  f991		       80		      .byte.b	128
    408  f992		       80		      .byte.b	128
    409  f993		       80		      .byte.b	128
    410  f994		       80		      .byte.b	128
    411  f995		       80		      .byte.b	128
    412  f996		       80		      .byte.b	128
    413  f997		       80		      .byte.b	128
    414  f998		       80		      .byte.b	128
    415  f999		       80		      .byte.b	128
    416  f99a		       80		      .byte.b	128
    417  f99b		       80		      .byte.b	128
    418  f99c		       80		      .byte.b	128
    419  f99d		       80		      .byte.b	128
    420  f99e		       80		      .byte.b	128
    421  f99f		       8f		      .byte.b	143
    422  f9a0		       8f		      .byte.b	143
    423  f9a1		       8f		      .byte.b	143
    424  f9a2		       8f		      .byte.b	143
    425  f9a3		       01		      .byte.b	1
    426  f9a4		       01		      .byte.b	1
    427  f9a5		       01		      .byte.b	1
    428  f9a6		       01		      .byte.b	1
    429  f9a7		       01		      .byte.b	1
    430  f9a8		       01		      .byte.b	1
    431  f9a9		       01		      .byte.b	1
    432  f9aa		       01		      .byte.b	1
    433  f9ab		       01		      .byte.b	1
    434  f9ac		       01		      .byte.b	1
    435  f9ad		       01		      .byte.b	1
    436  f9ae		       01		      .byte.b	1
    437  f9af		       01		      .byte.b	1
    438  f9b0		       01		      .byte.b	1
    439  f9b1		       01		      .byte.b	1
    440  f9b2		       01		      .byte.b	1
    441  f9b3		       01		      .byte.b	1
    442  f9b4		       01		      .byte.b	1
    443  f9b5		       01		      .byte.b	1
    444  f9b6		       01		      .byte.b	1
    445  f9b7		       01		      .byte.b	1
    446  f9b8		       01		      .byte.b	1
    447  f9b9		       e1		      .byte.b	225
    448  f9ba		       e1		      .byte.b	225
    449  f9bb		       e1		      .byte.b	225
    450  f9bc		       e1		      .byte.b	225
    451  f9bd		       80		      .byte.b	128
    452  f9be		       80		      .byte.b	128
    453  f9bf		       80		      .byte.b	128
    454  f9c0		       80		      .byte.b	128
    455  f9c1		       80		      .byte.b	128
    456  f9c2		       80		      .byte.b	128
    457  f9c3		       80		      .byte.b	128
    458  f9c4		       80		      .byte.b	128
    459  f9c5		       80		      .byte.b	128
    460  f9c6		       80		      .byte.b	128
    461  f9c7		       80		      .byte.b	128
    462  f9c8		       80		      .byte.b	128
    463  f9c9		       80		      .byte.b	128
    464  f9ca		       80		      .byte.b	128
    465  f9cb		       80		      .byte.b	128
    466  f9cc		       80		      .byte.b	128
    467  f9cd		       80		      .byte.b	128
    468  f9ce		       80		      .byte.b	128
    469  f9cf		       80		      .byte.b	128
    470  f9d0		       80		      .byte.b	128
    471  f9d1		       80		      .byte.b	128
    472  f9d2		       8f		      .byte.b	143
    473  f9d3		       8f		      .byte.b	143
    474  f9d4		       8f		      .byte.b	143
    475  f9d5		       00		      .byte.b	0
    476  f9d6		       00		      .byte.b	0
    477  f9d7		       00		      .byte.b	0
    478  f9d8		       00		      .byte.b	0
    479  f9d9		       00		      .byte.b	0
    480  f9da		       00		      .byte.b	0
    481  f9db		       00		      .byte.b	0
    482  f9dc		       00		      .byte.b	0
    483  f9dd		       00		      .byte.b	0
    484  f9de		       00		      .byte.b	0
    485  f9df		       00		      .byte.b	0
    486  f9e0		       00		      .byte.b	0
    487  f9e1		       00		      .byte.b	0
    488  f9e2		       00		      .byte.b	0
    489  f9e3		       00		      .byte.b	0
    490  f9e4		       00		      .byte.b	0
    491  f9e5		       00		      .byte.b	0
    492  f9e6		       00		      .byte.b	0
    493  f9e7		       00		      .byte.b	0
    494  f9e8		       00		      .byte.b	0
    495  f9e9		       00		      .byte.b	0
    496  f9ea		       e0		      .byte.b	224
    497  f9eb		       e3		      .byte.b	227
    498  f9ec		       e3		      .byte.b	227
    499  f9ed		       20		      .byte.b	32
    500  f9ee		       20		      .byte.b	32
    501  f9ef		       20		      .byte.b	32
    502  f9f0		       20		      .byte.b	32
    503  f9f1		       20		      .byte.b	32
    504  f9f2		       20		      .byte.b	32
    505  f9f3		       20		      .byte.b	32
    506  f9f4		       20		      .byte.b	32
    507  f9f5		       20		      .byte.b	32
    508  f9f6		       20		      .byte.b	32
    509  f9f7		       20		      .byte.b	32
    510  f9f8		       20		      .byte.b	32
    511  f9f9		       20		      .byte.b	32
    512  f9fa		       20		      .byte.b	32
    513  f9fb		       20		      .byte.b	32
    514  f9fc		       20		      .byte.b	32
    515  f9fd		       20		      .byte.b	32
    516  f9fe		       20		      .byte.b	32
    517  f9ff		       20		      .byte.b	32
    518  fa00		       20		      .byte.b	32
    519  fa01		       20		      .byte.b	32
    520  fa02		       3f		      .byte.b	63
    521  fa03		       ff		      .byte.b	255
    522  fa04		       ff		      .byte.b	255
    523  fa05		       00		      .byte.b	0
    524  fa06		       00		      .byte.b	0
    525  fa07		       00		      .byte.b	0
    526  fa08		       00		      .byte.b	0
    527  fa09		       00		      .byte.b	0
    528  fa0a		       00		      .byte.b	0
    529  fa0b		       00		      .byte.b	0
    530  fa0c		       00		      .byte.b	0
    531  fa0d		       00		      .byte.b	0
    532  fa0e		       00		      .byte.b	0
    533  fa0f		       00		      .byte.b	0
    534  fa10		       00		      .byte.b	0
    535  fa11		       00		      .byte.b	0
    536  fa12		       00		      .byte.b	0
    537  fa13		       00		      .byte.b	0
    538  fa14		       00		      .byte.b	0
    539  fa15		       00		      .byte.b	0
    540  fa16		       00		      .byte.b	0
    541  fa17		       00		      .byte.b	0
    542  fa18		       00		      .byte.b	0
    543  fa19		       00		      .byte.b	0
    544  fa1a		       00		      .byte.b	0
    545  fa1b		       8f		      .byte.b	143
    546  fa1c		       8f		      .byte.b	143
    547  fa1d		       8f		      .byte.b	143
    548  fa1e		       8f		      .byte.b	143
    549  fa1f		       8f		      .byte.b	143
    550  fa20		       8f		      .byte.b	143
    551  fa21		       8f		      .byte.b	143
    552  fa22		       8f		      .byte.b	143
    553  fa23		       8f		      .byte.b	143
    554  fa24		       80		      .byte.b	128
    555  fa25		       80		      .byte.b	128
    556  fa26		       80		      .byte.b	128
    557  fa27		       80		      .byte.b	128
    558  fa28		       80		      .byte.b	128
    559  fa29		       80		      .byte.b	128
    560  fa2a		       80		      .byte.b	128
    561  fa2b		       80		      .byte.b	128
    562  fa2c		       80		      .byte.b	128
    563  fa2d		       80		      .byte.b	128
    564  fa2e		       80		      .byte.b	128
    565  fa2f		       80		      .byte.b	128
    566  fa30		       80		      .byte.b	128
    567  fa31		       80		      .byte.b	128
    568  fa32		       80		      .byte.b	128
    569  fa33		       80		      .byte.b	128
    570  fa34		       80		      .byte.b	128
    571  fa35		       80		      .byte.b	128
    572  fa36		       80		      .byte.b	128
    573  fa37		       80		      .byte.b	128
    574  fa38		       80		      .byte.b	128
    575  fa39		       80		      .byte.b	128
    576  fa3a		       ff		      .byte.b	255
    577  fa3b		       ff		      .byte.b	255
    578  fa3c		       ff		      .byte.b	255
    579  fa3d		       ff		      .byte.b	255
    580  fa3e		       00		      .byte.b	0
    581  fa3f		       00		      .byte.b	0
    582  fa40							;end
    583  fa40
------- FILE PacMan.asm
------- FILE GameOverMessage.asm LEVEL 2 PASS 2
      0  fa40					      include	"GameOverMessage.asm"
      1  fa40				   GameOverMessage
      2  fa40
      3  fa40				   GameOverMessage_STRIP_0
      4  fa40		       00		      .byte.b	0
      5  fa41		       00		      .byte.b	0
      6  fa42		       00		      .byte.b	0
      7  fa43		       00		      .byte.b	0
      8  fa44		       c0		      .byte.b	192
      9  fa45		       c0		      .byte.b	192
     10  fa46		       c0		      .byte.b	192
     11  fa47		       c0		      .byte.b	192
     12  fa48		       40		      .byte.b	64
     13  fa49		       40		      .byte.b	64
     14  fa4a		       40		      .byte.b	64
     15  fa4b		       40		      .byte.b	64
     16  fa4c		       40		      .byte.b	64
     17  fa4d		       40		      .byte.b	64
     18  fa4e		       40		      .byte.b	64
     19  fa4f		       40		      .byte.b	64
     20  fa50		       40		      .byte.b	64
     21  fa51		       40		      .byte.b	64
     22  fa52		       40		      .byte.b	64
     23  fa53		       40		      .byte.b	64
     24  fa54		       c0		      .byte.b	192
     25  fa55		       c0		      .byte.b	192
     26  fa56		       c0		      .byte.b	192
     27  fa57		       c0		      .byte.b	192
     28  fa58		       00		      .byte.b	0
     29  fa59		       00		      .byte.b	0
     30  fa5a		       00		      .byte.b	0
     31  fa5b		       e0		      .byte.b	224
     32  fa5c		       e0		      .byte.b	224
     33  fa5d		       e0		      .byte.b	224
     34  fa5e		       20		      .byte.b	32
     35  fa5f		       20		      .byte.b	32
     36  fa60		       20		      .byte.b	32
     37  fa61		       20		      .byte.b	32
     38  fa62		       a0		      .byte.b	160
     39  fa63		       a0		      .byte.b	160
     40  fa64		       a0		      .byte.b	160
     41  fa65		       a0		      .byte.b	160
     42  fa66		       20		      .byte.b	32
     43  fa67		       20		      .byte.b	32
     44  fa68		       20		      .byte.b	32
     45  fa69		       20		      .byte.b	32
     46  fa6a		       20		      .byte.b	32
     47  fa6b		       e0		      .byte.b	224
     48  fa6c		       e0		      .byte.b	224
     49  fa6d		       e0		      .byte.b	224
     50  fa6e		       e0		      .byte.b	224
     51  fa6f		       00		      .byte.b	0
     52  fa70		       00		      .byte.b	0
     53  fa71		       00		      .byte.b	0
     54  fa72				   GameOverMessage_STRIP_1
     55  fa72		       00		      .byte.b	0
     56  fa73		       00		      .byte.b	0
     57  fa74		       00		      .byte.b	0
     58  fa75		       00		      .byte.b	0
     59  fa76		       93		      .byte.b	147
     60  fa77		       93		      .byte.b	147
     61  fa78		       93		      .byte.b	147
     62  fa79		       ba		      .byte.b	186
     63  fa7a		       ba		      .byte.b	186
     64  fa7b		       ba		      .byte.b	186
     65  fa7c		       ba		      .byte.b	186
     66  fa7d		       ba		      .byte.b	186
     67  fa7e		       bb		      .byte.b	187
     68  fa7f		       ab		      .byte.b	171
     69  fa80		       ab		      .byte.b	171
     70  fa81		       aa		      .byte.b	170
     71  fa82		       aa		      .byte.b	170
     72  fa83		       aa		      .byte.b	170
     73  fa84		       aa		      .byte.b	170
     74  fa85		       aa		      .byte.b	170
     75  fa86		       ab		      .byte.b	171
     76  fa87		       ab		      .byte.b	171
     77  fa88		       ab		      .byte.b	171
     78  fa89		       ab		      .byte.b	171
     79  fa8a		       00		      .byte.b	0
     80  fa8b		       00		      .byte.b	0
     81  fa8c		       00		      .byte.b	0
     82  fa8d		       aa		      .byte.b	170
     83  fa8e		       aa		      .byte.b	170
     84  fa8f		       aa		      .byte.b	170
     85  fa90		       aa		      .byte.b	170
     86  fa91		       aa		      .byte.b	170
     87  fa92		       aa		      .byte.b	170
     88  fa93		       aa		      .byte.b	170
     89  fa94		       ba		      .byte.b	186
     90  fa95		       ba		      .byte.b	186
     91  fa96		       ba		      .byte.b	186
     92  fa97		       ba		      .byte.b	186
     93  fa98		       2a		      .byte.b	42
     94  fa99		       2a		      .byte.b	42
     95  fa9a		       2a		      .byte.b	42
     96  fa9b		       2a		      .byte.b	42
     97  fa9c		       2a		      .byte.b	42
     98  fa9d		       bb		      .byte.b	187
     99  fa9e		       bb		      .byte.b	187
    100  fa9f		       bb		      .byte.b	187
    101  faa0		       bb		      .byte.b	187
    102  faa1		       00		      .byte.b	0
    103  faa2		       00		      .byte.b	0
    104  faa3		       00		      .byte.b	0
    105  faa4				   GameOverMessage_STRIP_2
    106  faa4		       00		      .byte.b	0
    107  faa5		       00		      .byte.b	0
    108  faa6		       00		      .byte.b	0
    109  faa7		       00		      .byte.b	0
    110  faa8		       15		      .byte.b	21
    111  faa9		       15		      .byte.b	21
    112  faaa		       15		      .byte.b	21
    113  faab		       14		      .byte.b	20
    114  faac		       14		      .byte.b	20
    115  faad		       14		      .byte.b	20
    116  faae		       0c		      .byte.b	12
    117  faaf		       0c		      .byte.b	12
    118  fab0		       0c		      .byte.b	12
    119  fab1		       0c		      .byte.b	12
    120  fab2		       1c		      .byte.b	28
    121  fab3		       14		      .byte.b	20
    122  fab4		       14		      .byte.b	20
    123  fab5		       14		      .byte.b	20
    124  fab6		       14		      .byte.b	20
    125  fab7		       14		      .byte.b	20
    126  fab8		       1d		      .byte.b	29
    127  fab9		       1d		      .byte.b	29
    128  faba		       1d		      .byte.b	29
    129  fabb		       1d		      .byte.b	29
    130  fabc		       00		      .byte.b	0
    131  fabd		       00		      .byte.b	0
    132  fabe		       00		      .byte.b	0
    133  fabf		       74		      .byte.b	116
    134  fac0		       74		      .byte.b	116
    135  fac1		       74		      .byte.b	116
    136  fac2		       14		      .byte.b	20
    137  fac3		       14		      .byte.b	20
    138  fac4		       14		      .byte.b	20
    139  fac5		       14		      .byte.b	20
    140  fac6		       14		      .byte.b	20
    141  fac7		       35		      .byte.b	53
    142  fac8		       35		      .byte.b	53
    143  fac9		       35		      .byte.b	53
    144  faca		       15		      .byte.b	21
    145  facb		       15		      .byte.b	21
    146  facc		       15		      .byte.b	21
    147  facd		       15		      .byte.b	21
    148  face		       15		      .byte.b	21
    149  facf		       77		      .byte.b	119
    150  fad0		       77		      .byte.b	119
    151  fad1		       77		      .byte.b	119
    152  fad2		       77		      .byte.b	119
    153  fad3		       00		      .byte.b	0
    154  fad4		       00		      .byte.b	0
    155  fad5		       00		      .byte.b	0
    156  fad6							;end
    157  fad6
------- FILE PacMan.asm
   1830  fad6
   1831  fad6							;===============================================================================
   1832  fad6							; free space check before page boundry
   1833  fad6							;===============================================================================
   1834  fad6
 End of MainBoard.asm is:  $fad6
   1835  fad6					      echo	"End of MainBoard.asm is: ", *
   1836  fb00		       00 00 00 00*	      align	256
   1837  fb00
   1838  fb00							;==================================================================================
   1839  fb00							; Bottom Data
   1840  fb00							;==================================================================================
   1841  fb00
   1842  fb00				   BottomData
   1843  fb00
   1844  fb00							; 0
   1845  fb00		       00		      .byte.b	%00000000
   1846  fb01		       7e		      .byte.b	%01111110
   1847  fb02		       7e		      .byte.b	%01111110
   1848  fb03		       e7		      .byte.b	%11100111
   1849  fb04		       e7		      .byte.b	%11100111
   1850  fb05		       c3		      .byte.b	%11000011
   1851  fb06		       c3		      .byte.b	%11000011
   1852  fb07		       c3		      .byte.b	%11000011
   1853  fb08		       c3		      .byte.b	%11000011
   1854  fb09		       c3		      .byte.b	%11000011
   1855  fb0a		       e7		      .byte.b	%11100111
   1856  fb0b		       e7		      .byte.b	%11100111
   1857  fb0c		       7e		      .byte.b	%01111110
   1858  fb0d		       7e		      .byte.b	%01111110
   1859  fb0e
   1860  fb0e							; 1
   1861  fb0e		       00		      .byte.b	%00000000
   1862  fb0f		       ff		      .byte.b	%11111111
   1863  fb10		       ff		      .byte.b	%11111111
   1864  fb11		       1c		      .byte.b	%00011100
   1865  fb12		       1c		      .byte.b	%00011100
   1866  fb13		       1c		      .byte.b	%00011100
   1867  fb14		       1c		      .byte.b	%00011100
   1868  fb15		       1c		      .byte.b	%00011100
   1869  fb16		       1c		      .byte.b	%00011100
   1870  fb17		       1c		      .byte.b	%00011100
   1871  fb18		       fc		      .byte.b	%11111100
   1872  fb19		       7c		      .byte.b	%01111100
   1873  fb1a		       3c		      .byte.b	%00111100
   1874  fb1b		       1c		      .byte.b	%00011100
   1875  fb1c
   1876  fb1c							; 2
   1877  fb1c		       00		      .byte.b	%00000000
   1878  fb1d		       ff		      .byte.b	%11111111
   1879  fb1e		       ff		      .byte.b	%11111111
   1880  fb1f		       e0		      .byte.b	%11100000
   1881  fb20		       e0		      .byte.b	%11100000
   1882  fb21		       38		      .byte.b	%00111000
   1883  fb22		       0e		      .byte.b	%00001110
   1884  fb23		       07		      .byte.b	%00000111
   1885  fb24		       03		      .byte.b	%00000011
   1886  fb25		       c3		      .byte.b	%11000011
   1887  fb26		       c3		      .byte.b	%11000011
   1888  fb27		       e7		      .byte.b	%11100111
   1889  fb28		       7e		      .byte.b	%01111110
   1890  fb29		       3c		      .byte.b	%00111100
   1891  fb2a
   1892  fb2a							; 3
   1893  fb2a		       00		      .byte.b	%00000000
   1894  fb2b		       3c		      .byte.b	%00111100
   1895  fb2c		       7e		      .byte.b	%01111110
   1896  fb2d		       ef		      .byte.b	%11101111
   1897  fb2e		       c7		      .byte.b	%11000111
   1898  fb2f		       07		      .byte.b	%00000111
   1899  fb30		       0e		      .byte.b	%00001110
   1900  fb31		       1c		      .byte.b	%00011100
   1901  fb32		       0e		      .byte.b	%00001110
   1902  fb33		       07		      .byte.b	%00000111
   1903  fb34		       c7		      .byte.b	%11000111
   1904  fb35		       ef		      .byte.b	%11101111
   1905  fb36		       7e		      .byte.b	%01111110
   1906  fb37		       3c		      .byte.b	%00111100
   1907  fb38
   1908  fb38							; 4
   1909  fb38		       00		      .byte.b	%00000000
   1910  fb39		       06		      .byte.b	%00000110
   1911  fb3a		       06		      .byte.b	%00000110
   1912  fb3b		       ff		      .byte.b	%11111111
   1913  fb3c		       ff		      .byte.b	%11111111
   1914  fb3d		       c6		      .byte.b	%11000110
   1915  fb3e		       c6		      .byte.b	%11000110
   1916  fb3f		       66		      .byte.b	%01100110
   1917  fb40		       66		      .byte.b	%01100110
   1918  fb41		       36		      .byte.b	%00110110
   1919  fb42		       36		      .byte.b	%00110110
   1920  fb43		       1e		      .byte.b	%00011110
   1921  fb44		       0e		      .byte.b	%00001110
   1922  fb45		       0e		      .byte.b	%00001110
   1923  fb46
   1924  fb46							; 5
   1925  fb46		       00		      .byte.b	%00000000
   1926  fb47		       fc		      .byte.b	%11111100
   1927  fb48		       fe		      .byte.b	%11111110
   1928  fb49		       0f		      .byte.b	%00001111
   1929  fb4a		       07		      .byte.b	%00000111
   1930  fb4b		       07		      .byte.b	%00000111
   1931  fb4c		       0f		      .byte.b	%00001111
   1932  fb4d		       fe		      .byte.b	%11111110
   1933  fb4e		       fc		      .byte.b	%11111100
   1934  fb4f		       e0		      .byte.b	%11100000
   1935  fb50		       e0		      .byte.b	%11100000
   1936  fb51		       e0		      .byte.b	%11100000
   1937  fb52		       ff		      .byte.b	%11111111
   1938  fb53		       ff		      .byte.b	%11111111
   1939  fb54
   1940  fb54							; 6
   1941  fb54		       00		      .byte.b	%00000000
   1942  fb55		       3c		      .byte.b	%00111100
   1943  fb56		       7e		      .byte.b	%01111110
   1944  fb57		       e7		      .byte.b	%11100111
   1945  fb58		       c3		      .byte.b	%11000011
   1946  fb59		       c3		      .byte.b	%11000011
   1947  fb5a		       e7		      .byte.b	%11100111
   1948  fb5b		       fe		      .byte.b	%11111110
   1949  fb5c		       fc		      .byte.b	%11111100
   1950  fb5d		       c0		      .byte.b	%11000000
   1951  fb5e		       c3		      .byte.b	%11000011
   1952  fb5f		       e7		      .byte.b	%11100111
   1953  fb60		       ff		      .byte.b	%11111111
   1954  fb61		       7e		      .byte.b	%01111110
   1955  fb62
   1956  fb62							; 7
   1957  fb62		       00		      .byte.b	%00000000
   1958  fb63		       18		      .byte.b	%00011000
   1959  fb64		       18		      .byte.b	%00011000
   1960  fb65		       18		      .byte.b	%00011000
   1961  fb66		       18		      .byte.b	%00011000
   1962  fb67		       18		      .byte.b	%00011000
   1963  fb68		       0c		      .byte.b	%00001100
   1964  fb69		       0c		      .byte.b	%00001100
   1965  fb6a		       0c		      .byte.b	%00001100
   1966  fb6b		       c6		      .byte.b	%11000110
   1967  fb6c		       c7		      .byte.b	%11000111
   1968  fb6d		       ff		      .byte.b	%11111111
   1969  fb6e		       ff		      .byte.b	%11111111
   1970  fb6f		       ff		      .byte.b	%11111111
   1971  fb70
   1972  fb70							; 8
   1973  fb70		       00		      .byte.b	%00000000
   1974  fb71		       3c		      .byte.b	%00111100
   1975  fb72		       7e		      .byte.b	%01111110
   1976  fb73		       e7		      .byte.b	%11100111
   1977  fb74		       c3		      .byte.b	%11000011
   1978  fb75		       c3		      .byte.b	%11000011
   1979  fb76		       e7		      .byte.b	%11100111
   1980  fb77		       7e		      .byte.b	%01111110
   1981  fb78		       3c		      .byte.b	%00111100
   1982  fb79		       66		      .byte.b	%01100110
   1983  fb7a		       c3		      .byte.b	%11000011
   1984  fb7b		       e7		      .byte.b	%11100111
   1985  fb7c		       7e		      .byte.b	%01111110
   1986  fb7d		       3c		      .byte.b	%00111100
   1987  fb7e
   1988  fb7e							; 9
   1989  fb7e		       00		      .byte.b	%00000000
   1990  fb7f		       3c		      .byte.b	%00111100
   1991  fb80		       7e		      .byte.b	%01111110
   1992  fb81		       e7		      .byte.b	%11100111
   1993  fb82		       c3		      .byte.b	%11000011
   1994  fb83		       03		      .byte.b	%00000011
   1995  fb84		       3f		      .byte.b	%00111111
   1996  fb85		       7f		      .byte.b	%01111111
   1997  fb86		       e7		      .byte.b	%11100111
   1998  fb87		       c3		      .byte.b	%11000011
   1999  fb88		       c3		      .byte.b	%11000011
   2000  fb89		       e7		      .byte.b	%11100111
   2001  fb8a		       7e		      .byte.b	%01111110
   2002  fb8b		       3c		      .byte.b	%00111100
   2003  fb8c
   2004  fb8c							;==================================================================================
   2005  fb8c							; Interrupt Routines
   2006  fb8c							;==================================================================================
   2007  fb8c
   2008  10000 ????				       SEG	Interrupt
   2009  fffa					      ORG	$FFFA
   2010  fffa
   2011  fffa				   InterruptVectors
   2012  fffa		       00 f0		      .word.w	Reset
   2013  fffc		       00 f0		      .word.w	Reset
   2014  fffe		       00 f0		      .word.w	Reset
   2015  10000
   2016  10000					       END
