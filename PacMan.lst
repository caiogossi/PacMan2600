------- FILE PacMan.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE PacMan.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE PacMan.asm
      4  0000 ????
      5  0000 ????						;==================================================================================
      6  0000 ????						; Program Definitions
      7  0000 ????						;==================================================================================
      8  0000 ????
      9  0000 ????	       00 12	   SPRITE_HEIGHT =	18
     10  0000 ????	       00 05	   TIMER_LIMIT1 =	5
     11  0000 ????	       00 14	   TIMER_LIMIT2 =	20
     12  0000 ????	       00 08	   TIMER_LIMIT3 =	8
     13  0000 ????
     14  0000 ????						;==================================================================================
     15  0000 ????						; Program Variables
     16  0000 ????						;==================================================================================
     17  0000 ????
     18 U00b4 ????				      SEG.U	Variables
     19 U0080					      ORG	$80
     20 U0080
     21 U0080		       00	   PS_temp    ds	1
     22 U0081
     23 U0081		       00 00	   SpriteAddrPtr ds	2
     24 U0083		       00	   SpriteYPos ds	1
     25 U0084		       00	   LastSpriteXPos ds	1
     26 U0085		       00	   LastSpriteYPos ds	1
     27 U0086		       00	   PlayerVelocityMask ds	1
     28 U0087
     29 U0087		       00 00	   SpriteGhostAddrPtr ds	2
     30 U0089
     31 U0089		       00	   SpriteXPos ds	1
     32 U008a		       00	   GhostSpriteXPos ds	1
     33 U008b		       00	   CurWaferXPos ds	1
     34 U008c		       00	   CurM2XPos  ds	1
     35 U008d		       00	   CurBallXPos ds	1
     36 U008e
     37 U008e		       00	   GhostSpriteYPos ds	1
     38 U008f		       00	   GhostVelocityMask ds	1
     39 U0090
     40 U0090		       00	   BallXPosIndex ds	1
     41 U0091
     42 U0091		       00	   WaferXPosIndex ds	1
     43 U0092		       00 00 00 00*WaferArray ds	6
     44 U0098		       00	   PickedUpWaferBuffer ds	1
     45 U0099		       00 00 00 00*WaferDrawingArray ds	7
     46 U00a0
     47 U00a0		       00	   SpriteAnimationIndex ds	1
     48 U00a1		       00	   IsFrameGoingUp ds	1
     49 U00a2
     50 U00a2		       00	   ScoreHundreds ds	1
     51 U00a3		       00	   ScoreTens  ds	1
     52 U00a4		       00	   ScoreOnes  ds	1
     53 U00a5
     54 U00a5		       00	   HundredsOffset ds	1
     55 U00a6		       00	   TensOffset ds	1
     56 U00a7		       00	   OnesOffset ds	1
     57 U00a8
     58 U00a8		       00	   ScoreDisplayBufferHundreds ds	1
     59 U00a9		       00	   ScoreDisplayBufferTens ds	1
     60 U00aa		       00	   ScoreDisplayBufferOnes ds	1
     61 U00ab
     62 U00ab		       00	   TimerCounter5 ds	1
     63 U00ac		       00	   TimerCounter10 ds	1
     64 U00ad		       00	   TimerCounter20 ds	1
     65 U00ae
     66 U00ae		       00	   PlayerReflectedBuffer ds	1
     67 U00af		       00	   GhostReflectedBuffer ds	1
     68 U00b0
     69 U00b0		       00	   LifeCount  ds	1
     70 U00b1		       00	   WaferCount ds	1
     71 U00b2
     72 U00b2		       00	   WasButtonPressed ds	1
     73 U00b3
     74 U00b3							; Game State - 0 = PlayingGame; 1 = PlayingDeathAnimation; 2 = GamePaused;
     75 U00b3							; 3 = GameOver; 4 = PlayingWinningScreen
     76 U00b3		       00	   GameState  ds	1
     77 U00b4
     78 U00b4							;==================================================================================
     79 U00b4							; Program Initialization
     80 U00b4							;==================================================================================
     81 U00b4
     82  fc8c ????				      SEG	Executable
     83  f000					      ORG	$F000
     84  f000
     85  f000				   Reset
     86  f000				   ClearMemory
     87  f000		       a2 00		      LDX	#0
     88  f002		       9a		      TXS
     89  f003		       48		      PHA
     90  f004		       8a		      TXA
     91  f005
     92  f005				   ClearMemoryLoop
     93  f005		       48		      PHA
     94  f006		       ca		      DEX
     95  f007		       d0 fc		      BNE	ClearMemoryLoop
     96  f009
     97  f009		       20 4d f1 	      JSR	InitVariables
     98  f00c
     99  f00c							;==================================================================================
    100  f00c							; Main Loop
    101  f00c							;==================================================================================
    102  f00c
    103  f00c				   Main
    104  f00c		       20 1b f0 	      JSR	HandleVSync
    105  f00f		       20 2a f0 	      JSR	HandleVBlank
    106  f012		       20 4e f0 	      JSR	MainKernel
    107  f015		       20 d2 f0 	      JSR	Overscan
    108  f018		       4c 0c f0 	      JMP	Main
    109  f01b
    110  f01b							;==================================================================================
    111  f01b							; HandleVSync
    112  f01b							;==================================================================================
    113  f01b
    114  f01b				   HandleVSync
    115  f01b		       a9 00		      LDA	#0
    116  f01d		       85 01		      STA	VBLANK
    117  f01f		       a9 02		      LDA	#2
    118  f021		       85 00		      STA	VSYNC
    119  f023
    120  f023				   VSyncLoop
    121  f023		       85 02		      STA	WSYNC
    122  f025		       85 02		      STA	WSYNC
    123  f027		       85 02		      STA	WSYNC
    124  f029
    125  f029		       60		      RTS
    126  f02a
    127  f02a							;==================================================================================
    128  f02a							; HandleVBlank
    129  f02a							; Handle Part of Game Logic
    130  f02a							;==================================================================================
    131  f02a
    132  f02a				   HandleVBlank
    133  f02a
    134  f02a							; Initialize TIM64T
    135  f02a		       a9 2a		      LDA	#42
    136  f02c		       8d 96 02 	      STA	TIM64T
    137  f02f
    138  f02f							; Prepare Registers for VBLANK
    139  f02f		       a9 00		      LDA	#0
    140  f031		       85 00		      STA	VSYNC
    141  f033		       a9 42		      LDA	#%01000010
    142  f035		       85 01		      STA	VBLANK
    143  f037
    144  f037							; Processing Tasks
    145  f037		       20 e5 f4 	      JSR	GetControllerInputsDirectional
    146  f03a		       20 29 f5 	      JSR	GetControllerInputsButton
    147  f03d		       20 53 f5 	      JSR	GetController2InputsDEBUG
    148  f040		       20 06 f2 	      JSR	UpdateEntities
    149  f043		       20 e7 f1 	      JSR	PrepareWaferDrawingArray
    150  f046
    151  f046				   VBlankLoop
    152  f046		       ad 84 02 	      LDA	INTIM
    153  f049		       d0 fb		      BNE	VBlankLoop
    154  f04b
    155  f04b		       85 02		      STA	WSYNC
    156  f04d		       60		      RTS
    157  f04e
    158  f04e							;==================================================================================
    159  f04e							; MainKernel - Main Routine to Display Game
    160  f04e							;==================================================================================
    161  f04e
    162  f04e				   MainKernel
    163  f04e		       a9 00		      LDA	#0
    164  f050		       85 01		      STA	VBLANK
    165  f052
    166  f052							; Position Player, Ghost, Wafer and Ball According to XPos
    167  f052		       20 ad f1 	      JSR	PositionSpriteX
    168  f055
    169  f055		       a2 bf		      LDX	#191
    170  f057		       85 02		      STA	WSYNC
    171  f059
    172  f059				   MainFrameLoop
    173  f059							; First Line
    174  f059							; Load First Playfield
    175  f059		       bd 00 f9 	      LDA	MainBoard_STRIP_0,x	; 4  4   0
    176  f05c		       85 0d		      STA	PF0	; 3  7   12
    177  f05e
    178  f05e		       bd c0 f9 	      LDA	MainBoard_STRIP_1,x	; 4  11   33
    179  f061		       85 0e		      STA	PF1	; 3  14   42
    180  f063
    181  f063		       bd 80 fa 	      LDA	MainBoard_STRIP_2,x	; 4  18
    182  f066		       85 0f		      STA	PF2	; 3  21
    183  f068
    184  f068							; Check if line has wafer
    185  f068		       bd 6d f6 	      LDA	CheckLineBytes,x
    186  f06b		       f0 0f		      BEQ	DoNotDrawWafer
    187  f06d		       30 0d		      BMI	DoNotDrawWafer
    188  f06f
    189  f06f							; Check if wafer was picked up
    190  f06f		       a8		      TAY
    191  f070		       b9 98 00 	      LDA	WaferDrawingArray-1,y
    192  f073		       d0 07		      BNE	DoNotDrawWafer
    193  f075
    194  f075				   DoDrawWafer
    195  f075		       a9 02		      LDA	#%10
    196  f077		       85 1d		      STA	ENAM0
    197  f079		       4c 80 f0 	      JMP	AfterDrawingWafer
    198  f07c
    199  f07c				   DoNotDrawWafer
    200  f07c		       a9 00		      LDA	#0
    201  f07e		       85 1d		      STA	ENAM0
    202  f080
    203  f080				   AfterDrawingWafer
    204  f080							; Check Vertical Sprite (P0) Drawing
    205  f080		       8a		      TXA		; 2
    206  f081		       38		      SEC		; 2
    207  f082		       e5 83		      SBC	SpriteYPos	; 3
    208  f084		       69 12		      ADC	#SPRITE_HEIGHT	; 2
    209  f086		       90 05		      BCC	SkipDrawingP0	; 3
    210  f088
    211  f088							; Load P0 Sprite Data
    212  f088		       a8		      TAY		; 3
    213  f089		       b1 81		      LDA	(SpriteAddrPtr),y	; 5
    214  f08b		       85 1b		      STA	GRP0	; 3
    215  f08d
    216  f08d				   SkipDrawingP0
    217  f08d							; Decrease X and Go To Next Line
    218  f08d		       85 02		      STA	WSYNC	; 3
    219  f08f		       ca		      DEX		; 2
    220  f090		       f0 33		      BEQ	MainFrameLoopEnd	; 2 
    221  f092
    222  f092							; Second Line
    223  f092
    224  f092							; Load First Playfield
    225  f092		       bd 00 f9 	      LDA	MainBoard_STRIP_0,x	; 4
    226  f095		       85 0d		      STA	PF0	; 3
    227  f097
    228  f097		       bd c0 f9 	      LDA	MainBoard_STRIP_1,x	; 4
    229  f09a		       85 0e		      STA	PF1	; 3
    230  f09c
    231  f09c		       bd 80 fa 	      LDA	MainBoard_STRIP_2,x	; 4
    232  f09f		       85 0f		      STA	PF2	; 3
    233  f0a1
    234  f0a1							; Check if ball is to be drawn
    235  f0a1		       bd 6d f6 	      LDA	CheckLineBytes,x
    236  f0a4		       f0 09		      BEQ	DoNotDrawBall
    237  f0a6		       10 07		      BPL	DoNotDrawBall
    238  f0a8
    239  f0a8				   DoDrawBall
    240  f0a8		       a9 02		      LDA	#%10
    241  f0aa		       85 1f		      STA	ENABL
    242  f0ac		       4c b3 f0 	      JMP	AfterDrawingBall
    243  f0af
    244  f0af				   DoNotDrawBall
    245  f0af		       a9 00		      LDA	#0
    246  f0b1		       85 1f		      STA	ENABL
    247  f0b3
    248  f0b3				   AfterDrawingBall
    249  f0b3							; Check Ghost Vertical Drawing
    250  f0b3		       8a		      TXA		; 2
    251  f0b4		       38		      SEC		; 2
    252  f0b5		       e5 8e		      SBC	GhostSpriteYPos	; 3
    253  f0b7		       69 12		      ADC	#SPRITE_HEIGHT	; 2
    254  f0b9		       90 05		      BCC	SkipGhostDrawing	; 3
    255  f0bb
    256  f0bb							; Load Ghost Sprite Data
    257  f0bb		       a8		      TAY		; 3
    258  f0bc		       b1 87		      LDA	(SpriteGhostAddrPtr),y	; 5
    259  f0be		       85 1c		      STA	GRP1	; 3
    260  f0c0
    261  f0c0				   SkipGhostDrawing
    262  f0c0							; Decrease X and Go To Next Line
    263  f0c0		       85 02		      STA	WSYNC	; 3
    264  f0c2		       ca		      DEX		; 2
    265  f0c3		       d0 94		      BNE	MainFrameLoop	; 2
    266  f0c5
    267  f0c5				   MainFrameLoopEnd
    268  f0c5							; Clearing Playfield Registers
    269  f0c5		       a9 00		      LDA	#0
    270  f0c7		       85 0d		      STA	PF0
    271  f0c9		       85 0e		      STA	PF1
    272  f0cb		       85 0f		      STA	PF2
    273  f0cd
    274  f0cd		       85 1b		      STA	GRP0
    275  f0cf		       85 1c		      STA	GRP1
    276  f0d1
    277  f0d1		       60		      RTS
    278  f0d2
    279  f0d2							;==================================================================================
    280  f0d2							; Overscan
    281  f0d2							;==================================================================================
    282  f0d2
    283  f0d2				   Overscan
    284  f0d2
    285  f0d2							; Prepare Registers for Overscan Drawing
    286  f0d2		       a9 00		      LDA	#0
    287  f0d4		       85 0b		      STA	REFP0
    288  f0d6		       85 0c		      STA	REFP1
    289  f0d8
    290  f0d8		       a9 0e		      LDA	#$0E
    291  f0da		       85 07		      STA	COLUP1
    292  f0dc
    293  f0dc		       a9 03		      LDA	#%011
    294  f0de
    295  f0de							; Triplicate P1 (Score)
    296  f0de		       85 05		      STA	NUSIZ1
    297  f0e0
    298  f0e0							; Select Ammount of Icons According to LifeCount
    299  f0e0		       a4 b0		      LDY	LifeCount
    300  f0e2
    301  f0e2							; Select position of Score
    302  f0e2		       85 11		      STA	RESP1
    303  f0e4
    304  f0e4		       b9 69 f6 	      LDA	LivesNUSIZ0LookUp,y
    305  f0e7		       85 04		      STA	NUSIZ0
    306  f0e9
    307  f0e9							; Calculate Hundreds Offset
    308  f0e9		       a6 a2		      LDX	ScoreHundreds
    309  f0eb		       bd 5e f6 	      LDA	MultBy14,x
    310  f0ee		       85 a5		      STA	HundredsOffset
    311  f0f0
    312  f0f0							; Calculate Tens Offset
    313  f0f0		       a6 a3		      LDX	ScoreTens
    314  f0f2		       bd 5e f6 	      LDA	MultBy14,x
    315  f0f5		       85 a6		      STA	TensOffset
    316  f0f7
    317  f0f7							; Calculate Ones Offset
    318  f0f7		       a6 a4		      LDX	ScoreOnes
    319  f0f9		       bd 5e f6 	      LDA	MultBy14,x
    320  f0fc		       85 a7		      STA	OnesOffset
    321  f0fe
    322  f0fe		       85 02		      STA	WSYNC
    323  f100
    324  f100							; Select position of Lives
    325  f100		       85 10		      STA	RESP0
    326  f102
    327  f102		       a2 1d		      LDX	#29
    328  f104				   OverscanLoop
    329  f104
    330  f104							; Is it time to draw?
    331  f104		       e0 10		      CPX	#16
    332  f106		       90 27		      BCC	SmallerThan16
    333  f108
    334  f108				   BiggerThan16
    335  f108							; Time to draw
    336  f108
    337  f108							; Draw Lives
    338  f108		       bd d2 f8 	      LDA	SpriteLifeData,x
    339  f10b		       85 1b		      STA	GRP0
    340  f10d
    341  f10d							; Prepare draw bits for hundreds
    342  f10d		       18		      CLC
    343  f10e		       8a		      TXA
    344  f10f		       65 a5		      ADC	HundredsOffset
    345  f111		       a8		      TAY
    346  f112		       b9 00 fc 	      LDA	BottomData,y
    347  f115		       85 1c		      STA	GRP1
    348  f117
    349  f117							; Prepare draw bits for ones
    350  f117		       18		      CLC
    351  f118		       8a		      TXA
    352  f119		       65 a7		      ADC	OnesOffset
    353  f11b		       a8		      TAY
    354  f11c		       b9 00 fc 	      LDA	BottomData,y
    355  f11f		       85 aa		      STA	ScoreDisplayBufferOnes
    356  f121
    357  f121							; Prepare draw bits for tens
    358  f121		       18		      CLC
    359  f122		       8a		      TXA
    360  f123		       65 a6		      ADC	TensOffset
    361  f125		       a8		      TAY
    362  f126		       b9 00 fc 	      LDA	BottomData,y
    363  f129
    364  f129							; Draw Tens
    365  f129		       85 1c		      STA	GRP1
    366  f12b
    367  f12b							; Draw Ones
    368  f12b		       a5 aa		      LDA	ScoreDisplayBufferOnes
    369  f12d		       85 1c		      STA	GRP1
    370  f12f
    371  f12f				   SmallerThan16
    372  f12f		       ca		      DEX
    373  f130		       85 02		      STA	WSYNC
    374  f132		       d0 d0		      BNE	OverscanLoop
    375  f134
    376  f134							; Clear Player Registers
    377  f134		       a9 00		      LDA	#0
    378  f136		       85 1b		      STA	GRP0
    379  f138		       85 1c		      STA	GRP1
    380  f13a
    381  f13a							; Return NUSIZ0 and NUSIZ1
    382  f13a		       a9 20		      LDA	#%100000
    383  f13c		       85 04		      STA	NUSIZ0
    384  f13e		       85 05		      STA	NUSIZ1
    385  f140
    386  f140							; Return P0 Register Reflection Value
    387  f140		       a5 ae		      LDA	PlayerReflectedBuffer
    388  f142		       85 0b		      STA	REFP0
    389  f144
    390  f144							; Return P1 Register Reflection Value
    391  f144		       a5 af		      LDA	GhostReflectedBuffer
    392  f146		       85 0c		      STA	REFP1
    393  f148
    394  f148							; Return P1 color
    395  f148		       a9 58		      LDA	#$58
    396  f14a		       85 07		      STA	COLUP1
    397  f14c
    398  f14c		       60		      RTS
    399  f14d
    400  f14d							;==================================================================================
    401  f14d							; InitVariables
    402  f14d							;==================================================================================
    403  f14d
    404  f14d				   InitVariables
    405  f14d							; Initialize BG Color and PF Color
    406  f14d		       a9 00		      LDA	#$00
    407  f14f		       85 09		      STA	COLUBK
    408  f151		       a9 72		      LDA	#$72
    409  f153		       85 08		      STA	COLUPF
    410  f155
    411  f155							; Initialize Player Color and Pattern
    412  f155		       a9 1e		      LDA	#$1E
    413  f157		       85 06		      STA	COLUP0
    414  f159		       a9 58		      LDA	#$58
    415  f15b		       85 07		      STA	COLUP1
    416  f15d
    417  f15d							; Initialize CTRLPF
    418  f15d		       a9 21		      LDA	#%100001
    419  f15f		       85 0a		      STA	CTRLPF
    420  f161
    421  f161		       a9 02		      LDA	#%10
    422  f163		       85 1f		      STA	ENABL
    423  f165
    424  f165							; Initialize Missile Graphics
    425  f165		       a9 20		      LDA	#%100000
    426  f167		       85 04		      STA	NUSIZ0
    427  f169
    428  f169							; Initialize Variables
    429  f169
    430  f169							; SpriteXPos, LastXPos, YPos and LastYPos
    431  f169							;LDA #77
    432  f169		       a9 4d		      LDA	#77
    433  f16b		       85 89		      STA	SpriteXPos
    434  f16d		       85 84		      STA	LastSpriteXPos
    435  f16f
    436  f16f							;LDA #107
    437  f16f		       a9 96		      LDA	#150
    438  f171		       85 83		      STA	SpriteYPos
    439  f173		       85 85		      STA	LastSpriteYPos
    440  f175
    441  f175							; SpriteGhostXPos and YPos
    442  f175							;LDA #77
    443  f175		       a9 4d		      LDA	#77
    444  f177		       85 8a		      STA	GhostSpriteXPos
    445  f179
    446  f179							;LDA #140
    447  f179		       a9 6b		      LDA	#107
    448  f17b		       85 8e		      STA	GhostSpriteYPos
    449  f17d
    450  f17d							; LifeCount
    451  f17d		       a9 03		      LDA	#3
    452  f17f		       85 b0		      STA	LifeCount
    453  f181
    454  f181							; Set SpriteAnimationIndex
    455  f181		       85 a0		      STA	SpriteAnimationIndex
    456  f183
    457  f183							; GameState
    458  f183		       a9 04		      LDA	#4
    459  f185		       85 b3		      STA	GameState
    460  f187
    461  f187							; TimerCounter20
    462  f187		       a9 c8		      LDA	#200
    463  f189		       85 ad		      STA	TimerCounter20
    464  f18b
    465  f18b							; ScoreHundreds
    466  f18b		       a9 ff		      LDA	#-1
    467  f18d		       85 a2		      STA	ScoreHundreds
    468  f18f
    469  f18f							; Set Controller Inputs
    470  f18f		       a9 00		      LDA	#0
    471  f191		       8d 81 02 	      STA	SWACNT
    472  f194
    473  f194							; Set P0 and P1 Delays
    474  f194		       85 25		      STA	VDELP0
    475  f196
    476  f196							; Set Wafer XPos Index
    477  f196		       85 91		      STA	WaferXPosIndex
    478  f198
    479  f198							; Ghost Velocity Mask
    480  f198		       a9 08		      LDA	#%1000
    481  f19a		       85 8f		      STA	GhostVelocityMask
    482  f19c
    483  f19c							; PacmanSpriteDataPointer
    484  f19c		       a9 00		      LDA	#<Sprite0Data
    485  f19e		       85 81		      STA	SpriteAddrPtr
    486  f1a0		       a9 f8		      LDA	#>Sprite0Data
    487  f1a2		       85 82		      STA	SpriteAddrPtr+1
    488  f1a4
    489  f1a4							; GhostSpriteDataPointer
    490  f1a4		       a9 c0		      LDA	#<SpriteGhostData
    491  f1a6		       85 87		      STA	SpriteGhostAddrPtr
    492  f1a8		       a9 f8		      LDA	#>SpriteGhostData
    493  f1aa		       85 88		      STA	SpriteGhostAddrPtr+1
    494  f1ac
    495  f1ac		       60		      RTS
    496  f1ad
    497  f1ad							;==================================================================================
    498  f1ad							; PositionSpriteX - Subroutine to position all sprites (P0,P1,M0,M1,BL)
    499  f1ad							;==================================================================================
    500  f1ad
    501  f1ad				   PositionSpriteX
    502  f1ad		       85 02		      STA	WSYNC	; 3
    503  f1af		       85 2b		      STA	HMCLR	; clear any previous movement	  ; 3
    504  f1b1
    505  f1b1		       a2 05		      LDX	#5	; sprite index 		  ; 2
    506  f1b3
    507  f1b3				   PosSP
    508  f1b3
    509  f1b3		       b5 88		      LDA	SpriteXPos-1,x	; 4
    510  f1b5		       a8		      TAY		; 2
    511  f1b6
    512  f1b6							; Divide by 16
    513  f1b6		       4a		      LSR		; 2
    514  f1b7		       4a		      LSR		; 2
    515  f1b8		       4a		      LSR		; 2
    516  f1b9		       4a		      LSR		; 2
    517  f1ba		       85 80		      STA	PS_temp	; 3
    518  f1bc
    519  f1bc		       98		      TYA		; 2
    520  f1bd		       29 0f		      AND	#15	; 2
    521  f1bf
    522  f1bf		       18		      CLC		; 2
    523  f1c0
    524  f1c0		       65 80		      ADC	PS_temp	; 3
    525  f1c2		       a4 80		      LDY	PS_temp	; 3
    526  f1c4
    527  f1c4		       c9 0f		      CMP	#15	; 2
    528  f1c6		       90 03		      BCC	NH	; 3
    529  f1c8		       e9 0f		      SBC	#15	; 2
    530  f1ca		       c8		      INY		; 2
    531  f1cb
    532  f1cb				   NH
    533  f1cb							; Use remainder for fine adjustment
    534  f1cb		       49 07		      EOR	#7	; 2
    535  f1cd		       0a		      ASL		; 2
    536  f1ce		       0a		      ASL		; 2
    537  f1cf		       0a		      ASL		; 2
    538  f1d0		       0a		      ASL		; 2
    539  f1d1
    540  f1d1		       95 1f		      STA	HMP0-1,x	; fine movement	     ; 4
    541  f1d3		       85 02		      STA	WSYNC	; 3
    542  f1d5
    543  f1d5		       20 e6 f1 	      JSR	Ret	; just a 12 cycle delay     ; 12
    544  f1d8		       24 00		      BIT	0	; 15 cycles = 3 loops :)    ; 3
    545  f1da
    546  f1da
    547  f1da				   Jiggle
    548  f1da		       88		      DEY		; 2
    549  f1db		       10 fd		      BPL	Jiggle	; 3
    550  f1dd
    551  f1dd		       95 0f		      STA	RESP0-1,x	; 4
    552  f1df
    553  f1df		       ca		      DEX		; 2
    554  f1e0		       d0 d1		      BNE	PosSP	; 3
    555  f1e2
    556  f1e2		       85 02		      STA	WSYNC	; 3
    557  f1e4		       85 2a		      STA	HMOVE	; 3
    558  f1e6
    559  f1e6				   Ret
    560  f1e6		       60		      RTS		; 6
    561  f1e7
    562  f1e7							;==================================================================================
    563  f1e7							; PrepareWaferDrawingArray - Prepare Wafer Drawing Array for MainKernel
    564  f1e7							;==================================================================================
    565  f1e7
    566  f1e7				   PrepareWaferDrawingArray
    567  f1e7
    568  f1e7							; Verify if wafer is picked up for each WaferY -> 1 = Picked up (do not draw), 0 = Not picked up (draw)
    569  f1e7		       a4 91		      LDY	WaferXPosIndex
    570  f1e9		       b9 92 00 	      LDA	WaferArray,y
    571  f1ec		       aa		      TAX
    572  f1ed
    573  f1ed		       a0 07		      LDY	#7
    574  f1ef				   PrepareWaferLoop
    575  f1ef		       8a		      TXA
    576  f1f0		       39 56 f6 	      AND	FindWaferLookUp,y
    577  f1f3		       f0 08		      BEQ	NotPickedUp
    578  f1f5
    579  f1f5				   PickedUp
    580  f1f5		       a9 01		      LDA	#1
    581  f1f7		       99 98 00 	      STA	WaferDrawingArray-1,y
    582  f1fa		       4c 02 f2 	      JMP	PrepareWaferDrawingArrayContinue
    583  f1fd
    584  f1fd				   NotPickedUp
    585  f1fd		       a9 00		      LDA	#0
    586  f1ff		       99 98 00 	      STA	WaferDrawingArray-1,y
    587  f202
    588  f202				   PrepareWaferDrawingArrayContinue
    589  f202		       88		      DEY
    590  f203		       d0 ea		      BNE	PrepareWaferLoop
    591  f205
    592  f205		       60		      RTS
    593  f206
    594  f206							;==================================================================================
    595  f206							; UpdateEntities - Update Game Logic
    596  f206							;==================================================================================
    597  f206
    598  f206				   UpdateEntities
    599  f206							; Check if Game Is Paused
    600  f206		       a5 b3		      LDA	GameState
    601  f208		       c9 02		      CMP	#2
    602  f20a		       f0 33		      BEQ	EndUpdateEntities
    603  f20c
    604  f20c							; Update Timer
    605  f20c		       20 8b f5 	      JSR	UpdateTimer
    606  f20f
    607  f20f							; Get Out End of Level (If it's the case)
    608  f20f		       20 a1 f2 	      JSR	LevelEndOut
    609  f212
    610  f212							; Apply Animation Frame
    611  f212		       20 3b f4 	      JSR	ApplyAnimationFrame
    612  f215
    613  f215							; Check if it's playing the end of the level
    614  f215		       a5 b3		      LDA	GameState
    615  f217		       c9 04		      CMP	#4
    616  f219		       f0 24		      BEQ	EndUpdateEntities
    617  f21b
    618  f21b							; Change Animation Frame
    619  f21b		       20 e9 f3 	      JSR	ChangeAnimationFrame
    620  f21e
    621  f21e							; Check Player Collision with PF
    622  f21e		       20 2f f3 	      JSR	CheckPlayerCollisionPF
    623  f221
    624  f221							; Update Sprite Pos According to Velocity Mask
    625  f221		       20 84 f3 	      JSR	UpdatePlayerPosition
    626  f224
    627  f224							; Check Player Collision with Ghosts
    628  f224		       20 16 f3 	      JSR	CheckPlayerCollisionGhosts
    629  f227
    630  f227							; Check Player Collision with Wafers
    631  f227		       20 86 f2 	      JSR	CheckWaferCollision
    632  f22a
    633  f22a							; Remove Collisions After Checks
    634  f22a		       85 2c		      STA	CXCLR
    635  f22c
    636  f22c							; Update Ghost Position
    637  f22c		       20 47 f2 	      JSR	UpdateGhostPosition
    638  f22f
    639  f22f							; Increase Score According with Picked Up Wafer Buffer
    640  f22f		       20 b9 f5 	      JSR	UpdateScore
    641  f232
    642  f232							; Update Wafer XPos Index
    643  f232		       20 04 f3 	      JSR	UpdateWaferIndex
    644  f235
    645  f235							; Update Ball XPos Index
    646  f235		       20 ee f2 	      JSR	UpdateBallIndex
    647  f238
    648  f238							; Check Game Over
    649  f238		       a5 b0		      LDA	LifeCount
    650  f23a		       f0 04		      BEQ	GoToGameOver
    651  f23c
    652  f23c							; Check End of Level
    653  f23c		       20 c2 f2 	      JSR	CheckLevelEnd
    654  f23f
    655  f23f				   EndUpdateEntities
    656  f23f		       60		      RTS
    657  f240
    658  f240				   GoToGameOver
    659  f240		       a9 03		      LDA	#3
    660  f242		       85 b3		      STA	GameState
    661  f244		       4c ea f5 	      JMP	HandleGameOver
    662  f247
    663  f247							;==================================================================================
    664  f247							; UpdateGhostPosition - Update ghost position according to GhostVelocityMask
    665  f247							;==================================================================================
    666  f247
    667  f247				   UpdateGhostPosition
    668  f247		       a6 8f		      LDX	GhostVelocityMask
    669  f249
    670  f249		       8a		      TXA
    671  f24a		       29 08		      AND	#%1000
    672  f24c		       d0 12		      BNE	GhostGoRight
    673  f24e
    674  f24e		       8a		      TXA
    675  f24f		       29 04		      AND	#%0100
    676  f251		       d0 1c		      BNE	GhostGoLeft
    677  f253
    678  f253		       8a		      TXA
    679  f254		       29 02		      AND	#%0010
    680  f256		       d0 26		      BNE	GhostGoDown
    681  f258
    682  f258		       8a		      TXA
    683  f259		       29 01		      AND	#%0001
    684  f25b		       d0 26		      BNE	GhostGoUp
    685  f25d
    686  f25d		       4c 85 f2 	      JMP	UpdateGhostPositionRet
    687  f260
    688  f260				   GhostGoRight
    689  f260		       e6 8a		      INC	GhostSpriteXPos
    690  f262
    691  f262							; Verify If Sprite is in Far Right
    692  f262		       a5 8a		      LDA	GhostSpriteXPos
    693  f264		       c9 a0		      CMP	#160
    694  f266		       90 04		      BCC	GhostNotFarRight
    695  f268
    696  f268		       a9 00		      LDA	#0
    697  f26a		       85 8a		      STA	GhostSpriteXPos
    698  f26c
    699  f26c				   GhostNotFarRight
    700  f26c		       4c 85 f2 	      JMP	UpdateGhostPositionRet
    701  f26f
    702  f26f				   GhostGoLeft
    703  f26f		       c6 89		      DEC	SpriteXPos
    704  f271
    705  f271							; Verify If Sprite is in Far Left
    706  f271		       a5 8a		      LDA	GhostSpriteXPos
    707  f273		       c9 00		      CMP	#0
    708  f275		       d0 04		      BNE	GhostNotFarLeft
    709  f277
    710  f277		       a9 a0		      LDA	#160
    711  f279		       85 8a		      STA	GhostSpriteXPos
    712  f27b
    713  f27b				   GhostNotFarLeft
    714  f27b		       4c 85 f2 	      JMP	UpdateGhostPositionRet
    715  f27e
    716  f27e				   GhostGoDown
    717  f27e		       c6 83		      DEC	SpriteYPos
    718  f280		       4c e8 f3 	      JMP	UpdatePlayerPositionRet
    719  f283
    720  f283				   GhostGoUp
    721  f283		       e6 83		      INC	SpriteYPos
    722  f285
    723  f285				   UpdateGhostPositionRet
    724  f285		       60		      RTS
    725  f286
    726  f286							;==================================================================================
    727  f286							; CheckWaferCollision - Verify player collision with wafer
    728  f286							;==================================================================================
    729  f286
    730  f286				   CheckWaferCollision
    731  f286							; Check Collision Between Player and Wafer
    732  f286		       24 00		      BIT	CXM0P
    733  f288		       50 16		      BVC	DidntGetWafer
    734  f28a
    735  f28a				   GotWafer
    736  f28a							; Routine to save wafer as picked up
    737  f28a
    738  f28a							; Y = WaferX
    739  f28a		       a4 91		      LDY	WaferXPosIndex
    740  f28c
    741  f28c							; Load WaferArray[WaferX]
    742  f28c		       b9 92 00 	      LDA	WaferArray,y
    743  f28f
    744  f28f							; Find WaferY from SpriteYPos
    745  f28f		       a4 83		      LDY	SpriteYPos
    746  f291		       be 33 f7 	      LDX	ConvertPlayerPosToWaferIndex,y
    747  f294
    748  f294							; Mark Wafer Picked Up for Frame
    749  f294		       1d 56 f6 	      ORA	FindWaferLookUp,x
    750  f297
    751  f297							; Save on WaferArray[WaferX]
    752  f297		       a4 91		      LDY	WaferXPosIndex
    753  f299		       99 92 00 	      STA	WaferArray,y
    754  f29c
    755  f29c							; Mark WaferPickedUp for UpdateScore
    756  f29c		       a9 01		      LDA	#1
    757  f29e		       85 98		      STA	PickedUpWaferBuffer
    758  f2a0
    759  f2a0				   DidntGetWafer
    760  f2a0		       60		      RTS
    761  f2a1
    762  f2a1							;==================================================================================
    763  f2a1							; LevelEndOut - Get out of level end tune
    764  f2a1							;==================================================================================
    765  f2a1
    766  f2a1				   LevelEndOut
    767  f2a1							; Verify if it's in level end
    768  f2a1		       a5 b3		      LDA	GameState
    769  f2a3		       c9 04		      CMP	#4
    770  f2a5		       d0 0d		      BNE	LevelEndOutRet
    771  f2a7
    772  f2a7							; Verify Counter
    773  f2a7		       a5 ad		      LDA	TimerCounter20
    774  f2a9		       d0 09		      BNE	LevelEndOutRet
    775  f2ab
    776  f2ab							; Out of Level End
    777  f2ab		       a9 00		      LDA	#0
    778  f2ad		       85 b3		      STA	GameState
    779  f2af
    780  f2af							; Give 100 Points
    781  f2af		       e6 a2		      INC	ScoreHundreds
    782  f2b1
    783  f2b1							; Give a Free Life (Max 3)
    784  f2b1		       20 b5 f2 	      JSR	GiveLife
    785  f2b4
    786  f2b4				   LevelEndOutRet
    787  f2b4		       60		      RTS
    788  f2b5
    789  f2b5							;==================================================================================
    790  f2b5							; GiveLife - Give an extra life to the player
    791  f2b5							;==================================================================================
    792  f2b5
    793  f2b5				   GiveLife
    794  f2b5		       e6 b0		      INC	LifeCount
    795  f2b7		       a5 b0		      LDA	LifeCount
    796  f2b9		       c9 04		      CMP	#4
    797  f2bb		       d0 04		      BNE	GiveLifeRet
    798  f2bd
    799  f2bd		       a9 03		      LDA	#3
    800  f2bf		       85 b0		      STA	LifeCount
    801  f2c1
    802  f2c1				   GiveLifeRet
    803  f2c1		       60		      RTS
    804  f2c2
    805  f2c2							;==================================================================================
    806  f2c2							; CheckLevelEnd - Verify if all wafers were collected
    807  f2c2							;==================================================================================
    808  f2c2
    809  f2c2				   CheckLevelEnd
    810  f2c2		       a5 b1		      LDA	WaferCount
    811  f2c4		       c9 2a		      CMP	#42
    812  f2c6		       d0 25		      BNE	NotLevelEnd
    813  f2c8
    814  f2c8				   LevelEnd
    815  f2c8		       a9 00		      LDA	#0
    816  f2ca		       a2 06		      LDX	#6
    817  f2cc
    818  f2cc							; Zero All Wafers
    819  f2cc				   ZeroWaferArrayLoop
    820  f2cc		       ca		      DEX
    821  f2cd		       95 92		      STA	WaferArray,x
    822  f2cf		       e0 00		      CPX	#0
    823  f2d1		       d0 f9		      BNE	ZeroWaferArrayLoop
    824  f2d3
    825  f2d3							; Zero WaferCount
    826  f2d3		       85 b1		      STA	WaferCount
    827  f2d5
    828  f2d5							; Return Player to Center of Screen
    829  f2d5		       a9 50		      LDA	#80
    830  f2d7		       85 89		      STA	SpriteXPos
    831  f2d9		       a9 6b		      LDA	#107
    832  f2db		       85 83		      STA	SpriteYPos
    833  f2dd
    834  f2dd							; Start Playing Level End Tune
    835  f2dd		       a9 04		      LDA	#4
    836  f2df		       85 b3		      STA	GameState
    837  f2e1
    838  f2e1							; Change Character Frame to 3
    839  f2e1		       a9 03		      LDA	#3
    840  f2e3		       85 a0		      STA	SpriteAnimationIndex
    841  f2e5		       a9 00		      LDA	#0
    842  f2e7		       85 a1		      STA	IsFrameGoingUp
    843  f2e9
    844  f2e9							; Prepare Timer For Level End Tune
    845  f2e9		       a9 c8		      LDA	#200
    846  f2eb		       85 ad		      STA	TimerCounter20
    847  f2ed
    848  f2ed				   NotLevelEnd
    849  f2ed		       60		      RTS
    850  f2ee
    851  f2ee							;==================================================================================
    852  f2ee							; UpdateBallIndex - increase ball XPos Index and apply it
    853  f2ee							;==================================================================================
    854  f2ee
    855  f2ee				   UpdateBallIndex
    856  f2ee							; Check Timer10
    857  f2ee		       a5 ac		      LDA	TimerCounter10
    858  f2f0		       d0 11		      BNE	DontChangeIndex
    859  f2f2
    860  f2f2							; Change Ball Index
    861  f2f2		       e6 90		      INC	BallXPosIndex
    862  f2f4
    863  f2f4		       a6 90		      LDX	BallXPosIndex
    864  f2f6		       e0 02		      CPX	#2
    865  f2f8		       d0 04		      BNE	ReturnBallIndex
    866  f2fa
    867  f2fa				   BallIndexEquals2
    868  f2fa		       a2 00		      LDX	#0
    869  f2fc		       86 90		      STX	BallXPosIndex
    870  f2fe
    871  f2fe				   ReturnBallIndex
    872  f2fe		       bd 4e f6 	      LDA	BallXPosArray,x
    873  f301		       85 8d		      STA	CurBallXPos
    874  f303
    875  f303				   DontChangeIndex
    876  f303		       60		      RTS
    877  f304
    878  f304							;==================================================================================
    879  f304							; UpdateWaferIndex - increase wafer XPos Index and apply it
    880  f304							;==================================================================================
    881  f304
    882  f304				   UpdateWaferIndex
    883  f304		       e6 91		      INC	WaferXPosIndex
    884  f306
    885  f306		       a6 91		      LDX	WaferXPosIndex
    886  f308		       e0 06		      CPX	#6
    887  f30a		       d0 04		      BNE	ReturnWaferIndex
    888  f30c
    889  f30c				   WaferIndexEquals6
    890  f30c		       a2 00		      LDX	#0
    891  f30e		       86 91		      STX	WaferXPosIndex
    892  f310
    893  f310				   ReturnWaferIndex
    894  f310		       bd 50 f6 	      LDA	WaferXPosArray,x
    895  f313		       85 8b		      STA	CurWaferXPos
    896  f315		       60		      RTS
    897  f316
    898  f316							;==================================================================================
    899  f316							; CheckPlayerCollisionGhosts - Verify for Player Collision with Ghosts
    900  f316							;==================================================================================
    901  f316
    902  f316				   CheckPlayerCollisionGhosts
    903  f316
    904  f316							; Check if death animation is playing
    905  f316		       a5 b3		      LDA	GameState
    906  f318		       c9 01		      CMP	#1
    907  f31a		       f0 12		      BEQ	NoP0P1Collision
    908  f31c
    909  f31c							; Check Collision
    910  f31c		       a5 07		      LDA	CXPPMM
    911  f31e		       29 80		      AND	#%10000000
    912  f320		       f0 0c		      BEQ	NoP0P1Collision
    913  f322
    914  f322				   P0P1Collision
    915  f322							; Reset Player Velocity
    916  f322		       a9 00		      LDA	#0
    917  f324		       85 86		      STA	PlayerVelocityMask
    918  f326
    919  f326							; Set Animation Frame to 4 and IsPlayingDeathAnimation
    920  f326		       a9 04		      LDA	#4
    921  f328		       85 a0		      STA	SpriteAnimationIndex
    922  f32a
    923  f32a		       a9 01		      LDA	#1
    924  f32c		       85 b3		      STA	GameState
    925  f32e
    926  f32e				   NoP0P1Collision
    927  f32e		       60		      RTS
    928  f32f
    929  f32f							;==================================================================================
    930  f32f							; CheckPlayerCollisionPF - Verify for Player Collision with PF and Update Velocity Mask
    931  f32f							;==================================================================================
    932  f32f
    933  f32f				   CheckPlayerCollisionPF
    934  f32f							; Verify P0PF Collision Bit
    935  f32f		       a5 02		      LDA	CXP0FB
    936  f331		       29 80		      AND	#%10000000
    937  f333		       f0 4e		      BEQ	PlayerPFCollisionNotDetected
    938  f335
    939  f335							; Check Where Player Was Going
    940  f335		       a6 86		      LDX	PlayerVelocityMask
    941  f337
    942  f337							; Return Player to Previous Spot Before Zeoring Velocity
    943  f337		       8a		      TXA
    944  f338		       29 08		      AND	#%1000
    945  f33a		       d0 1a		      BNE	WasGoingRight
    946  f33c
    947  f33c		       8a		      TXA
    948  f33d		       29 04		      AND	#%0100
    949  f33f		       d0 20		      BNE	WasGoingLeft
    950  f341
    951  f341		       8a		      TXA
    952  f342		       29 02		      AND	#%0010
    953  f344		       d0 26		      BNE	WasGoingDown
    954  f346
    955  f346		       8a		      TXA
    956  f347		       29 01		      AND	#%0001
    957  f349		       d0 2c		      BNE	WasGoingUp
    958  f34b
    959  f34b							; Return X and Y in case Player isnt moving and is still stuck
    960  f34b		       a5 84		      LDA	LastSpriteXPos
    961  f34d		       85 89		      STA	SpriteXPos
    962  f34f		       a5 85		      LDA	LastSpriteYPos
    963  f351		       85 83		      STA	SpriteYPos
    964  f353
    965  f353		       4c 7f f3 	      JMP	ZeroPlayerVelocity
    966  f356
    967  f356				   WasGoingRight
    968  f356		       a5 84		      LDA	LastSpriteXPos
    969  f358		       85 89		      STA	SpriteXPos
    970  f35a
    971  f35a		       c6 89		      DEC	SpriteXPos
    972  f35c		       c6 89		      DEC	SpriteXPos
    973  f35e
    974  f35e		       4c 7f f3 	      JMP	ZeroPlayerVelocity
    975  f361
    976  f361				   WasGoingLeft
    977  f361		       a5 84		      LDA	LastSpriteXPos
    978  f363		       85 89		      STA	SpriteXPos
    979  f365
    980  f365		       e6 89		      INC	SpriteXPos
    981  f367		       e6 89		      INC	SpriteXPos
    982  f369
    983  f369		       4c 7f f3 	      JMP	ZeroPlayerVelocity
    984  f36c
    985  f36c				   WasGoingDown
    986  f36c		       a5 85		      LDA	LastSpriteYPos
    987  f36e		       85 83		      STA	SpriteYPos
    988  f370
    989  f370		       e6 83		      INC	SpriteYPos
    990  f372		       e6 83		      INC	SpriteYPos
    991  f374
    992  f374		       4c 7f f3 	      JMP	ZeroPlayerVelocity
    993  f377
    994  f377				   WasGoingUp
    995  f377		       a5 85		      LDA	LastSpriteYPos
    996  f379		       85 83		      STA	SpriteYPos
    997  f37b
    998  f37b		       c6 83		      DEC	SpriteYPos
    999  f37d		       c6 83		      DEC	SpriteYPos
   1000  f37f
   1001  f37f				   ZeroPlayerVelocity
   1002  f37f		       a9 00		      LDA	#0
   1003  f381		       85 86		      STA	PlayerVelocityMask
   1004  f383
   1005  f383				   PlayerPFCollisionNotDetected
   1006  f383		       60		      RTS
   1007  f384
   1008  f384							;==================================================================================
   1009  f384							; UpdatePlayerPosition - Update Player Position According to Velocity Mask
   1010  f384							;==================================================================================
   1011  f384
   1012  f384				   UpdatePlayerPosition
   1013  f384							; Verify Collision and Refuse to Move in case is colliding
   1014  f384		       a5 02		      LDA	CXP0FB
   1015  f386		       29 80		      AND	#%10000000
   1016  f388		       d0 5e		      BNE	UpdatePlayerPositionRet
   1017  f38a
   1018  f38a		       a6 86		      LDX	PlayerVelocityMask
   1019  f38c
   1020  f38c		       8a		      TXA
   1021  f38d		       29 08		      AND	#%1000
   1022  f38f		       d0 12		      BNE	GoRight
   1023  f391
   1024  f391		       8a		      TXA
   1025  f392		       29 04		      AND	#%0100
   1026  f394		       d0 24		      BNE	GoLeft
   1027  f396
   1028  f396		       8a		      TXA
   1029  f397		       29 02		      AND	#%0010
   1030  f399		       d0 36		      BNE	GoDown
   1031  f39b
   1032  f39b		       8a		      TXA
   1033  f39c		       29 01		      AND	#%0001
   1034  f39e		       d0 3e		      BNE	GoUp
   1035  f3a0
   1036  f3a0		       4c e8 f3 	      JMP	UpdatePlayerPositionRet
   1037  f3a3
   1038  f3a3				   GoRight
   1039  f3a3		       a5 89		      LDA	SpriteXPos
   1040  f3a5		       85 84		      STA	LastSpriteXPos
   1041  f3a7		       a5 83		      LDA	SpriteYPos
   1042  f3a9		       85 85		      STA	LastSpriteYPos
   1043  f3ab
   1044  f3ab		       e6 89		      INC	SpriteXPos
   1045  f3ad
   1046  f3ad							; Verify If Sprite is in Far Right
   1047  f3ad		       a5 89		      LDA	SpriteXPos
   1048  f3af		       c9 a0		      CMP	#160
   1049  f3b1		       90 04		      BCC	NotFarRight
   1050  f3b3
   1051  f3b3		       a9 00		      LDA	#0
   1052  f3b5		       85 89		      STA	SpriteXPos
   1053  f3b7
   1054  f3b7				   NotFarRight
   1055  f3b7		       4c e8 f3 	      JMP	UpdatePlayerPositionRet
   1056  f3ba
   1057  f3ba				   GoLeft
   1058  f3ba		       a5 89		      LDA	SpriteXPos
   1059  f3bc		       85 84		      STA	LastSpriteXPos
   1060  f3be		       a5 83		      LDA	SpriteYPos
   1061  f3c0		       85 85		      STA	LastSpriteYPos
   1062  f3c2
   1063  f3c2		       c6 89		      DEC	SpriteXPos
   1064  f3c4
   1065  f3c4							; Verify If Sprite is in Far Left
   1066  f3c4		       a5 89		      LDA	SpriteXPos
   1067  f3c6		       c9 00		      CMP	#0
   1068  f3c8		       d0 04		      BNE	NotFarLeft
   1069  f3ca
   1070  f3ca		       a9 a0		      LDA	#160
   1071  f3cc		       85 89		      STA	SpriteXPos
   1072  f3ce
   1073  f3ce				   NotFarLeft
   1074  f3ce		       4c e8 f3 	      JMP	UpdatePlayerPositionRet
   1075  f3d1
   1076  f3d1				   GoDown
   1077  f3d1		       a5 89		      LDA	SpriteXPos
   1078  f3d3		       85 84		      STA	LastSpriteXPos
   1079  f3d5		       a5 83		      LDA	SpriteYPos
   1080  f3d7		       85 85		      STA	LastSpriteYPos
   1081  f3d9
   1082  f3d9		       c6 83		      DEC	SpriteYPos
   1083  f3db		       4c e8 f3 	      JMP	UpdatePlayerPositionRet
   1084  f3de
   1085  f3de				   GoUp
   1086  f3de		       a5 89		      LDA	SpriteXPos
   1087  f3e0		       85 84		      STA	LastSpriteXPos
   1088  f3e2		       a5 83		      LDA	SpriteYPos
   1089  f3e4		       85 85		      STA	LastSpriteYPos
   1090  f3e6
   1091  f3e6		       e6 83		      INC	SpriteYPos
   1092  f3e8
   1093  f3e8				   UpdatePlayerPositionRet
   1094  f3e8		       60		      RTS
   1095  f3e9
   1096  f3e9							;==================================================================================
   1097  f3e9							; ChangeAnimationFrame
   1098  f3e9							;==================================================================================
   1099  f3e9
   1100  f3e9				   ChangeAnimationFrame
   1101  f3e9							; Verify If Is Death Animation
   1102  f3e9		       a5 b3		      LDA	GameState
   1103  f3eb		       c9 01		      CMP	#1
   1104  f3ed		       f0 25		      BEQ	FrameIsDeath
   1105  f3ef
   1106  f3ef				   FrameNotDeath
   1107  f3ef							; Verify TimerCounter5
   1108  f3ef		       a5 ab		      LDA	TimerCounter5
   1109  f3f1		       d0 47		      BNE	DontChangeFrame
   1110  f3f3
   1111  f3f3							; Load Current Frame Index
   1112  f3f3		       a4 a0		      LDY	SpriteAnimationIndex
   1113  f3f5
   1114  f3f5							; Verify Next Frame
   1115  f3f5		       a6 a1		      LDX	IsFrameGoingUp
   1116  f3f7		       d0 04		      BNE	FrameIsGoingUp
   1117  f3f9
   1118  f3f9				   FrameIsGoingDown
   1119  f3f9		       88		      DEY
   1120  f3fa		       4c fe f3 	      JMP	FrameChanged
   1121  f3fd
   1122  f3fd				   FrameIsGoingUp
   1123  f3fd		       c8		      INY
   1124  f3fe
   1125  f3fe				   FrameChanged
   1126  f3fe							; Check if Index is Either 0 or 3
   1127  f3fe		       84 a0		      STY	SpriteAnimationIndex
   1128  f400		       c0 03		      CPY	#3
   1129  f402		       f0 07		      BEQ	ChangeDirection
   1130  f404		       c0 00		      CPY	#0
   1131  f406		       f0 03		      BEQ	ChangeDirection
   1132  f408
   1133  f408							; If not
   1134  f408		       4c 3a f4 	      JMP	FrameChangeReturn
   1135  f40b
   1136  f40b				   ChangeDirection
   1137  f40b		       a5 a1		      LDA	IsFrameGoingUp
   1138  f40d		       49 01		      EOR	#1
   1139  f40f		       85 a1		      STA	IsFrameGoingUp
   1140  f411		       4c 3a f4 	      JMP	FrameChangeReturn
   1141  f414
   1142  f414				   FrameIsDeath
   1143  f414							; Verify TimerCounter20
   1144  f414		       a5 ad		      LDA	TimerCounter20
   1145  f416		       d0 22		      BNE	DontChangeFrame
   1146  f418
   1147  f418				   CheckIfLastDeathFrame
   1148  f418							; Check if Frame is 10 (Last Death Frame)
   1149  f418		       a5 a0		      LDA	SpriteAnimationIndex
   1150  f41a		       c9 0a		      CMP	#10
   1151  f41c		       d0 17		      BNE	ChangeDeathFrame
   1152  f41e
   1153  f41e							; End Death Animation
   1154  f41e		       a9 00		      LDA	#0
   1155  f420		       85 b3		      STA	GameState
   1156  f422		       85 a0		      STA	SpriteAnimationIndex
   1157  f424
   1158  f424		       a9 01		      LDA	#1
   1159  f426		       85 a1		      STA	IsFrameGoingUp
   1160  f428
   1161  f428							; Reset Player Coordinates
   1162  f428		       a9 4d		      LDA	#77
   1163  f42a		       85 89		      STA	SpriteXPos
   1164  f42c		       a9 6b		      LDA	#107
   1165  f42e		       85 83		      STA	SpriteYPos
   1166  f430
   1167  f430							; Take One Life
   1168  f430		       c6 b0		      DEC	LifeCount
   1169  f432
   1170  f432		       4c 3a f4 	      JMP	FrameChangeReturn
   1171  f435
   1172  f435				   ChangeDeathFrame
   1173  f435		       e6 a0		      INC	SpriteAnimationIndex
   1174  f437		       4c 3a f4 	      JMP	FrameChangeReturn
   1175  f43a
   1176  f43a				   DontRestartFrame
   1177  f43a				   DontChangeFrame
   1178  f43a				   FrameChangeReturn
   1179  f43a		       60		      RTS
   1180  f43b
   1181  f43b							;==================================================================================
   1182  f43b							; ApplyAnimationFrame
   1183  f43b							;==================================================================================
   1184  f43b
   1185  f43b				   ApplyAnimationFrame
   1186  f43b							; Check Counter
   1187  f43b		       a5 ab		      LDA	TimerCounter5
   1188  f43d		       d0 2c		      BNE	AnimationFrameRet
   1189  f43f
   1190  f43f		       a5 a0		      LDA	SpriteAnimationIndex
   1191  f441		       f0 2b		      BEQ	Animation0
   1192  f443		       c9 01		      CMP	#1
   1193  f445		       f0 32		      BEQ	Animation1
   1194  f447		       c9 02		      CMP	#2
   1195  f449		       f0 39		      BEQ	Animation2
   1196  f44b		       c9 03		      CMP	#3
   1197  f44d		       f0 40		      BEQ	Animation3
   1198  f44f		       c9 04		      CMP	#4
   1199  f451		       f0 47		      BEQ	Animation4
   1200  f453		       c9 05		      CMP	#5
   1201  f455		       f0 4e		      BEQ	Animation5
   1202  f457		       c9 06		      CMP	#6
   1203  f459		       f0 55		      BEQ	Animation6
   1204  f45b		       c9 07		      CMP	#7
   1205  f45d		       f0 5c		      BEQ	Animation7
   1206  f45f		       c9 08		      CMP	#8
   1207  f461		       f0 63		      BEQ	Animation8
   1208  f463		       c9 09		      CMP	#9
   1209  f465		       f0 6a		      BEQ	Animation9
   1210  f467		       c9 0a		      CMP	#10
   1211  f469		       f0 71		      BEQ	Animation10
   1212  f46b
   1213  f46b				   AnimationFrameRet
   1214  f46b		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1215  f46e
   1216  f46e				   Animation0
   1217  f46e		       a9 00		      LDA	#<Sprite0Data
   1218  f470		       85 81		      STA	SpriteAddrPtr
   1219  f472		       a9 f8		      LDA	#>Sprite0Data
   1220  f474		       85 82		      STA	SpriteAddrPtr+1
   1221  f476		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1222  f479
   1223  f479				   Animation1
   1224  f479		       a9 12		      LDA	#<Sprite1Data
   1225  f47b		       85 81		      STA	SpriteAddrPtr
   1226  f47d		       a9 f8		      LDA	#>Sprite1Data
   1227  f47f		       85 82		      STA	SpriteAddrPtr+1
   1228  f481		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1229  f484
   1230  f484				   Animation2
   1231  f484		       a9 24		      LDA	#<Sprite2Data
   1232  f486		       85 81		      STA	SpriteAddrPtr
   1233  f488		       a9 f8		      LDA	#>Sprite2Data
   1234  f48a		       85 82		      STA	SpriteAddrPtr+1
   1235  f48c		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1236  f48f
   1237  f48f				   Animation3
   1238  f48f		       a9 36		      LDA	#<Sprite3Data
   1239  f491		       85 81		      STA	SpriteAddrPtr
   1240  f493		       a9 f8		      LDA	#>Sprite3Data
   1241  f495		       85 82		      STA	SpriteAddrPtr+1
   1242  f497		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1243  f49a
   1244  f49a				   Animation4
   1245  f49a		       a9 48		      LDA	#<Sprite4Data
   1246  f49c		       85 81		      STA	SpriteAddrPtr
   1247  f49e		       a9 f8		      LDA	#>Sprite4Data
   1248  f4a0		       85 82		      STA	SpriteAddrPtr+1
   1249  f4a2		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1250  f4a5
   1251  f4a5				   Animation5
   1252  f4a5		       a9 5a		      LDA	#<Sprite5Data
   1253  f4a7		       85 81		      STA	SpriteAddrPtr
   1254  f4a9		       a9 f8		      LDA	#>Sprite5Data
   1255  f4ab		       85 82		      STA	SpriteAddrPtr+1
   1256  f4ad		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1257  f4b0
   1258  f4b0				   Animation6
   1259  f4b0		       a9 6c		      LDA	#<Sprite6Data
   1260  f4b2		       85 81		      STA	SpriteAddrPtr
   1261  f4b4		       a9 f8		      LDA	#>Sprite6Data
   1262  f4b6		       85 82		      STA	SpriteAddrPtr+1
   1263  f4b8		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1264  f4bb
   1265  f4bb				   Animation7
   1266  f4bb		       a9 7e		      LDA	#<Sprite7Data
   1267  f4bd		       85 81		      STA	SpriteAddrPtr
   1268  f4bf		       a9 f8		      LDA	#>Sprite7Data
   1269  f4c1		       85 82		      STA	SpriteAddrPtr+1
   1270  f4c3		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1271  f4c6
   1272  f4c6				   Animation8
   1273  f4c6		       a9 90		      LDA	#<Sprite8Data
   1274  f4c8		       85 81		      STA	SpriteAddrPtr
   1275  f4ca		       a9 f8		      LDA	#>Sprite8Data
   1276  f4cc		       85 82		      STA	SpriteAddrPtr+1
   1277  f4ce		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1278  f4d1
   1279  f4d1				   Animation9
   1280  f4d1		       a9 a0		      LDA	#<Sprite9Data
   1281  f4d3		       85 81		      STA	SpriteAddrPtr
   1282  f4d5		       a9 f8		      LDA	#>Sprite9Data
   1283  f4d7		       85 82		      STA	SpriteAddrPtr+1
   1284  f4d9		       4c e4 f4 	      JMP	ApplyAnimationFrameRet
   1285  f4dc
   1286  f4dc				   Animation10
   1287  f4dc		       a9 b0		      LDA	#<Sprite10Data
   1288  f4de		       85 81		      STA	SpriteAddrPtr
   1289  f4e0		       a9 f8		      LDA	#>Sprite10Data
   1290  f4e2		       85 82		      STA	SpriteAddrPtr+1
   1291  f4e4
   1292  f4e4				   ApplyAnimationFrameRet
   1293  f4e4		       60		      RTS
   1294  f4e5
   1295  f4e5							;==================================================================================
   1296  f4e5							; GetControllerInputsDirectional - Update Player Velocity Mask According to Inputs
   1297  f4e5							;==================================================================================
   1298  f4e5
   1299  f4e5				   GetControllerInputsDirectional
   1300  f4e5							; Check if game is in death animation
   1301  f4e5		       a5 b3		      LDA	GameState
   1302  f4e7		       c9 01		      CMP	#1
   1303  f4e9		       f0 3d		      BEQ	ControllerRet
   1304  f4eb
   1305  f4eb		       ae 80 02 	      LDX	SWCHA
   1306  f4ee
   1307  f4ee							; Check Right Input
   1308  f4ee		       8a		      TXA
   1309  f4ef		       29 80		      AND	#%10000000
   1310  f4f1		       f0 12		      BEQ	RightInput
   1311  f4f3
   1312  f4f3							; Check Left Input
   1313  f4f3		       8a		      TXA
   1314  f4f4		       29 40		      AND	#%01000000
   1315  f4f6		       f0 18		      BEQ	LeftInput
   1316  f4f8
   1317  f4f8							; Check Down Input
   1318  f4f8		       8a		      TXA
   1319  f4f9		       29 20		      AND	#%00100000
   1320  f4fb		       f0 20		      BEQ	DownInput
   1321  f4fd
   1322  f4fd							; Check Up Input
   1323  f4fd		       8a		      TXA
   1324  f4fe		       29 10		      AND	#%00010000
   1325  f500		       f0 22		      BEQ	UpInput
   1326  f502
   1327  f502							; No Input Detected
   1328  f502		       4c 28 f5 	      JMP	ControllerRet
   1329  f505
   1330  f505				   RightInput
   1331  f505		       a9 08		      LDA	#%1000
   1332  f507		       85 0b		      STA	REFP0
   1333  f509		       85 ae		      STA	PlayerReflectedBuffer
   1334  f50b
   1335  f50b		       85 86		      STA	PlayerVelocityMask
   1336  f50d		       4c 28 f5 	      JMP	ControllerRet
   1337  f510
   1338  f510				   LeftInput
   1339  f510		       a9 00		      LDA	#0
   1340  f512		       85 0b		      STA	REFP0
   1341  f514		       85 ae		      STA	PlayerReflectedBuffer
   1342  f516
   1343  f516		       a9 04		      LDA	#%0100
   1344  f518		       85 86		      STA	PlayerVelocityMask
   1345  f51a		       4c 28 f5 	      JMP	ControllerRet
   1346  f51d
   1347  f51d				   DownInput
   1348  f51d		       a9 02		      LDA	#%0010
   1349  f51f		       85 86		      STA	PlayerVelocityMask
   1350  f521		       4c 28 f5 	      JMP	ControllerRet
   1351  f524
   1352  f524				   UpInput
   1353  f524		       a9 01		      LDA	#%0001
   1354  f526		       85 86		      STA	PlayerVelocityMask
   1355  f528
   1356  f528				   ControllerRet
   1357  f528		       60		      RTS
   1358  f529
   1359  f529							;==================================================================================
   1360  f529							; GetControllerInputsButton - Pause Game
   1361  f529							;==================================================================================
   1362  f529
   1363  f529				   GetControllerInputsButton
   1364  f529							; Verify Button Press
   1365  f529		       a5 0c		      LDA	INPT4
   1366  f52b		       29 80		      AND	#%10000000
   1367  f52d		       a8		      TAY
   1368  f52e
   1369  f52e							; See if it's Edge
   1370  f52e		       c5 b2		      CMP	WasButtonPressed
   1371  f530		       f0 1e		      BEQ	StateNotChanged
   1372  f532
   1373  f532				   StateChanged
   1374  f532							; Only React to One Edge
   1375  f532		       c9 00		      CMP	#0
   1376  f534		       d0 1a		      BNE	ButtonNotPushed
   1377  f536
   1378  f536							; Check Expected Behavior if in Game Over Screen
   1379  f536		       a5 b3		      LDA	GameState
   1380  f538		       c9 03		      CMP	#3
   1381  f53a		       d0 03		      BNE	PauseUnpauseGame
   1382  f53c
   1383  f53c				   RestartGame
   1384  f53c							; Fully Reset Game
   1385  f53c		       4c 00 f0 	      JMP	Reset
   1386  f53f
   1387  f53f				   PauseUnpauseGame
   1388  f53f							; Pause/Unpause Game
   1389  f53f		       a5 b3		      LDA	GameState
   1390  f541		       c9 00		      CMP	#0
   1391  f543		       f0 07		      BEQ	PauseGame
   1392  f545
   1393  f545				   UnpauseGame
   1394  f545		       a9 00		      LDA	#0
   1395  f547		       85 b3		      STA	GameState
   1396  f549		       4c 50 f5 	      JMP	ControllerButtonRet
   1397  f54c
   1398  f54c				   PauseGame
   1399  f54c		       a9 02		      LDA	#2
   1400  f54e		       85 b3		      STA	GameState
   1401  f550
   1402  f550				   StateNotChanged
   1403  f550				   ButtonNotPushed
   1404  f550				   ControllerButtonRet
   1405  f550		       84 b2		      STY	WasButtonPressed
   1406  f552		       60		      RTS
   1407  f553
   1408  f553							;==================================================================================
   1409  f553							; GetController2Inputs - DEBUG - Controls Ghost
   1410  f553							;==================================================================================
   1411  f553
   1412  f553				   GetController2InputsDEBUG
   1413  f553		       ae 80 02 	      LDX	SWCHA
   1414  f556
   1415  f556							; Check Right Input
   1416  f556		       8a		      TXA
   1417  f557		       29 08		      AND	#%00001000
   1418  f559		       f0 12		      BEQ	RightInputGhost
   1419  f55b
   1420  f55b							; Check Left Input
   1421  f55b		       8a		      TXA
   1422  f55c		       29 04		      AND	#%00000100
   1423  f55e		       f0 18		      BEQ	LeftInputGhost
   1424  f560
   1425  f560							; Check Down Input
   1426  f560		       8a		      TXA
   1427  f561		       29 02		      AND	#%00000010
   1428  f563		       f0 1e		      BEQ	DownInputGhost
   1429  f565
   1430  f565							; Check Up Input
   1431  f565		       8a		      TXA
   1432  f566		       29 01		      AND	#%00000001
   1433  f568		       f0 1e		      BEQ	UpInputGhost
   1434  f56a
   1435  f56a							; No Input Detected
   1436  f56a		       4c 8a f5 	      JMP	ControllerRetGhost
   1437  f56d
   1438  f56d				   RightInputGhost
   1439  f56d		       e6 8a		      INC	GhostSpriteXPos
   1440  f56f		       a9 08		      LDA	#%1000
   1441  f571		       85 0c		      STA	REFP1
   1442  f573		       85 af		      STA	GhostReflectedBuffer
   1443  f575		       4c 8a f5 	      JMP	ControllerRetGhost
   1444  f578
   1445  f578				   LeftInputGhost
   1446  f578		       c6 8a		      DEC	GhostSpriteXPos
   1447  f57a		       a9 00		      LDA	#0
   1448  f57c		       85 0c		      STA	REFP1
   1449  f57e		       85 af		      STA	GhostReflectedBuffer
   1450  f580		       4c 8a f5 	      JMP	ControllerRetGhost
   1451  f583
   1452  f583				   DownInputGhost
   1453  f583		       c6 8e		      DEC	GhostSpriteYPos
   1454  f585		       4c 8a f5 	      JMP	ControllerRetGhost
   1455  f588
   1456  f588				   UpInputGhost
   1457  f588		       e6 8e		      INC	GhostSpriteYPos
   1458  f58a
   1459  f58a				   ControllerRetGhost
   1460  f58a		       60		      RTS
   1461  f58b
   1462  f58b							;==================================================================================
   1463  f58b							; UpdateTimer - Updates All Timers
   1464  f58b							;==================================================================================
   1465  f58b
   1466  f58b				   UpdateTimer
   1467  f58b				   UpdateTimer5
   1468  f58b		       a5 ab		      LDA	TimerCounter5
   1469  f58d		       c9 00		      CMP	#0
   1470  f58f		       d0 07		      BNE	DidntReachLimitTimer5
   1471  f591
   1472  f591				   ReachedLimitTimer5
   1473  f591		       a9 05		      LDA	#TIMER_LIMIT1
   1474  f593		       85 ab		      STA	TimerCounter5
   1475  f595		       4c 9a f5 	      JMP	UpdateTimer10
   1476  f598
   1477  f598				   DidntReachLimitTimer5
   1478  f598		       c6 ab		      DEC	TimerCounter5
   1479  f59a
   1480  f59a				   UpdateTimer10
   1481  f59a		       a5 ac		      LDA	TimerCounter10
   1482  f59c		       c9 00		      CMP	#0
   1483  f59e		       d0 07		      BNE	DidntReachLimitTimer10
   1484  f5a0
   1485  f5a0				   ReachedLimitTimer10
   1486  f5a0		       a9 08		      LDA	#TIMER_LIMIT3
   1487  f5a2		       85 ac		      STA	TimerCounter10
   1488  f5a4		       4c a9 f5 	      JMP	UpdateTimer20
   1489  f5a7
   1490  f5a7				   DidntReachLimitTimer10
   1491  f5a7		       c6 ac		      DEC	TimerCounter10
   1492  f5a9
   1493  f5a9				   UpdateTimer20
   1494  f5a9		       a5 ad		      LDA	TimerCounter20
   1495  f5ab		       c9 00		      CMP	#0
   1496  f5ad		       d0 07		      BNE	DidntReachLimitTimer20
   1497  f5af
   1498  f5af				   ReachedLimitTimer20
   1499  f5af		       a9 14		      LDA	#TIMER_LIMIT2
   1500  f5b1		       85 ad		      STA	TimerCounter20
   1501  f5b3		       4c b8 f5 	      JMP	TimerRet
   1502  f5b6
   1503  f5b6				   DidntReachLimitTimer20
   1504  f5b6		       c6 ad		      DEC	TimerCounter20
   1505  f5b8
   1506  f5b8				   TimerRet
   1507  f5b8		       60		      RTS
   1508  f5b9
   1509  f5b9							;==================================================================================
   1510  f5b9							; UpdateScore
   1511  f5b9							;==================================================================================
   1512  f5b9
   1513  f5b9				   UpdateScore
   1514  f5b9							; Check If Wafer Was Picked Up
   1515  f5b9		       a5 98		      LDA	PickedUpWaferBuffer
   1516  f5bb		       c9 00		      CMP	#0
   1517  f5bd		       f0 26		      BEQ	DidntPickUpWafer
   1518  f5bf
   1519  f5bf							; Picked Up Wafer - Increase Ones and Add to Wafer Count
   1520  f5bf		       e6 a4		      INC	ScoreOnes
   1521  f5c1		       e6 b1		      INC	WaferCount
   1522  f5c3
   1523  f5c3							; Check if Ones reached 10
   1524  f5c3		       a6 a4		      LDX	ScoreOnes
   1525  f5c5		       e0 0a		      CPX	#10
   1526  f5c7		       d0 1c		      BNE	NotYet10
   1527  f5c9
   1528  f5c9				   OnesReached10
   1529  f5c9							; Reset Ones and Increase Tens
   1530  f5c9		       a2 00		      LDX	#0
   1531  f5cb		       86 a4		      STX	ScoreOnes
   1532  f5cd		       e6 a3		      INC	ScoreTens
   1533  f5cf
   1534  f5cf							; Check if Tens reached 10
   1535  f5cf		       a6 a3		      LDX	ScoreTens
   1536  f5d1		       e0 0a		      CPX	#10
   1537  f5d3		       d0 10		      BNE	NotYet10
   1538  f5d5
   1539  f5d5				   TensReached10
   1540  f5d5							; Reset Tens
   1541  f5d5		       a2 00		      LDX	#0
   1542  f5d7		       86 a3		      STX	ScoreTens
   1543  f5d9		       e6 a2		      INC	ScoreHundreds
   1544  f5db
   1545  f5db							; Check if Hundreds reached 10
   1546  f5db		       a6 a2		      LDX	ScoreHundreds
   1547  f5dd		       e0 0a		      CPX	#10
   1548  f5df		       d0 04		      BNE	NotYet10
   1549  f5e1
   1550  f5e1				   HundredsReached10
   1551  f5e1							; Reset Hundreds
   1552  f5e1		       a2 00		      LDX	#0
   1553  f5e3		       86 a2		      STX	ScoreHundreds
   1554  f5e5
   1555  f5e5				   DidntPickUpWafer
   1556  f5e5				   NotYet10
   1557  f5e5							; Flush PickedUpWaferBuffer
   1558  f5e5		       a9 00		      LDA	#0
   1559  f5e7		       85 98		      STA	PickedUpWaferBuffer
   1560  f5e9
   1561  f5e9		       60		      RTS
   1562  f5ea
   1563  f5ea							;==================================================================================
   1564  f5ea							; HandleGameOver
   1565  f5ea							;==================================================================================
   1566  f5ea
   1567  f5ea				   HandleGameOver
   1568  f5ea							; Check if Button is Pressed
   1569  f5ea		       20 29 f5 	      JSR	GetControllerInputsButton
   1570  f5ed
   1571  f5ed							; TIM64T Loop
   1572  f5ed				   VBlankLoopGameOver
   1573  f5ed		       ad 84 02 	      LDA	INTIM
   1574  f5f0		       d0 fb		      BNE	VBlankLoopGameOver
   1575  f5f2
   1576  f5f2							; Show Screen
   1577  f5f2		       20 0b f6 	      JSR	ShowGameOverScreen
   1578  f5f5		       20 45 f6 	      JSR	GameOverOverscan
   1579  f5f8		       20 1b f0 	      JSR	HandleVSync
   1580  f5fb
   1581  f5fb							; Initialize TIM64T
   1582  f5fb		       a9 2a		      LDA	#42
   1583  f5fd		       8d 96 02 	      STA	TIM64T
   1584  f600
   1585  f600							; Prepare Registers for VBLANK
   1586  f600		       a9 00		      LDA	#0
   1587  f602		       85 00		      STA	VSYNC
   1588  f604		       a9 42		      LDA	#%01000010
   1589  f606		       85 01		      STA	VBLANK
   1590  f608
   1591  f608		       4c ea f5 	      JMP	HandleGameOver
   1592  f60b
   1593  f60b							;==================================================================================
   1594  f60b							; ShowGameOverScreen
   1595  f60b							;==================================================================================
   1596  f60b
   1597  f60b				   ShowGameOverScreen
   1598  f60b		       a9 00		      LDA	#0
   1599  f60d		       85 01		      STA	VBLANK
   1600  f60f
   1601  f60f		       a9 0e		      LDA	#$0E
   1602  f611		       85 08		      STA	COLUPF
   1603  f613
   1604  f613		       a2 3c		      LDX	#60
   1605  f615		       85 02		      STA	WSYNC
   1606  f617				   GameOverLoop1
   1607  f617		       85 02		      STA	WSYNC
   1608  f619		       ca		      DEX
   1609  f61a		       d0 fb		      BNE	GameOverLoop1
   1610  f61c
   1611  f61c		       a2 32		      LDX	#50
   1612  f61e				   GameOverLoop2
   1613  f61e							; Display Game Over Message
   1614  f61e		       bd 40 fb 	      LDA	GameOverMessage_STRIP_0,x
   1615  f621		       85 0d		      STA	PF0
   1616  f623		       bd 72 fb 	      LDA	GameOverMessage_STRIP_1,x
   1617  f626		       85 0e		      STA	PF1
   1618  f628		       bd a4 fb 	      LDA	GameOverMessage_STRIP_2,x
   1619  f62b		       85 0f		      STA	PF2
   1620  f62d
   1621  f62d		       20 4d f6 	      JSR	Delay12
   1622  f630
   1623  f630		       a9 00		      LDA	#0
   1624  f632		       85 0d		      STA	PF0
   1625  f634		       85 0e		      STA	PF1
   1626  f636		       85 0f		      STA	PF2
   1627  f638
   1628  f638		       85 02		      STA	WSYNC
   1629  f63a		       ca		      DEX
   1630  f63b		       d0 e1		      BNE	GameOverLoop2
   1631  f63d
   1632  f63d		       a2 51		      LDX	#81
   1633  f63f				   GameOverLoop3
   1634  f63f		       85 02		      STA	WSYNC
   1635  f641		       ca		      DEX
   1636  f642		       d0 fb		      BNE	GameOverLoop3
   1637  f644
   1638  f644		       60		      RTS
   1639  f645
   1640  f645							;==================================================================================
   1641  f645							; GameOverOverscan
   1642  f645							;==================================================================================
   1643  f645
   1644  f645				   GameOverOverscan
   1645  f645
   1646  f645		       a2 1e		      LDX	#30
   1647  f647				   GameOverOverscanLoop
   1648  f647		       85 02		      STA	WSYNC
   1649  f649		       ca		      DEX
   1650  f64a		       d0 fb		      BNE	GameOverOverscanLoop
   1651  f64c
   1652  f64c		       60		      RTS
   1653  f64d
   1654  f64d							;==================================================================================
   1655  f64d							; Delay12 - Waste 12 cycles of CPU
   1656  f64d							;==================================================================================
   1657  f64d
   1658  f64d				   Delay12
   1659  f64d		       60		      RTS
   1660  f64e
   1661  f64e							;==================================================================================
   1662  f64e							; BallXPosArray - Array containing the XPos for each column of balls
   1663  f64e							;==================================================================================
   1664  f64e
   1665  f64e				   BallXPosArray
   1666  f64e		       0a 96		      .byte.b	10,150
   1667  f650
   1668  f650							;==================================================================================
   1669  f650							; WaferXPosArray - Array containing the XPos for each column of wafers
   1670  f650							;==================================================================================
   1671  f650
   1672  f650				   WaferXPosArray
   1673  f650		       19 23 3c 64*	      .byte.b	25,35,60,100,130,140
   1674  f656
   1675  f656							;==================================================================================
   1676  f656							; FindWaferLookUp - Look up table for finding wafer in memory
   1677  f656							;==================================================================================
   1678  f656
   1679  f656				   FindWaferLookUp
   1680  f656		       00 02 04 08*	      .byte.b	0,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000
   1681  f65e
   1682  f65e							;==================================================================================
   1683  f65e							; MultBy14
   1684  f65e							;==================================================================================
   1685  f65e
   1686  f65e				   MultBy14
   1687  f65e		       f0 fe 0c 1a*	      .byte.b	-16,-2,12,26,40,54,68,82,96,110,124
   1688  f669
   1689  f669							;==================================================================================
   1690  f669							; Lives Icons NUSIZ0 Look up table
   1691  f669							;==================================================================================
   1692  f669
   1693  f669				   LivesNUSIZ0LookUp
   1694  f669		       00 00 01 03	      .byte.b	0,0,%001,%011
   1695  f66d
   1696  f66d							;==================================================================================
   1697  f66d							; CheckLineBytes
   1698  f66d							;==================================================================================
   1699  f66d
   1700  f66d				   CheckLineBytes
   1701  f66d		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1702  f678		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,7,7,0,0
   1703  f683		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,-1,-1,-1,-1
   1704  f68e		       ff ff 00 00*	      .byte.b	-1,-1,0,0,0,0,0,0,0,0,0
   1705  f699		       06 06 00 00*	      .byte.b	6,6,0,0,0,0,0,0,0,0,0
   1706  f6a4		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1707  f6af		       00 00 00 00*	      .byte.b	0,0,0,0,5,5,0,0,0,0,0
   1708  f6ba		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1709  f6c5		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,4,4,0,0,0
   1710  f6d0		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1711  f6db		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,3,3,0
   1712  f6e6		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1713  f6f1		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,2
   1714  f6fc		       02 00 00 00*	      .byte.b	2,0,0,0,0,0,0,0,0,0,0
   1715  f707		       00 00 00 ff*	      .byte.b	0,0,0,-1,-1,-1,-1,-1,-1,0,0
   1716  f712		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,1,1
   1717  f71d		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1718  f728		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1719  f733
   1720  f733				   ConvertPlayerPosToWaferIndex
   1721  f733		       07 07 07 07*	      .byte.b	7,7,7,7,7,7,7,7,7,7
   1722  f73d		       07 07 07 07*	      .byte.b	7,7,7,7,7,7,7,7,7,7
   1723  f747		       07 07 07 07*	      .byte.b	7,7,7,7,7,7,7,7,7,7
   1724  f751		       07 07 07 07*	      .byte.b	7,7,7,7,7,7,7,7,7,6
   1725  f75b		       06 06 06 06*	      .byte.b	6,6,6,6,6,6,6,6,6,6
   1726  f765		       06 06 06 06*	      .byte.b	6,6,6,6,6,6,6,6,6,6
   1727  f76f		       06 06 06 06*	      .byte.b	6,6,6,6,6,6,6,6,6,5
   1728  f779		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5,5,5
   1729  f783		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5,5,5
   1730  f78d		       05 05 04 04*	      .byte.b	5,5,4,4,4,4,4,4,4,4
   1731  f797		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4,4,4
   1732  f7a1		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,3,3,3
   1733  f7ab		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3,3,3
   1734  f7b5		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3,3,3
   1735  f7bf		       02 02 02 02*	      .byte.b	2,2,2,2,2,2,2,2,2,2
   1736  f7c9		       02 02 02 02*	      .byte.b	2,2,2,2,2,2,2,2,2,2
   1737  f7d3		       02 02 02 02*	      .byte.b	2,2,2,2,2,2,1,1,1,1
   1738  f7dd		       01 01 01 01*	      .byte.b	1,1,1,1,1,1,1,1,1,1
   1739  f7e7		       01 01 01 01*	      .byte.b	1,1,1,1,1,1,1,1,1,1
   1740  f7f1		       01 01 01 01	      .byte.b	1,1,1,1
   1741  f7f5
   1742  f7f5							;===============================================================================
   1743  f7f5							; free space check before page boundry
   1744  f7f5							;===============================================================================
   1745  f7f5
 Start of Sprite0Data is:  $f7f5
   1746  f7f5					      echo	"Start of Sprite0Data is: ", *
   1747  f800		       00 00 00 00*	      align	256
   1748  f800
   1749  f800							;==================================================================================
   1750  f800							; Sprite Data - Pacman
   1751  f800							;==================================================================================
   1752  f800
   1753  f800				   Sprite0Data
   1754  f800							; Frame 0
   1755  f800		       00		      .byte.b	#%00000000
   1756  f801		       00		      .byte.b	#%00000000
   1757  f802		       7e		      .byte.b	#%01111110
   1758  f803		       7e		      .byte.b	#%01111110
   1759  f804		       3f		      .byte.b	#%00111111
   1760  f805		       3f		      .byte.b	#%00111111
   1761  f806		       0f		      .byte.b	#%00001111
   1762  f807		       0f		      .byte.b	#%00001111
   1763  f808		       07		      .byte.b	#%00000111
   1764  f809		       07		      .byte.b	#%00000111
   1765  f80a		       0f		      .byte.b	#%00001111
   1766  f80b		       0f		      .byte.b	#%00001111
   1767  f80c		       3f		      .byte.b	#%00111111
   1768  f80d		       3f		      .byte.b	#%00111111
   1769  f80e		       7e		      .byte.b	#%01111110
   1770  f80f		       7e		      .byte.b	#%01111110
   1771  f810		       00		      .byte.b	#%00000000
   1772  f811		       00		      .byte.b	#%00000000
   1773  f812
   1774  f812				   Sprite1Data
   1775  f812							; Frame 1
   1776  f812		       00		      .byte.b	#%00000000
   1777  f813		       00		      .byte.b	#%00000000
   1778  f814		       7e		      .byte.b	#%01111110
   1779  f815		       7e		      .byte.b	#%01111110
   1780  f816		       ff		      .byte.b	#%11111111
   1781  f817		       ff		      .byte.b	#%11111111
   1782  f818		       3f		      .byte.b	#%00111111
   1783  f819		       3f		      .byte.b	#%00111111
   1784  f81a		       0f		      .byte.b	#%00001111
   1785  f81b		       0f		      .byte.b	#%00001111
   1786  f81c		       3f		      .byte.b	#%00111111
   1787  f81d		       3f		      .byte.b	#%00111111
   1788  f81e		       ff		      .byte.b	#%11111111
   1789  f81f		       ff		      .byte.b	#%11111111
   1790  f820		       7e		      .byte.b	#%01111110
   1791  f821		       7e		      .byte.b	#%01111110
   1792  f822		       00		      .byte.b	#%00000000
   1793  f823		       00		      .byte.b	#%00000000
   1794  f824
   1795  f824				   Sprite2Data
   1796  f824							; Frame 2
   1797  f824		       00		      .byte.b	#%00000000
   1798  f825		       00		      .byte.b	#%00000000
   1799  f826		       7e		      .byte.b	#%01111110
   1800  f827		       7e		      .byte.b	#%01111110
   1801  f828		       ff		      .byte.b	#%11111111
   1802  f829		       ff		      .byte.b	#%11111111
   1803  f82a		       ff		      .byte.b	#%11111111
   1804  f82b		       ff		      .byte.b	#%11111111
   1805  f82c		       0f		      .byte.b	#%00001111
   1806  f82d		       0f		      .byte.b	#%00001111
   1807  f82e		       ff		      .byte.b	#%11111111
   1808  f82f		       ff		      .byte.b	#%11111111
   1809  f830		       ff		      .byte.b	#%11111111
   1810  f831		       ff		      .byte.b	#%11111111
   1811  f832		       7e		      .byte.b	#%01111110
   1812  f833		       7e		      .byte.b	#%01111110
   1813  f834		       00		      .byte.b	#%00000000
   1814  f835		       00		      .byte.b	#%00000000
   1815  f836
   1816  f836				   Sprite3Data
   1817  f836							; Frame 3
   1818  f836		       00		      .byte.b	#%00000000
   1819  f837		       00		      .byte.b	#%00000000
   1820  f838		       7e		      .byte.b	#%01111110
   1821  f839		       7e		      .byte.b	#%01111110
   1822  f83a		       ff		      .byte.b	#%11111111
   1823  f83b		       ff		      .byte.b	#%11111111
   1824  f83c		       ff		      .byte.b	#%11111111
   1825  f83d		       ff		      .byte.b	#%11111111
   1826  f83e		       ff		      .byte.b	#%11111111
   1827  f83f		       ff		      .byte.b	#%11111111
   1828  f840		       ff		      .byte.b	#%11111111
   1829  f841		       ff		      .byte.b	#%11111111
   1830  f842		       ff		      .byte.b	#%11111111
   1831  f843		       ff		      .byte.b	#%11111111
   1832  f844		       7e		      .byte.b	#%01111110
   1833  f845		       7e		      .byte.b	#%01111110
   1834  f846		       00		      .byte.b	#%00000000
   1835  f847		       00		      .byte.b	#%00000000
   1836  f848
   1837  f848				   Sprite4Data
   1838  f848							; Frame 4
   1839  f848		       00		      .byte.b	#%00000000
   1840  f849		       00		      .byte.b	#%00000000
   1841  f84a		       1e		      .byte.b	#%00011110
   1842  f84b		       1e		      .byte.b	#%00011110
   1843  f84c		       1f		      .byte.b	#%00011111
   1844  f84d		       1f		      .byte.b	#%00011111
   1845  f84e		       0f		      .byte.b	#%00001111
   1846  f84f		       0f		      .byte.b	#%00001111
   1847  f850		       07		      .byte.b	#%00000111
   1848  f851		       07		      .byte.b	#%00000111
   1849  f852		       0f		      .byte.b	#%00001111
   1850  f853		       0f		      .byte.b	#%00001111
   1851  f854		       1f		      .byte.b	#%00011111
   1852  f855		       1f		      .byte.b	#%00011111
   1853  f856		       1e		      .byte.b	#%00011110
   1854  f857		       1e		      .byte.b	#%00011110
   1855  f858		       00		      .byte.b	#%00000000
   1856  f859		       00		      .byte.b	#%00000000
   1857  f85a
   1858  f85a				   Sprite5Data
   1859  f85a							; Frame 5
   1860  f85a		       00		      .byte.b	#%00000000
   1861  f85b		       00		      .byte.b	#%00000000
   1862  f85c		       02		      .byte.b	#%00000010
   1863  f85d		       02		      .byte.b	#%00000010
   1864  f85e		       07		      .byte.b	#%00000111
   1865  f85f		       07		      .byte.b	#%00000111
   1866  f860		       07		      .byte.b	#%00000111
   1867  f861		       07		      .byte.b	#%00000111
   1868  f862		       07		      .byte.b	#%00000111
   1869  f863		       07		      .byte.b	#%00000111
   1870  f864		       07		      .byte.b	#%00000111
   1871  f865		       07		      .byte.b	#%00000111
   1872  f866		       07		      .byte.b	#%00000111
   1873  f867		       07		      .byte.b	#%00000111
   1874  f868		       02		      .byte.b	#%00000010
   1875  f869		       02		      .byte.b	#%00000010
   1876  f86a		       00		      .byte.b	#%00000000
   1877  f86b		       00		      .byte.b	#%00000000
   1878  f86c
   1879  f86c				   Sprite6Data
   1880  f86c							; Frame 6
   1881  f86c		       00		      .byte.b	#%00000000
   1882  f86d		       00		      .byte.b	#%00000000
   1883  f86e		       00		      .byte.b	#%00000000
   1884  f86f		       00		      .byte.b	#%00000000
   1885  f870		       00		      .byte.b	#%00000000
   1886  f871		       03		      .byte.b	#%00000011
   1887  f872		       03		      .byte.b	#%00000011
   1888  f873		       07		      .byte.b	#%00000111
   1889  f874		       07		      .byte.b	#%00000111
   1890  f875		       07		      .byte.b	#%00000111
   1891  f876		       07		      .byte.b	#%00000111
   1892  f877		       03		      .byte.b	#%00000011
   1893  f878		       03		      .byte.b	#%00000011
   1894  f879		       00		      .byte.b	#%00000000
   1895  f87a		       00		      .byte.b	#%00000000
   1896  f87b		       00		      .byte.b	#%00000000
   1897  f87c		       00		      .byte.b	#%00000000
   1898  f87d		       00		      .byte.b	#%00000000
   1899  f87e
   1900  f87e				   Sprite7Data
   1901  f87e							; Frame 7
   1902  f87e		       00		      .byte.b	#%00000000
   1903  f87f		       00		      .byte.b	#%00000000
   1904  f880		       00		      .byte.b	#%00000000
   1905  f881		       00		      .byte.b	#%00000000
   1906  f882		       00		      .byte.b	#%00000000
   1907  f883		       00		      .byte.b	#%00000000
   1908  f884		       00		      .byte.b	#%00000000
   1909  f885		       07		      .byte.b	#%00000111
   1910  f886		       07		      .byte.b	#%00000111
   1911  f887		       07		      .byte.b	#%00000111
   1912  f888		       07		      .byte.b	#%00000111
   1913  f889		       00		      .byte.b	#%00000000
   1914  f88a		       00		      .byte.b	#%00000000
   1915  f88b		       00		      .byte.b	#%00000000
   1916  f88c		       00		      .byte.b	#%00000000
   1917  f88d		       00		      .byte.b	#%00000000
   1918  f88e		       00		      .byte.b	#%00000000
   1919  f88f		       00		      .byte.b	#%00000000
   1920  f890
   1921  f890				   Sprite8Data
   1922  f890							; Frame 8
   1923  f890		       00		      .byte.b	#%00000000
   1924  f891		       00		      .byte.b	#%00000000
   1925  f892		       81		      .byte.b	#%10000001
   1926  f893		       81		      .byte.b	#%10000001
   1927  f894		       44		      .byte.b	#%01000100
   1928  f895		       44		      .byte.b	#%01000100
   1929  f896		       38		      .byte.b	#%00111000
   1930  f897		       38		      .byte.b	#%00111000
   1931  f898		       46		      .byte.b	#%01000110
   1932  f899		       46		      .byte.b	#%01000110
   1933  f89a		       81		      .byte.b	#%10000001
   1934  f89b		       81		      .byte.b	#%10000001
   1935  f89c		       00		      .byte.b	#%00000000
   1936  f89d		       00		      .byte.b	#%00000000
   1937  f89e		       00		      .byte.b	#%00000000
   1938  f89f		       00		      .byte.b	#%00000000
   1939  f8a0
   1940  f8a0				   Sprite9Data
   1941  f8a0							; Frame 9
   1942  f8a0		       00		      .byte.b	#%00000000
   1943  f8a1		       00		      .byte.b	#%00000000
   1944  f8a2		       10		      .byte.b	#%00010000
   1945  f8a3		       10		      .byte.b	#%00010000
   1946  f8a4		       81		      .byte.b	#%10000001
   1947  f8a5		       81		      .byte.b	#%10000001
   1948  f8a6		       00		      .byte.b	#%00000000
   1949  f8a7		       00		      .byte.b	#%00000000
   1950  f8a8		       80		      .byte.b	#%10000000
   1951  f8a9		       80		      .byte.b	#%10000000
   1952  f8aa		       01		      .byte.b	#%00000001
   1953  f8ab		       01		      .byte.b	#%00000001
   1954  f8ac		       00		      .byte.b	#%00000000
   1955  f8ad		       00		      .byte.b	#%00000000
   1956  f8ae		       00		      .byte.b	#%00000000
   1957  f8af		       00		      .byte.b	#%00000000
   1958  f8b0
   1959  f8b0				   Sprite10Data
   1960  f8b0							; Frame 10
   1961  f8b0		       00		      .byte.b	#%00000000
   1962  f8b1		       00		      .byte.b	#%00000000
   1963  f8b2		       00		      .byte.b	#%00000000
   1964  f8b3		       00		      .byte.b	#%00000000
   1965  f8b4		       00		      .byte.b	#%00000000
   1966  f8b5		       00		      .byte.b	#%00000000
   1967  f8b6		       00		      .byte.b	#%00000000
   1968  f8b7		       00		      .byte.b	#%00000000
   1969  f8b8		       00		      .byte.b	#%00000000
   1970  f8b9		       00		      .byte.b	#%00000000
   1971  f8ba		       00		      .byte.b	#%00000000
   1972  f8bb		       00		      .byte.b	#%00000000
   1973  f8bc		       00		      .byte.b	#%00000000
   1974  f8bd		       00		      .byte.b	#%00000000
   1975  f8be		       00		      .byte.b	#%00000000
   1976  f8bf		       00		      .byte.b	#%00000000
   1977  f8c0
   1978  f8c0							;==================================================================================
   1979  f8c0							; Sprite Data - Ghost
   1980  f8c0							;==================================================================================
   1981  f8c0
   1982  f8c0				   SpriteGhostData
   1983  f8c0		       00		      .byte.b	#%00000000
   1984  f8c1		       00		      .byte.b	#%00000000
   1985  f8c2		       55		      .byte.b	#%01010101
   1986  f8c3		       55		      .byte.b	#%01010101
   1987  f8c4		       ff		      .byte.b	#%11111111
   1988  f8c5		       ff		      .byte.b	#%11111111
   1989  f8c6		       ff		      .byte.b	#%11111111
   1990  f8c7		       99		      .byte.b	#%10011001
   1991  f8c8		       99		      .byte.b	#%10011001
   1992  f8c9		       bb		      .byte.b	#%10111011
   1993  f8ca		       bb		      .byte.b	#%10111011
   1994  f8cb		       ff		      .byte.b	#%11111111
   1995  f8cc		       7e		      .byte.b	#%01111110
   1996  f8cd		       7e		      .byte.b	#%01111110
   1997  f8ce		       7e		      .byte.b	#%01111110
   1998  f8cf		       7e		      .byte.b	#%01111110
   1999  f8d0		       00		      .byte.b	#%00000000
   2000  f8d1		       00		      .byte.b	#%00000000
   2001  f8d2
   2002  f8d2							;==================================================================================
   2003  f8d2							; Sprite Data - Lives
   2004  f8d2							;==================================================================================
   2005  f8d2
   2006  f8d2				   SpriteLifeData
   2007  f8d2		       00		      .byte.b	#%00000000
   2008  f8d3		       00		      .byte.b	#%00000000
   2009  f8d4		       00		      .byte.b	#%00000000
   2010  f8d5		       00		      .byte.b	#%00000000
   2011  f8d6		       00		      .byte.b	#%00000000
   2012  f8d7		       00		      .byte.b	#%00000000
   2013  f8d8		       00		      .byte.b	#%00000000
   2014  f8d9		       00		      .byte.b	#%00000000
   2015  f8da		       00		      .byte.b	#%00000000
   2016  f8db		       00		      .byte.b	#%00000000
   2017  f8dc		       00		      .byte.b	#%00000000
   2018  f8dd		       00		      .byte.b	#%00000000
   2019  f8de		       00		      .byte.b	#%00000000
   2020  f8df		       00		      .byte.b	#%00000000
   2021  f8e0		       00		      .byte.b	#%00000000
   2022  f8e1		       00		      .byte.b	#%00000000
   2023  f8e2		       00		      .byte.b	#%00000000
   2024  f8e3		       00		      .byte.b	#%00000000
   2025  f8e4		       3c		      .byte.b	#%00111100
   2026  f8e5		       7e		      .byte.b	#%01111110
   2027  f8e6		       ff		      .byte.b	#%11111111
   2028  f8e7		       ff		      .byte.b	#%11111111
   2029  f8e8		       3f		      .byte.b	#%00111111
   2030  f8e9		       0f		      .byte.b	#%00001111
   2031  f8ea		       3f		      .byte.b	#%00111111
   2032  f8eb		       ff		      .byte.b	#%11111111
   2033  f8ec		       ff		      .byte.b	#%11111111
   2034  f8ed		       7e		      .byte.b	#%01111110
   2035  f8ee		       3c		      .byte.b	#%00111100
   2036  f8ef		       00		      .byte.b	#%00000000
   2037  f8f0
   2038  f8f0							;==================================================================================
   2039  f8f0							; free space check before page boundry
   2040  f8f0							;==================================================================================
   2041  f8f0
 End of Sprite0Data is:  $f8f0
   2042  f8f0					      echo	"End of Sprite0Data is: ", *
   2043  f900		       00 00 00 00*	      align	256
   2044  f900
   2045  f900							;==================================================================================
   2046  f900							; Board Data
   2047  f900							;==================================================================================
   2048  f900
------- FILE MainBoard.asm LEVEL 2 PASS 2
      0  f900					      include	"MainBoard.asm"
      1  f900				   MainBoard
      2  f900
      3  f900				   MainBoard_STRIP_0
      4  f900		       50		      .byte.b	80
      5  f901		       00		      .byte.b	0
      6  f902		       f0		      .byte.b	240
      7  f903		       f0		      .byte.b	240
      8  f904		       f0		      .byte.b	240
      9  f905		       10		      .byte.b	16
     10  f906		       10		      .byte.b	16
     11  f907		       10		      .byte.b	16
     12  f908		       10		      .byte.b	16
     13  f909		       10		      .byte.b	16
     14  f90a		       10		      .byte.b	16
     15  f90b		       10		      .byte.b	16
     16  f90c		       10		      .byte.b	16
     17  f90d		       10		      .byte.b	16
     18  f90e		       10		      .byte.b	16
     19  f90f		       10		      .byte.b	16
     20  f910		       10		      .byte.b	16
     21  f911		       10		      .byte.b	16
     22  f912		       10		      .byte.b	16
     23  f913		       10		      .byte.b	16
     24  f914		       10		      .byte.b	16
     25  f915		       10		      .byte.b	16
     26  f916		       10		      .byte.b	16
     27  f917		       10		      .byte.b	16
     28  f918		       10		      .byte.b	16
     29  f919		       10		      .byte.b	16
     30  f91a		       10		      .byte.b	16
     31  f91b		       10		      .byte.b	16
     32  f91c		       10		      .byte.b	16
     33  f91d		       10		      .byte.b	16
     34  f91e		       10		      .byte.b	16
     35  f91f		       10		      .byte.b	16
     36  f920		       10		      .byte.b	16
     37  f921		       10		      .byte.b	16
     38  f922		       10		      .byte.b	16
     39  f923		       10		      .byte.b	16
     40  f924		       10		      .byte.b	16
     41  f925		       10		      .byte.b	16
     42  f926		       10		      .byte.b	16
     43  f927		       10		      .byte.b	16
     44  f928		       10		      .byte.b	16
     45  f929		       10		      .byte.b	16
     46  f92a		       10		      .byte.b	16
     47  f92b		       10		      .byte.b	16
     48  f92c		       10		      .byte.b	16
     49  f92d		       10		      .byte.b	16
     50  f92e		       10		      .byte.b	16
     51  f92f		       10		      .byte.b	16
     52  f930		       10		      .byte.b	16
     53  f931		       10		      .byte.b	16
     54  f932		       10		      .byte.b	16
     55  f933		       10		      .byte.b	16
     56  f934		       10		      .byte.b	16
     57  f935		       10		      .byte.b	16
     58  f936		       10		      .byte.b	16
     59  f937		       10		      .byte.b	16
     60  f938		       10		      .byte.b	16
     61  f939		       f0		      .byte.b	240
     62  f93a		       f0		      .byte.b	240
     63  f93b		       f0		      .byte.b	240
     64  f93c		       f0		      .byte.b	240
     65  f93d		       80		      .byte.b	128
     66  f93e		       80		      .byte.b	128
     67  f93f		       80		      .byte.b	128
     68  f940		       80		      .byte.b	128
     69  f941		       80		      .byte.b	128
     70  f942		       80		      .byte.b	128
     71  f943		       80		      .byte.b	128
     72  f944		       80		      .byte.b	128
     73  f945		       80		      .byte.b	128
     74  f946		       80		      .byte.b	128
     75  f947		       80		      .byte.b	128
     76  f948		       80		      .byte.b	128
     77  f949		       80		      .byte.b	128
     78  f94a		       80		      .byte.b	128
     79  f94b		       80		      .byte.b	128
     80  f94c		       80		      .byte.b	128
     81  f94d		       80		      .byte.b	128
     82  f94e		       80		      .byte.b	128
     83  f94f		       80		      .byte.b	128
     84  f950		       80		      .byte.b	128
     85  f951		       f0		      .byte.b	240
     86  f952		       f0		      .byte.b	240
     87  f953		       f0		      .byte.b	240
     88  f954		       f0		      .byte.b	240
     89  f955		       00		      .byte.b	0
     90  f956		       00		      .byte.b	0
     91  f957		       00		      .byte.b	0
     92  f958		       00		      .byte.b	0
     93  f959		       00		      .byte.b	0
     94  f95a		       00		      .byte.b	0
     95  f95b		       00		      .byte.b	0
     96  f95c		       00		      .byte.b	0
     97  f95d		       00		      .byte.b	0
     98  f95e		       00		      .byte.b	0
     99  f95f		       00		      .byte.b	0
    100  f960		       00		      .byte.b	0
    101  f961		       00		      .byte.b	0
    102  f962		       00		      .byte.b	0
    103  f963		       00		      .byte.b	0
    104  f964		       00		      .byte.b	0
    105  f965		       00		      .byte.b	0
    106  f966		       00		      .byte.b	0
    107  f967		       00		      .byte.b	0
    108  f968		       00		      .byte.b	0
    109  f969		       00		      .byte.b	0
    110  f96a		       00		      .byte.b	0
    111  f96b		       f0		      .byte.b	240
    112  f96c		       f0		      .byte.b	240
    113  f96d		       f0		      .byte.b	240
    114  f96e		       80		      .byte.b	128
    115  f96f		       80		      .byte.b	128
    116  f970		       80		      .byte.b	128
    117  f971		       80		      .byte.b	128
    118  f972		       80		      .byte.b	128
    119  f973		       80		      .byte.b	128
    120  f974		       80		      .byte.b	128
    121  f975		       80		      .byte.b	128
    122  f976		       80		      .byte.b	128
    123  f977		       80		      .byte.b	128
    124  f978		       80		      .byte.b	128
    125  f979		       80		      .byte.b	128
    126  f97a		       80		      .byte.b	128
    127  f97b		       80		      .byte.b	128
    128  f97c		       80		      .byte.b	128
    129  f97d		       80		      .byte.b	128
    130  f97e		       80		      .byte.b	128
    131  f97f		       80		      .byte.b	128
    132  f980		       80		      .byte.b	128
    133  f981		       f0		      .byte.b	240
    134  f982		       f0		      .byte.b	240
    135  f983		       f0		      .byte.b	240
    136  f984		       f0		      .byte.b	240
    137  f985		       10		      .byte.b	16
    138  f986		       10		      .byte.b	16
    139  f987		       10		      .byte.b	16
    140  f988		       10		      .byte.b	16
    141  f989		       10		      .byte.b	16
    142  f98a		       10		      .byte.b	16
    143  f98b		       10		      .byte.b	16
    144  f98c		       10		      .byte.b	16
    145  f98d		       10		      .byte.b	16
    146  f98e		       10		      .byte.b	16
    147  f98f		       10		      .byte.b	16
    148  f990		       10		      .byte.b	16
    149  f991		       10		      .byte.b	16
    150  f992		       10		      .byte.b	16
    151  f993		       10		      .byte.b	16
    152  f994		       10		      .byte.b	16
    153  f995		       10		      .byte.b	16
    154  f996		       10		      .byte.b	16
    155  f997		       10		      .byte.b	16
    156  f998		       10		      .byte.b	16
    157  f999		       10		      .byte.b	16
    158  f99a		       10		      .byte.b	16
    159  f99b		       10		      .byte.b	16
    160  f99c		       10		      .byte.b	16
    161  f99d		       10		      .byte.b	16
    162  f99e		       10		      .byte.b	16
    163  f99f		       10		      .byte.b	16
    164  f9a0		       10		      .byte.b	16
    165  f9a1		       10		      .byte.b	16
    166  f9a2		       10		      .byte.b	16
    167  f9a3		       10		      .byte.b	16
    168  f9a4		       10		      .byte.b	16
    169  f9a5		       10		      .byte.b	16
    170  f9a6		       10		      .byte.b	16
    171  f9a7		       10		      .byte.b	16
    172  f9a8		       10		      .byte.b	16
    173  f9a9		       10		      .byte.b	16
    174  f9aa		       10		      .byte.b	16
    175  f9ab		       10		      .byte.b	16
    176  f9ac		       10		      .byte.b	16
    177  f9ad		       10		      .byte.b	16
    178  f9ae		       10		      .byte.b	16
    179  f9af		       10		      .byte.b	16
    180  f9b0		       10		      .byte.b	16
    181  f9b1		       10		      .byte.b	16
    182  f9b2		       10		      .byte.b	16
    183  f9b3		       10		      .byte.b	16
    184  f9b4		       10		      .byte.b	16
    185  f9b5		       10		      .byte.b	16
    186  f9b6		       10		      .byte.b	16
    187  f9b7		       10		      .byte.b	16
    188  f9b8		       10		      .byte.b	16
    189  f9b9		       10		      .byte.b	16
    190  f9ba		       f0		      .byte.b	240
    191  f9bb		       f0		      .byte.b	240
    192  f9bc		       f0		      .byte.b	240
    193  f9bd		       f0		      .byte.b	240
    194  f9be		       00		      .byte.b	0
    195  f9bf		       00		      .byte.b	0
    196  f9c0				   MainBoard_STRIP_1
    197  f9c0		       aa		      .byte.b	170
    198  f9c1		       00		      .byte.b	0
    199  f9c2		       ff		      .byte.b	255
    200  f9c3		       ff		      .byte.b	255
    201  f9c4		       ff		      .byte.b	255
    202  f9c5		       00		      .byte.b	0
    203  f9c6		       00		      .byte.b	0
    204  f9c7		       00		      .byte.b	0
    205  f9c8		       00		      .byte.b	0
    206  f9c9		       00		      .byte.b	0
    207  f9ca		       00		      .byte.b	0
    208  f9cb		       00		      .byte.b	0
    209  f9cc		       00		      .byte.b	0
    210  f9cd		       00		      .byte.b	0
    211  f9ce		       00		      .byte.b	0
    212  f9cf		       00		      .byte.b	0
    213  f9d0		       00		      .byte.b	0
    214  f9d1		       00		      .byte.b	0
    215  f9d2		       00		      .byte.b	0
    216  f9d3		       00		      .byte.b	0
    217  f9d4		       00		      .byte.b	0
    218  f9d5		       00		      .byte.b	0
    219  f9d6		       00		      .byte.b	0
    220  f9d7		       00		      .byte.b	0
    221  f9d8		       00		      .byte.b	0
    222  f9d9		       00		      .byte.b	0
    223  f9da		       00		      .byte.b	0
    224  f9db		       00		      .byte.b	0
    225  f9dc		       00		      .byte.b	0
    226  f9dd		       00		      .byte.b	0
    227  f9de		       00		      .byte.b	0
    228  f9df		       e3		      .byte.b	227
    229  f9e0		       e3		      .byte.b	227
    230  f9e1		       e3		      .byte.b	227
    231  f9e2		       e3		      .byte.b	227
    232  f9e3		       03		      .byte.b	3
    233  f9e4		       03		      .byte.b	3
    234  f9e5		       03		      .byte.b	3
    235  f9e6		       03		      .byte.b	3
    236  f9e7		       03		      .byte.b	3
    237  f9e8		       03		      .byte.b	3
    238  f9e9		       03		      .byte.b	3
    239  f9ea		       03		      .byte.b	3
    240  f9eb		       03		      .byte.b	3
    241  f9ec		       03		      .byte.b	3
    242  f9ed		       03		      .byte.b	3
    243  f9ee		       03		      .byte.b	3
    244  f9ef		       03		      .byte.b	3
    245  f9f0		       03		      .byte.b	3
    246  f9f1		       03		      .byte.b	3
    247  f9f2		       03		      .byte.b	3
    248  f9f3		       03		      .byte.b	3
    249  f9f4		       03		      .byte.b	3
    250  f9f5		       03		      .byte.b	3
    251  f9f6		       03		      .byte.b	3
    252  f9f7		       03		      .byte.b	3
    253  f9f8		       03		      .byte.b	3
    254  f9f9		       e3		      .byte.b	227
    255  f9fa		       e3		      .byte.b	227
    256  f9fb		       e3		      .byte.b	227
    257  f9fc		       e3		      .byte.b	227
    258  f9fd		       00		      .byte.b	0
    259  f9fe		       00		      .byte.b	0
    260  f9ff		       00		      .byte.b	0
    261  fa00		       00		      .byte.b	0
    262  fa01		       00		      .byte.b	0
    263  fa02		       00		      .byte.b	0
    264  fa03		       00		      .byte.b	0
    265  fa04		       00		      .byte.b	0
    266  fa05		       00		      .byte.b	0
    267  fa06		       00		      .byte.b	0
    268  fa07		       00		      .byte.b	0
    269  fa08		       00		      .byte.b	0
    270  fa09		       00		      .byte.b	0
    271  fa0a		       00		      .byte.b	0
    272  fa0b		       00		      .byte.b	0
    273  fa0c		       00		      .byte.b	0
    274  fa0d		       00		      .byte.b	0
    275  fa0e		       00		      .byte.b	0
    276  fa0f		       00		      .byte.b	0
    277  fa10		       00		      .byte.b	0
    278  fa11		       00		      .byte.b	0
    279  fa12		       1f		      .byte.b	31
    280  fa13		       1f		      .byte.b	31
    281  fa14		       1f		      .byte.b	31
    282  fa15		       00		      .byte.b	0
    283  fa16		       00		      .byte.b	0
    284  fa17		       00		      .byte.b	0
    285  fa18		       00		      .byte.b	0
    286  fa19		       00		      .byte.b	0
    287  fa1a		       00		      .byte.b	0
    288  fa1b		       00		      .byte.b	0
    289  fa1c		       00		      .byte.b	0
    290  fa1d		       00		      .byte.b	0
    291  fa1e		       00		      .byte.b	0
    292  fa1f		       00		      .byte.b	0
    293  fa20		       00		      .byte.b	0
    294  fa21		       00		      .byte.b	0
    295  fa22		       00		      .byte.b	0
    296  fa23		       00		      .byte.b	0
    297  fa24		       00		      .byte.b	0
    298  fa25		       00		      .byte.b	0
    299  fa26		       00		      .byte.b	0
    300  fa27		       00		      .byte.b	0
    301  fa28		       00		      .byte.b	0
    302  fa29		       00		      .byte.b	0
    303  fa2a		       00		      .byte.b	0
    304  fa2b		       1f		      .byte.b	31
    305  fa2c		       1f		      .byte.b	31
    306  fa2d		       00		      .byte.b	0
    307  fa2e		       00		      .byte.b	0
    308  fa2f		       00		      .byte.b	0
    309  fa30		       00		      .byte.b	0
    310  fa31		       00		      .byte.b	0
    311  fa32		       00		      .byte.b	0
    312  fa33		       00		      .byte.b	0
    313  fa34		       00		      .byte.b	0
    314  fa35		       00		      .byte.b	0
    315  fa36		       00		      .byte.b	0
    316  fa37		       00		      .byte.b	0
    317  fa38		       00		      .byte.b	0
    318  fa39		       00		      .byte.b	0
    319  fa3a		       00		      .byte.b	0
    320  fa3b		       00		      .byte.b	0
    321  fa3c		       00		      .byte.b	0
    322  fa3d		       00		      .byte.b	0
    323  fa3e		       00		      .byte.b	0
    324  fa3f		       00		      .byte.b	0
    325  fa40		       00		      .byte.b	0
    326  fa41		       00		      .byte.b	0
    327  fa42		       1f		      .byte.b	31
    328  fa43		       1f		      .byte.b	31
    329  fa44		       1f		      .byte.b	31
    330  fa45		       00		      .byte.b	0
    331  fa46		       00		      .byte.b	0
    332  fa47		       00		      .byte.b	0
    333  fa48		       00		      .byte.b	0
    334  fa49		       00		      .byte.b	0
    335  fa4a		       00		      .byte.b	0
    336  fa4b		       00		      .byte.b	0
    337  fa4c		       00		      .byte.b	0
    338  fa4d		       00		      .byte.b	0
    339  fa4e		       00		      .byte.b	0
    340  fa4f		       00		      .byte.b	0
    341  fa50		       00		      .byte.b	0
    342  fa51		       00		      .byte.b	0
    343  fa52		       00		      .byte.b	0
    344  fa53		       00		      .byte.b	0
    345  fa54		       00		      .byte.b	0
    346  fa55		       00		      .byte.b	0
    347  fa56		       00		      .byte.b	0
    348  fa57		       00		      .byte.b	0
    349  fa58		       00		      .byte.b	0
    350  fa59		       00		      .byte.b	0
    351  fa5a		       00		      .byte.b	0
    352  fa5b		       f8		      .byte.b	248
    353  fa5c		       f8		      .byte.b	248
    354  fa5d		       f8		      .byte.b	248
    355  fa5e		       f8		      .byte.b	248
    356  fa5f		       f8		      .byte.b	248
    357  fa60		       f8		      .byte.b	248
    358  fa61		       f8		      .byte.b	248
    359  fa62		       f8		      .byte.b	248
    360  fa63		       f8		      .byte.b	248
    361  fa64		       00		      .byte.b	0
    362  fa65		       00		      .byte.b	0
    363  fa66		       00		      .byte.b	0
    364  fa67		       00		      .byte.b	0
    365  fa68		       00		      .byte.b	0
    366  fa69		       00		      .byte.b	0
    367  fa6a		       00		      .byte.b	0
    368  fa6b		       00		      .byte.b	0
    369  fa6c		       00		      .byte.b	0
    370  fa6d		       00		      .byte.b	0
    371  fa6e		       00		      .byte.b	0
    372  fa6f		       00		      .byte.b	0
    373  fa70		       00		      .byte.b	0
    374  fa71		       00		      .byte.b	0
    375  fa72		       00		      .byte.b	0
    376  fa73		       00		      .byte.b	0
    377  fa74		       00		      .byte.b	0
    378  fa75		       00		      .byte.b	0
    379  fa76		       00		      .byte.b	0
    380  fa77		       00		      .byte.b	0
    381  fa78		       00		      .byte.b	0
    382  fa79		       00		      .byte.b	0
    383  fa7a		       ff		      .byte.b	255
    384  fa7b		       ff		      .byte.b	255
    385  fa7c		       ff		      .byte.b	255
    386  fa7d		       ff		      .byte.b	255
    387  fa7e		       00		      .byte.b	0
    388  fa7f		       00		      .byte.b	0
    389  fa80				   MainBoard_STRIP_2
    390  fa80		       00		      .byte.b	0
    391  fa81		       00		      .byte.b	0
    392  fa82		       ff		      .byte.b	255
    393  fa83		       ff		      .byte.b	255
    394  fa84		       ff		      .byte.b	255
    395  fa85		       80		      .byte.b	128
    396  fa86		       80		      .byte.b	128
    397  fa87		       80		      .byte.b	128
    398  fa88		       80		      .byte.b	128
    399  fa89		       80		      .byte.b	128
    400  fa8a		       80		      .byte.b	128
    401  fa8b		       80		      .byte.b	128
    402  fa8c		       80		      .byte.b	128
    403  fa8d		       80		      .byte.b	128
    404  fa8e		       80		      .byte.b	128
    405  fa8f		       80		      .byte.b	128
    406  fa90		       80		      .byte.b	128
    407  fa91		       80		      .byte.b	128
    408  fa92		       80		      .byte.b	128
    409  fa93		       80		      .byte.b	128
    410  fa94		       80		      .byte.b	128
    411  fa95		       80		      .byte.b	128
    412  fa96		       80		      .byte.b	128
    413  fa97		       80		      .byte.b	128
    414  fa98		       80		      .byte.b	128
    415  fa99		       80		      .byte.b	128
    416  fa9a		       80		      .byte.b	128
    417  fa9b		       80		      .byte.b	128
    418  fa9c		       80		      .byte.b	128
    419  fa9d		       80		      .byte.b	128
    420  fa9e		       80		      .byte.b	128
    421  fa9f		       8f		      .byte.b	143
    422  faa0		       8f		      .byte.b	143
    423  faa1		       8f		      .byte.b	143
    424  faa2		       8f		      .byte.b	143
    425  faa3		       01		      .byte.b	1
    426  faa4		       01		      .byte.b	1
    427  faa5		       01		      .byte.b	1
    428  faa6		       01		      .byte.b	1
    429  faa7		       01		      .byte.b	1
    430  faa8		       01		      .byte.b	1
    431  faa9		       01		      .byte.b	1
    432  faaa		       01		      .byte.b	1
    433  faab		       01		      .byte.b	1
    434  faac		       01		      .byte.b	1
    435  faad		       01		      .byte.b	1
    436  faae		       01		      .byte.b	1
    437  faaf		       01		      .byte.b	1
    438  fab0		       01		      .byte.b	1
    439  fab1		       01		      .byte.b	1
    440  fab2		       01		      .byte.b	1
    441  fab3		       01		      .byte.b	1
    442  fab4		       01		      .byte.b	1
    443  fab5		       01		      .byte.b	1
    444  fab6		       01		      .byte.b	1
    445  fab7		       01		      .byte.b	1
    446  fab8		       01		      .byte.b	1
    447  fab9		       e1		      .byte.b	225
    448  faba		       e1		      .byte.b	225
    449  fabb		       e1		      .byte.b	225
    450  fabc		       e1		      .byte.b	225
    451  fabd		       80		      .byte.b	128
    452  fabe		       80		      .byte.b	128
    453  fabf		       80		      .byte.b	128
    454  fac0		       80		      .byte.b	128
    455  fac1		       80		      .byte.b	128
    456  fac2		       80		      .byte.b	128
    457  fac3		       80		      .byte.b	128
    458  fac4		       80		      .byte.b	128
    459  fac5		       80		      .byte.b	128
    460  fac6		       80		      .byte.b	128
    461  fac7		       80		      .byte.b	128
    462  fac8		       80		      .byte.b	128
    463  fac9		       80		      .byte.b	128
    464  faca		       80		      .byte.b	128
    465  facb		       80		      .byte.b	128
    466  facc		       80		      .byte.b	128
    467  facd		       80		      .byte.b	128
    468  face		       80		      .byte.b	128
    469  facf		       80		      .byte.b	128
    470  fad0		       80		      .byte.b	128
    471  fad1		       80		      .byte.b	128
    472  fad2		       8f		      .byte.b	143
    473  fad3		       8f		      .byte.b	143
    474  fad4		       8f		      .byte.b	143
    475  fad5		       00		      .byte.b	0
    476  fad6		       00		      .byte.b	0
    477  fad7		       00		      .byte.b	0
    478  fad8		       00		      .byte.b	0
    479  fad9		       00		      .byte.b	0
    480  fada		       00		      .byte.b	0
    481  fadb		       00		      .byte.b	0
    482  fadc		       00		      .byte.b	0
    483  fadd		       00		      .byte.b	0
    484  fade		       00		      .byte.b	0
    485  fadf		       00		      .byte.b	0
    486  fae0		       00		      .byte.b	0
    487  fae1		       00		      .byte.b	0
    488  fae2		       00		      .byte.b	0
    489  fae3		       00		      .byte.b	0
    490  fae4		       00		      .byte.b	0
    491  fae5		       00		      .byte.b	0
    492  fae6		       00		      .byte.b	0
    493  fae7		       00		      .byte.b	0
    494  fae8		       00		      .byte.b	0
    495  fae9		       00		      .byte.b	0
    496  faea		       e0		      .byte.b	224
    497  faeb		       e3		      .byte.b	227
    498  faec		       e3		      .byte.b	227
    499  faed		       20		      .byte.b	32
    500  faee		       20		      .byte.b	32
    501  faef		       20		      .byte.b	32
    502  faf0		       20		      .byte.b	32
    503  faf1		       20		      .byte.b	32
    504  faf2		       20		      .byte.b	32
    505  faf3		       20		      .byte.b	32
    506  faf4		       20		      .byte.b	32
    507  faf5		       20		      .byte.b	32
    508  faf6		       20		      .byte.b	32
    509  faf7		       20		      .byte.b	32
    510  faf8		       20		      .byte.b	32
    511  faf9		       20		      .byte.b	32
    512  fafa		       20		      .byte.b	32
    513  fafb		       20		      .byte.b	32
    514  fafc		       20		      .byte.b	32
    515  fafd		       20		      .byte.b	32
    516  fafe		       20		      .byte.b	32
    517  faff		       20		      .byte.b	32
    518  fb00		       20		      .byte.b	32
    519  fb01		       20		      .byte.b	32
    520  fb02		       3f		      .byte.b	63
    521  fb03		       ff		      .byte.b	255
    522  fb04		       ff		      .byte.b	255
    523  fb05		       00		      .byte.b	0
    524  fb06		       00		      .byte.b	0
    525  fb07		       00		      .byte.b	0
    526  fb08		       00		      .byte.b	0
    527  fb09		       00		      .byte.b	0
    528  fb0a		       00		      .byte.b	0
    529  fb0b		       00		      .byte.b	0
    530  fb0c		       00		      .byte.b	0
    531  fb0d		       00		      .byte.b	0
    532  fb0e		       00		      .byte.b	0
    533  fb0f		       00		      .byte.b	0
    534  fb10		       00		      .byte.b	0
    535  fb11		       00		      .byte.b	0
    536  fb12		       00		      .byte.b	0
    537  fb13		       00		      .byte.b	0
    538  fb14		       00		      .byte.b	0
    539  fb15		       00		      .byte.b	0
    540  fb16		       00		      .byte.b	0
    541  fb17		       00		      .byte.b	0
    542  fb18		       00		      .byte.b	0
    543  fb19		       00		      .byte.b	0
    544  fb1a		       00		      .byte.b	0
    545  fb1b		       8f		      .byte.b	143
    546  fb1c		       8f		      .byte.b	143
    547  fb1d		       8f		      .byte.b	143
    548  fb1e		       8f		      .byte.b	143
    549  fb1f		       8f		      .byte.b	143
    550  fb20		       8f		      .byte.b	143
    551  fb21		       8f		      .byte.b	143
    552  fb22		       8f		      .byte.b	143
    553  fb23		       8f		      .byte.b	143
    554  fb24		       80		      .byte.b	128
    555  fb25		       80		      .byte.b	128
    556  fb26		       80		      .byte.b	128
    557  fb27		       80		      .byte.b	128
    558  fb28		       80		      .byte.b	128
    559  fb29		       80		      .byte.b	128
    560  fb2a		       80		      .byte.b	128
    561  fb2b		       80		      .byte.b	128
    562  fb2c		       80		      .byte.b	128
    563  fb2d		       80		      .byte.b	128
    564  fb2e		       80		      .byte.b	128
    565  fb2f		       80		      .byte.b	128
    566  fb30		       80		      .byte.b	128
    567  fb31		       80		      .byte.b	128
    568  fb32		       80		      .byte.b	128
    569  fb33		       80		      .byte.b	128
    570  fb34		       80		      .byte.b	128
    571  fb35		       80		      .byte.b	128
    572  fb36		       80		      .byte.b	128
    573  fb37		       80		      .byte.b	128
    574  fb38		       80		      .byte.b	128
    575  fb39		       80		      .byte.b	128
    576  fb3a		       ff		      .byte.b	255
    577  fb3b		       ff		      .byte.b	255
    578  fb3c		       ff		      .byte.b	255
    579  fb3d		       ff		      .byte.b	255
    580  fb3e		       00		      .byte.b	0
    581  fb3f		       00		      .byte.b	0
    582  fb40							;end
    583  fb40
------- FILE PacMan.asm
------- FILE GameOverMessage.asm LEVEL 2 PASS 2
      0  fb40					      include	"GameOverMessage.asm"
      1  fb40				   GameOverMessage
      2  fb40
      3  fb40				   GameOverMessage_STRIP_0
      4  fb40		       00		      .byte.b	0
      5  fb41		       00		      .byte.b	0
      6  fb42		       00		      .byte.b	0
      7  fb43		       00		      .byte.b	0
      8  fb44		       c0		      .byte.b	192
      9  fb45		       c0		      .byte.b	192
     10  fb46		       c0		      .byte.b	192
     11  fb47		       c0		      .byte.b	192
     12  fb48		       40		      .byte.b	64
     13  fb49		       40		      .byte.b	64
     14  fb4a		       40		      .byte.b	64
     15  fb4b		       40		      .byte.b	64
     16  fb4c		       40		      .byte.b	64
     17  fb4d		       40		      .byte.b	64
     18  fb4e		       40		      .byte.b	64
     19  fb4f		       40		      .byte.b	64
     20  fb50		       40		      .byte.b	64
     21  fb51		       40		      .byte.b	64
     22  fb52		       40		      .byte.b	64
     23  fb53		       40		      .byte.b	64
     24  fb54		       c0		      .byte.b	192
     25  fb55		       c0		      .byte.b	192
     26  fb56		       c0		      .byte.b	192
     27  fb57		       c0		      .byte.b	192
     28  fb58		       00		      .byte.b	0
     29  fb59		       00		      .byte.b	0
     30  fb5a		       00		      .byte.b	0
     31  fb5b		       e0		      .byte.b	224
     32  fb5c		       e0		      .byte.b	224
     33  fb5d		       e0		      .byte.b	224
     34  fb5e		       20		      .byte.b	32
     35  fb5f		       20		      .byte.b	32
     36  fb60		       20		      .byte.b	32
     37  fb61		       20		      .byte.b	32
     38  fb62		       a0		      .byte.b	160
     39  fb63		       a0		      .byte.b	160
     40  fb64		       a0		      .byte.b	160
     41  fb65		       a0		      .byte.b	160
     42  fb66		       20		      .byte.b	32
     43  fb67		       20		      .byte.b	32
     44  fb68		       20		      .byte.b	32
     45  fb69		       20		      .byte.b	32
     46  fb6a		       20		      .byte.b	32
     47  fb6b		       e0		      .byte.b	224
     48  fb6c		       e0		      .byte.b	224
     49  fb6d		       e0		      .byte.b	224
     50  fb6e		       e0		      .byte.b	224
     51  fb6f		       00		      .byte.b	0
     52  fb70		       00		      .byte.b	0
     53  fb71		       00		      .byte.b	0
     54  fb72				   GameOverMessage_STRIP_1
     55  fb72		       00		      .byte.b	0
     56  fb73		       00		      .byte.b	0
     57  fb74		       00		      .byte.b	0
     58  fb75		       00		      .byte.b	0
     59  fb76		       93		      .byte.b	147
     60  fb77		       93		      .byte.b	147
     61  fb78		       93		      .byte.b	147
     62  fb79		       ba		      .byte.b	186
     63  fb7a		       ba		      .byte.b	186
     64  fb7b		       ba		      .byte.b	186
     65  fb7c		       ba		      .byte.b	186
     66  fb7d		       ba		      .byte.b	186
     67  fb7e		       bb		      .byte.b	187
     68  fb7f		       ab		      .byte.b	171
     69  fb80		       ab		      .byte.b	171
     70  fb81		       aa		      .byte.b	170
     71  fb82		       aa		      .byte.b	170
     72  fb83		       aa		      .byte.b	170
     73  fb84		       aa		      .byte.b	170
     74  fb85		       aa		      .byte.b	170
     75  fb86		       ab		      .byte.b	171
     76  fb87		       ab		      .byte.b	171
     77  fb88		       ab		      .byte.b	171
     78  fb89		       ab		      .byte.b	171
     79  fb8a		       00		      .byte.b	0
     80  fb8b		       00		      .byte.b	0
     81  fb8c		       00		      .byte.b	0
     82  fb8d		       aa		      .byte.b	170
     83  fb8e		       aa		      .byte.b	170
     84  fb8f		       aa		      .byte.b	170
     85  fb90		       aa		      .byte.b	170
     86  fb91		       aa		      .byte.b	170
     87  fb92		       aa		      .byte.b	170
     88  fb93		       aa		      .byte.b	170
     89  fb94		       ba		      .byte.b	186
     90  fb95		       ba		      .byte.b	186
     91  fb96		       ba		      .byte.b	186
     92  fb97		       ba		      .byte.b	186
     93  fb98		       2a		      .byte.b	42
     94  fb99		       2a		      .byte.b	42
     95  fb9a		       2a		      .byte.b	42
     96  fb9b		       2a		      .byte.b	42
     97  fb9c		       2a		      .byte.b	42
     98  fb9d		       bb		      .byte.b	187
     99  fb9e		       bb		      .byte.b	187
    100  fb9f		       bb		      .byte.b	187
    101  fba0		       bb		      .byte.b	187
    102  fba1		       00		      .byte.b	0
    103  fba2		       00		      .byte.b	0
    104  fba3		       00		      .byte.b	0
    105  fba4				   GameOverMessage_STRIP_2
    106  fba4		       00		      .byte.b	0
    107  fba5		       00		      .byte.b	0
    108  fba6		       00		      .byte.b	0
    109  fba7		       00		      .byte.b	0
    110  fba8		       15		      .byte.b	21
    111  fba9		       15		      .byte.b	21
    112  fbaa		       15		      .byte.b	21
    113  fbab		       14		      .byte.b	20
    114  fbac		       14		      .byte.b	20
    115  fbad		       14		      .byte.b	20
    116  fbae		       0c		      .byte.b	12
    117  fbaf		       0c		      .byte.b	12
    118  fbb0		       0c		      .byte.b	12
    119  fbb1		       0c		      .byte.b	12
    120  fbb2		       1c		      .byte.b	28
    121  fbb3		       14		      .byte.b	20
    122  fbb4		       14		      .byte.b	20
    123  fbb5		       14		      .byte.b	20
    124  fbb6		       14		      .byte.b	20
    125  fbb7		       14		      .byte.b	20
    126  fbb8		       1d		      .byte.b	29
    127  fbb9		       1d		      .byte.b	29
    128  fbba		       1d		      .byte.b	29
    129  fbbb		       1d		      .byte.b	29
    130  fbbc		       00		      .byte.b	0
    131  fbbd		       00		      .byte.b	0
    132  fbbe		       00		      .byte.b	0
    133  fbbf		       74		      .byte.b	116
    134  fbc0		       74		      .byte.b	116
    135  fbc1		       74		      .byte.b	116
    136  fbc2		       14		      .byte.b	20
    137  fbc3		       14		      .byte.b	20
    138  fbc4		       14		      .byte.b	20
    139  fbc5		       14		      .byte.b	20
    140  fbc6		       14		      .byte.b	20
    141  fbc7		       35		      .byte.b	53
    142  fbc8		       35		      .byte.b	53
    143  fbc9		       35		      .byte.b	53
    144  fbca		       15		      .byte.b	21
    145  fbcb		       15		      .byte.b	21
    146  fbcc		       15		      .byte.b	21
    147  fbcd		       15		      .byte.b	21
    148  fbce		       15		      .byte.b	21
    149  fbcf		       77		      .byte.b	119
    150  fbd0		       77		      .byte.b	119
    151  fbd1		       77		      .byte.b	119
    152  fbd2		       77		      .byte.b	119
    153  fbd3		       00		      .byte.b	0
    154  fbd4		       00		      .byte.b	0
    155  fbd5		       00		      .byte.b	0
    156  fbd6							;end
    157  fbd6
------- FILE PacMan.asm
   2051  fbd6
   2052  fbd6							;===============================================================================
   2053  fbd6							; free space check before page boundry
   2054  fbd6							;===============================================================================
   2055  fbd6
 End of MainBoard.asm is:  $fbd6
   2056  fbd6					      echo	"End of MainBoard.asm is: ", *
   2057  fc00		       00 00 00 00*	      align	256
   2058  fc00
   2059  fc00							;==================================================================================
   2060  fc00							; Bottom Data
   2061  fc00							;==================================================================================
   2062  fc00
   2063  fc00				   BottomData
   2064  fc00
   2065  fc00							; 0
   2066  fc00		       00		      .byte.b	%00000000
   2067  fc01		       7e		      .byte.b	%01111110
   2068  fc02		       7e		      .byte.b	%01111110
   2069  fc03		       e7		      .byte.b	%11100111
   2070  fc04		       e7		      .byte.b	%11100111
   2071  fc05		       c3		      .byte.b	%11000011
   2072  fc06		       c3		      .byte.b	%11000011
   2073  fc07		       c3		      .byte.b	%11000011
   2074  fc08		       c3		      .byte.b	%11000011
   2075  fc09		       c3		      .byte.b	%11000011
   2076  fc0a		       e7		      .byte.b	%11100111
   2077  fc0b		       e7		      .byte.b	%11100111
   2078  fc0c		       7e		      .byte.b	%01111110
   2079  fc0d		       7e		      .byte.b	%01111110
   2080  fc0e
   2081  fc0e							; 1
   2082  fc0e		       00		      .byte.b	%00000000
   2083  fc0f		       ff		      .byte.b	%11111111
   2084  fc10		       ff		      .byte.b	%11111111
   2085  fc11		       1c		      .byte.b	%00011100
   2086  fc12		       1c		      .byte.b	%00011100
   2087  fc13		       1c		      .byte.b	%00011100
   2088  fc14		       1c		      .byte.b	%00011100
   2089  fc15		       1c		      .byte.b	%00011100
   2090  fc16		       1c		      .byte.b	%00011100
   2091  fc17		       1c		      .byte.b	%00011100
   2092  fc18		       fc		      .byte.b	%11111100
   2093  fc19		       7c		      .byte.b	%01111100
   2094  fc1a		       3c		      .byte.b	%00111100
   2095  fc1b		       1c		      .byte.b	%00011100
   2096  fc1c
   2097  fc1c							; 2
   2098  fc1c		       00		      .byte.b	%00000000
   2099  fc1d		       ff		      .byte.b	%11111111
   2100  fc1e		       ff		      .byte.b	%11111111
   2101  fc1f		       e0		      .byte.b	%11100000
   2102  fc20		       e0		      .byte.b	%11100000
   2103  fc21		       38		      .byte.b	%00111000
   2104  fc22		       0e		      .byte.b	%00001110
   2105  fc23		       07		      .byte.b	%00000111
   2106  fc24		       03		      .byte.b	%00000011
   2107  fc25		       c3		      .byte.b	%11000011
   2108  fc26		       c3		      .byte.b	%11000011
   2109  fc27		       e7		      .byte.b	%11100111
   2110  fc28		       7e		      .byte.b	%01111110
   2111  fc29		       3c		      .byte.b	%00111100
   2112  fc2a
   2113  fc2a							; 3
   2114  fc2a		       00		      .byte.b	%00000000
   2115  fc2b		       3c		      .byte.b	%00111100
   2116  fc2c		       7e		      .byte.b	%01111110
   2117  fc2d		       ef		      .byte.b	%11101111
   2118  fc2e		       c7		      .byte.b	%11000111
   2119  fc2f		       07		      .byte.b	%00000111
   2120  fc30		       0e		      .byte.b	%00001110
   2121  fc31		       1c		      .byte.b	%00011100
   2122  fc32		       0e		      .byte.b	%00001110
   2123  fc33		       07		      .byte.b	%00000111
   2124  fc34		       c7		      .byte.b	%11000111
   2125  fc35		       ef		      .byte.b	%11101111
   2126  fc36		       7e		      .byte.b	%01111110
   2127  fc37		       3c		      .byte.b	%00111100
   2128  fc38
   2129  fc38							; 4
   2130  fc38		       00		      .byte.b	%00000000
   2131  fc39		       06		      .byte.b	%00000110
   2132  fc3a		       06		      .byte.b	%00000110
   2133  fc3b		       ff		      .byte.b	%11111111
   2134  fc3c		       ff		      .byte.b	%11111111
   2135  fc3d		       c6		      .byte.b	%11000110
   2136  fc3e		       c6		      .byte.b	%11000110
   2137  fc3f		       66		      .byte.b	%01100110
   2138  fc40		       66		      .byte.b	%01100110
   2139  fc41		       36		      .byte.b	%00110110
   2140  fc42		       36		      .byte.b	%00110110
   2141  fc43		       1e		      .byte.b	%00011110
   2142  fc44		       0e		      .byte.b	%00001110
   2143  fc45		       0e		      .byte.b	%00001110
   2144  fc46
   2145  fc46							; 5
   2146  fc46		       00		      .byte.b	%00000000
   2147  fc47		       fc		      .byte.b	%11111100
   2148  fc48		       fe		      .byte.b	%11111110
   2149  fc49		       0f		      .byte.b	%00001111
   2150  fc4a		       07		      .byte.b	%00000111
   2151  fc4b		       07		      .byte.b	%00000111
   2152  fc4c		       0f		      .byte.b	%00001111
   2153  fc4d		       fe		      .byte.b	%11111110
   2154  fc4e		       fc		      .byte.b	%11111100
   2155  fc4f		       e0		      .byte.b	%11100000
   2156  fc50		       e0		      .byte.b	%11100000
   2157  fc51		       e0		      .byte.b	%11100000
   2158  fc52		       ff		      .byte.b	%11111111
   2159  fc53		       ff		      .byte.b	%11111111
   2160  fc54
   2161  fc54							; 6
   2162  fc54		       00		      .byte.b	%00000000
   2163  fc55		       3c		      .byte.b	%00111100
   2164  fc56		       7e		      .byte.b	%01111110
   2165  fc57		       e7		      .byte.b	%11100111
   2166  fc58		       c3		      .byte.b	%11000011
   2167  fc59		       c3		      .byte.b	%11000011
   2168  fc5a		       e7		      .byte.b	%11100111
   2169  fc5b		       fe		      .byte.b	%11111110
   2170  fc5c		       fc		      .byte.b	%11111100
   2171  fc5d		       c0		      .byte.b	%11000000
   2172  fc5e		       c3		      .byte.b	%11000011
   2173  fc5f		       e7		      .byte.b	%11100111
   2174  fc60		       ff		      .byte.b	%11111111
   2175  fc61		       7e		      .byte.b	%01111110
   2176  fc62
   2177  fc62							; 7
   2178  fc62		       00		      .byte.b	%00000000
   2179  fc63		       18		      .byte.b	%00011000
   2180  fc64		       18		      .byte.b	%00011000
   2181  fc65		       18		      .byte.b	%00011000
   2182  fc66		       18		      .byte.b	%00011000
   2183  fc67		       18		      .byte.b	%00011000
   2184  fc68		       0c		      .byte.b	%00001100
   2185  fc69		       0c		      .byte.b	%00001100
   2186  fc6a		       0c		      .byte.b	%00001100
   2187  fc6b		       c6		      .byte.b	%11000110
   2188  fc6c		       c7		      .byte.b	%11000111
   2189  fc6d		       ff		      .byte.b	%11111111
   2190  fc6e		       ff		      .byte.b	%11111111
   2191  fc6f		       ff		      .byte.b	%11111111
   2192  fc70
   2193  fc70							; 8
   2194  fc70		       00		      .byte.b	%00000000
   2195  fc71		       3c		      .byte.b	%00111100
   2196  fc72		       7e		      .byte.b	%01111110
   2197  fc73		       e7		      .byte.b	%11100111
   2198  fc74		       c3		      .byte.b	%11000011
   2199  fc75		       c3		      .byte.b	%11000011
   2200  fc76		       e7		      .byte.b	%11100111
   2201  fc77		       7e		      .byte.b	%01111110
   2202  fc78		       3c		      .byte.b	%00111100
   2203  fc79		       66		      .byte.b	%01100110
   2204  fc7a		       c3		      .byte.b	%11000011
   2205  fc7b		       e7		      .byte.b	%11100111
   2206  fc7c		       7e		      .byte.b	%01111110
   2207  fc7d		       3c		      .byte.b	%00111100
   2208  fc7e
   2209  fc7e							; 9
   2210  fc7e		       00		      .byte.b	%00000000
   2211  fc7f		       3c		      .byte.b	%00111100
   2212  fc80		       7e		      .byte.b	%01111110
   2213  fc81		       e7		      .byte.b	%11100111
   2214  fc82		       c3		      .byte.b	%11000011
   2215  fc83		       03		      .byte.b	%00000011
   2216  fc84		       3f		      .byte.b	%00111111
   2217  fc85		       7f		      .byte.b	%01111111
   2218  fc86		       e7		      .byte.b	%11100111
   2219  fc87		       c3		      .byte.b	%11000011
   2220  fc88		       c3		      .byte.b	%11000011
   2221  fc89		       e7		      .byte.b	%11100111
   2222  fc8a		       7e		      .byte.b	%01111110
   2223  fc8b		       3c		      .byte.b	%00111100
   2224  fc8c
   2225  fc8c							;==================================================================================
   2226  fc8c							; Interrupt Routines
   2227  fc8c							;==================================================================================
   2228  fc8c
   2229  10000 ????				       SEG	Interrupt
   2230  fffa					      ORG	$FFFA
   2231  fffa
   2232  fffa				   InterruptVectors
   2233  fffa		       00 f0		      .word.w	Reset
   2234  fffc		       00 f0		      .word.w	Reset
   2235  fffe		       00 f0		      .word.w	Reset
   2236  10000
   2237  10000					       END
