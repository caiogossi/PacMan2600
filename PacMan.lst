------- FILE PacMan.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE PacMan.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE PacMan.asm
      4  0000 ????
      5  0000 ????						;==================================================================================
      6  0000 ????						; Program Definitions
      7  0000 ????						;==================================================================================
      8  0000 ????
      9  0000 ????	       00 12	   SPRITE_HEIGHT =	18
     10  0000 ????	       00 05	   TIMER_LIMIT1 =	5
     11  0000 ????	       00 14	   TIMER_LIMIT2 =	20
     12  0000 ????
     13  0000 ????						;==================================================================================
     14  0000 ????						; Program Variables
     15  0000 ????						;==================================================================================
     16  0000 ????
     17 U00a6 ????				      SEG.U	Variables
     18 U0080					      ORG	$80
     19 U0080
     20 U0080		       00	   PS_temp    ds	1
     21 U0081
     22 U0081		       00 00	   SpriteAddrPtr ds	2
     23 U0083		       00	   SpriteXPos ds	1
     24 U0084		       00	   SpriteYPos ds	1
     25 U0085		       00	   LastSpriteXPos ds	1
     26 U0086		       00	   LastSpriteYPos ds	1
     27 U0087		       00	   PlayerVelocityMask ds	1
     28 U0088
     29 U0088		       00 00	   SpriteGhostAddrPtr ds	2
     30 U008a		       00	   GhostSpriteXPos ds	1
     31 U008b		       00	   GhostSpriteYPos ds	1
     32 U008c
     33 U008c		       00	   CurWaferXPos0 ds	1
     34 U008d		       00	   WaferXPosIndex ds	1
     35 U008e		       00 00 00 00*WaferArray ds	6
     36 U0094		       00	   PickedUpWaferBuffer ds	1
     37 U0095
     38 U0095		       00	   SpriteAnimationIndex ds	1
     39 U0096		       00	   IsFrameGoingUp ds	1
     40 U0097
     41 U0097		       00	   ScoreHundreds ds	1
     42 U0098		       00	   ScoreTens  ds	1
     43 U0099		       00	   ScoreOnes  ds	1
     44 U009a
     45 U009a		       00	   HundredsOffset ds	1
     46 U009b		       00	   TensOffset ds	1
     47 U009c		       00	   OnesOffset ds	1
     48 U009d
     49 U009d		       00	   ScoreDisplayBufferHundreds ds	1
     50 U009e		       00	   ScoreDisplayBufferTens ds	1
     51 U009f		       00	   ScoreDisplayBufferOnes ds	1
     52 U00a0
     53 U00a0		       00	   TimerCounter5 ds	1
     54 U00a1		       00	   TimerCounter20 ds	1
     55 U00a2
     56 U00a2		       00	   PlayerReflectedBuffer ds	1
     57 U00a3		       00	   GhostReflectedBuffer ds	1
     58 U00a4
     59 U00a4		       00	   LifeCount  ds	1
     60 U00a5		       00	   IsPlayingDeathAnimation ds	1
     61 U00a6
     62 U00a6							;==================================================================================
     63 U00a6							; Program Initialization
     64 U00a6							;==================================================================================
     65 U00a6
     66  fa8c ????				      SEG	Executable
     67  f000					      ORG	$F000
     68  f000
     69  f000				   Reset
     70  f000				   ClearMemory
     71  f000		       a2 00		      LDX	#0
     72  f002		       9a		      TXS
     73  f003		       48		      PHA
     74  f004		       8a		      TXA
     75  f005
     76  f005				   ClearMemoryLoop
     77  f005		       48		      PHA
     78  f006		       ca		      DEX
     79  f007		       d0 fc		      BNE	ClearMemoryLoop
     80  f009
     81  f009		       20 58 f1 	      JSR	InitVariables
     82  f00c
     83  f00c							;==================================================================================
     84  f00c							; Main Loop
     85  f00c							;==================================================================================
     86  f00c
     87  f00c				   Main
     88  f00c		       20 1b f0 	      JSR	HandleVSync
     89  f00f		       20 2a f0 	      JSR	HandleVBlank
     90  f012		       20 48 f0 	      JSR	MainKernel
     91  f015		       20 dd f0 	      JSR	Overscan
     92  f018		       4c 0c f0 	      JMP	Main
     93  f01b
     94  f01b							;==================================================================================
     95  f01b							; HandleVSync
     96  f01b							;==================================================================================
     97  f01b
     98  f01b				   HandleVSync
     99  f01b		       a9 00		      LDA	#0
    100  f01d		       85 01		      STA	VBLANK
    101  f01f		       a9 02		      LDA	#2
    102  f021		       85 00		      STA	VSYNC
    103  f023
    104  f023				   VSyncLoop
    105  f023		       85 02		      STA	WSYNC
    106  f025		       85 02		      STA	WSYNC
    107  f027		       85 02		      STA	WSYNC
    108  f029
    109  f029		       60		      RTS
    110  f02a
    111  f02a							;==================================================================================
    112  f02a							; HandleVBlank
    113  f02a							; Handle Part of Game Logic
    114  f02a							;==================================================================================
    115  f02a
    116  f02a				   HandleVBlank
    117  f02a
    118  f02a							; Initialize TIM64T
    119  f02a		       a9 2a		      LDA	#42
    120  f02c		       8d 96 02 	      STA	TIM64T
    121  f02f
    122  f02f							; Prepare Registers for VBLANK
    123  f02f		       a9 00		      LDA	#0
    124  f031		       85 00		      STA	VSYNC
    125  f033		       a9 42		      LDA	#%01000010
    126  f035		       85 01		      STA	VBLANK
    127  f037
    128  f037							; Processing Tasks
    129  f037		       20 39 f4 	      JSR	GetControllerInputs
    130  f03a		       20 7b f4 	      JSR	GetController2InputsDEBUG
    131  f03d		       20 50 f2 	      JSR	UpdateEntities
    132  f040
    133  f040				   VBlankLoop
    134  f040		       ad 84 02 	      LDA	INTIM
    135  f043		       d0 fb		      BNE	VBlankLoop
    136  f045
    137  f045		       85 02		      STA	WSYNC
    138  f047		       60		      RTS
    139  f048
    140  f048							;==================================================================================
    141  f048							; MainKernel
    142  f048							;==================================================================================
    143  f048
    144  f048				   MainKernel
    145  f048		       a9 00		      LDA	#0
    146  f04a		       85 01		      STA	VBLANK
    147  f04c
    148  f04c							; Position Player and Ghost According to XPos
    149  f04c		       20 ac f1 	      JSR	PositionSpriteX
    150  f04f		       20 e1 f1 	      JSR	PositionGhostSpriteX
    151  f052
    152  f052							; Position Wafer in XPos
    153  f052		       20 1b f2 	      JSR	PositionWaferX0
    154  f055
    155  f055		       a2 bf		      LDX	#191
    156  f057		       85 02		      STA	WSYNC
    157  f059
    158  f059				   MainFrameLoop
    159  f059							; First Line
    160  f059							; Load First Playfield
    161  f059		       bd 00 f7 	      LDA	MainBoard_STRIP_0,x	; 4  4   0
    162  f05c		       85 0d		      STA	PF0	; 3  7   12
    163  f05e
    164  f05e		       bd c0 f7 	      LDA	MainBoard_STRIP_1,x	; 4  11   33
    165  f061		       85 0e		      STA	PF1	; 3  14   42
    166  f063
    167  f063		       bd 80 f8 	      LDA	MainBoard_STRIP_2,x	; 4  18
    168  f066		       85 0f		      STA	PF2	; 3  21
    169  f068
    170  f068							; Check if line has wafer
    171  f068		       bd 1f f5 	      LDA	CheckLineBytes,x
    172  f06b		       f0 14		      BEQ	DoNotDrawWafer
    173  f06d
    174  f06d				   CheckIfWaferCollected
    175  f06d							; Verify if wafer is picked up
    176  f06d		       a4 8d		      LDY	WaferXPosIndex
    177  f06f		       b9 8e 00 	      LDA	WaferArray,y
    178  f072
    179  f072		       bc 1f f5 	      LDY	CheckLineBytes,x
    180  f075		       39 08 f5 	      AND	FindWaferLookUp,y
    181  f078		       d0 07		      BNE	DoNotDrawWafer
    182  f07a
    183  f07a							; Draw wafer
    184  f07a		       a9 02		      LDA	#%10
    185  f07c		       85 1d		      STA	ENAM0
    186  f07e		       4c 85 f0 	      JMP	AfterDrawing
    187  f081
    188  f081				   DoNotDrawWafer
    189  f081		       a9 00		      LDA	#0
    190  f083		       85 1d		      STA	ENAM0
    191  f085
    192  f085				   AfterDrawing
    193  f085							; Check Vertical Sprite (P0) Drawing
    194  f085		       8a		      TXA		; 2
    195  f086		       38		      SEC		; 2
    196  f087		       e5 84		      SBC	SpriteYPos	; 3
    197  f089		       69 12		      ADC	#SPRITE_HEIGHT	; 2
    198  f08b		       90 05		      BCC	SkipDrawingP0	; 3
    199  f08d
    200  f08d							; Load P0 Sprite Data
    201  f08d		       a8		      TAY		; 3
    202  f08e		       b1 81		      LDA	(SpriteAddrPtr),y	; 5
    203  f090		       85 1b		      STA	GRP0	; 3
    204  f092
    205  f092				   SkipDrawingP0
    206  f092							; Decrease X and Go To Next Line
    207  f092		       85 02		      STA	WSYNC	; 3
    208  f094		       ca		      DEX		; 2
    209  f095		       f0 39		      BEQ	MainFrameLoopEnd	; 2 
    210  f097
    211  f097							; Second Line
    212  f097
    213  f097							; Load First Playfield
    214  f097		       bd 00 f7 	      LDA	MainBoard_STRIP_0,x	; 4
    215  f09a		       85 0d		      STA	PF0	; 3
    216  f09c
    217  f09c		       bd c0 f7 	      LDA	MainBoard_STRIP_1,x	; 4
    218  f09f		       85 0e		      STA	PF1	; 3
    219  f0a1
    220  f0a1		       bd 80 f8 	      LDA	MainBoard_STRIP_2,x	; 4
    221  f0a4		       85 0f		      STA	PF2	; 3
    222  f0a6
    223  f0a6							; Check Collision Between Player and Wafer
    224  f0a6		       24 00		      BIT	CXM0P
    225  f0a8		       50 14		      BVC	DidntGetWafer
    226  f0aa
    227  f0aa				   GotWafer
    228  f0aa							; Routine to save wafer as picked up
    229  f0aa		       a4 8d		      LDY	WaferXPosIndex
    230  f0ac		       b9 8e 00 	      LDA	WaferArray,y
    231  f0af
    232  f0af		       bc 1f f5 	      LDY	CheckLineBytes,x
    233  f0b2
    234  f0b2							; Mark Wafer Picked Up for Frame
    235  f0b2		       19 08 f5 	      ORA	FindWaferLookUp,y
    236  f0b5
    237  f0b5		       a4 8d		      LDY	WaferXPosIndex
    238  f0b7		       99 8e 00 	      STA	WaferArray,y
    239  f0ba
    240  f0ba							; Reset Collision Detection
    241  f0ba		       85 94		      STA	PickedUpWaferBuffer
    242  f0bc		       85 2c		      STA	CXCLR
    243  f0be
    244  f0be				   DidntGetWafer
    245  f0be							; Check Ghost Vertical Drawing
    246  f0be		       8a		      TXA		; 2
    247  f0bf		       38		      SEC		; 2
    248  f0c0		       e5 8b		      SBC	GhostSpriteYPos	; 3
    249  f0c2		       69 12		      ADC	#SPRITE_HEIGHT	; 2
    250  f0c4		       90 05		      BCC	SkipGhostDrawing	; 3
    251  f0c6
    252  f0c6							; Load Ghost Sprite Data
    253  f0c6		       a8		      TAY		; 3
    254  f0c7		       b1 88		      LDA	(SpriteGhostAddrPtr),y	; 5
    255  f0c9		       85 1c		      STA	GRP1	; 3
    256  f0cb
    257  f0cb				   SkipGhostDrawing
    258  f0cb							; Decrease X and Go To Next Line
    259  f0cb		       85 02		      STA	WSYNC	; 3
    260  f0cd		       ca		      DEX		; 2
    261  f0ce		       d0 89		      BNE	MainFrameLoop	; 2
    262  f0d0
    263  f0d0				   MainFrameLoopEnd
    264  f0d0							; Clearing Playfield Registers
    265  f0d0		       a9 00		      LDA	#0
    266  f0d2		       85 0d		      STA	PF0
    267  f0d4		       85 0e		      STA	PF1
    268  f0d6		       85 0f		      STA	PF2
    269  f0d8
    270  f0d8		       85 1b		      STA	GRP0
    271  f0da		       85 1c		      STA	GRP1
    272  f0dc
    273  f0dc		       60		      RTS
    274  f0dd
    275  f0dd							;==================================================================================
    276  f0dd							; Overscan
    277  f0dd							;==================================================================================
    278  f0dd
    279  f0dd				   Overscan
    280  f0dd
    281  f0dd							; Prepare Registers for Overscan Drawing
    282  f0dd		       a9 00		      LDA	#0
    283  f0df		       85 0b		      STA	REFP0
    284  f0e1		       85 0c		      STA	REFP1
    285  f0e3
    286  f0e3		       a9 0e		      LDA	#$0E
    287  f0e5		       85 07		      STA	COLUP1
    288  f0e7
    289  f0e7		       a9 03		      LDA	#%011
    290  f0e9
    291  f0e9							; Triplicate P1 (Score)
    292  f0e9		       85 05		      STA	NUSIZ1
    293  f0eb
    294  f0eb							; Select Ammount of Icons According to LifeCount
    295  f0eb		       a4 a4		      LDY	LifeCount
    296  f0ed
    297  f0ed							; Select position of Score
    298  f0ed		       85 11		      STA	RESP1
    299  f0ef
    300  f0ef		       b9 1b f5 	      LDA	LivesNUSIZ0LookUp,y
    301  f0f2		       85 04		      STA	NUSIZ0
    302  f0f4
    303  f0f4							; Calculate Hundreds Offset
    304  f0f4		       a6 97		      LDX	ScoreHundreds
    305  f0f6		       bd 10 f5 	      LDA	MultBy14,x
    306  f0f9		       85 9a		      STA	HundredsOffset
    307  f0fb
    308  f0fb							; Calculate Tens Offset
    309  f0fb		       a6 98		      LDX	ScoreTens
    310  f0fd		       bd 10 f5 	      LDA	MultBy14,x
    311  f100		       85 9b		      STA	TensOffset
    312  f102
    313  f102							; Calculate Ones Offset
    314  f102		       a6 99		      LDX	ScoreOnes
    315  f104		       bd 10 f5 	      LDA	MultBy14,x
    316  f107		       85 9c		      STA	OnesOffset
    317  f109
    318  f109		       85 02		      STA	WSYNC
    319  f10b
    320  f10b							; Select position of Lives
    321  f10b		       85 10		      STA	RESP0
    322  f10d
    323  f10d		       a2 1d		      LDX	#29
    324  f10f				   OverscanLoop
    325  f10f
    326  f10f							; Is it time to draw?
    327  f10f		       e0 10		      CPX	#16
    328  f111		       90 27		      BCC	SmallerThan16
    329  f113
    330  f113				   BiggerThan16
    331  f113							; Time to draw
    332  f113
    333  f113							; Draw Lives
    334  f113		       bd c2 f6 	      LDA	SpriteLifeData,x
    335  f116		       85 1b		      STA	GRP0
    336  f118
    337  f118							; Prepare draw bits for hundreds
    338  f118		       18		      CLC
    339  f119		       8a		      TXA
    340  f11a		       65 9a		      ADC	HundredsOffset
    341  f11c		       a8		      TAY
    342  f11d		       b9 00 fa 	      LDA	BottomData,y
    343  f120		       85 1c		      STA	GRP1
    344  f122
    345  f122							; Prepare draw bits for ones
    346  f122		       18		      CLC
    347  f123		       8a		      TXA
    348  f124		       65 9c		      ADC	OnesOffset
    349  f126		       a8		      TAY
    350  f127		       b9 00 fa 	      LDA	BottomData,y
    351  f12a		       85 9f		      STA	ScoreDisplayBufferOnes
    352  f12c
    353  f12c							; Prepare draw bits for tens
    354  f12c		       18		      CLC
    355  f12d		       8a		      TXA
    356  f12e		       65 9b		      ADC	TensOffset
    357  f130		       a8		      TAY
    358  f131		       b9 00 fa 	      LDA	BottomData,y
    359  f134
    360  f134							; Draw Tens
    361  f134		       85 1c		      STA	GRP1
    362  f136
    363  f136							; Draw Ones
    364  f136		       a5 9f		      LDA	ScoreDisplayBufferOnes
    365  f138		       85 1c		      STA	GRP1
    366  f13a
    367  f13a				   SmallerThan16
    368  f13a		       ca		      DEX
    369  f13b		       85 02		      STA	WSYNC
    370  f13d		       d0 d0		      BNE	OverscanLoop
    371  f13f
    372  f13f							; Clear Player Registers
    373  f13f		       a9 00		      LDA	#0
    374  f141		       85 1b		      STA	GRP0
    375  f143		       85 1c		      STA	GRP1
    376  f145
    377  f145							; Return NUSIZ0 and NUSIZ1
    378  f145		       a9 20		      LDA	#%100000
    379  f147		       85 04		      STA	NUSIZ0
    380  f149		       85 05		      STA	NUSIZ1
    381  f14b
    382  f14b							; Return P0 Register Reflection Value
    383  f14b		       a5 a2		      LDA	PlayerReflectedBuffer
    384  f14d		       85 0b		      STA	REFP0
    385  f14f
    386  f14f							; Return P1 Register Reflection Value
    387  f14f		       a5 a3		      LDA	GhostReflectedBuffer
    388  f151		       85 0c		      STA	REFP1
    389  f153
    390  f153							; Return P1 color
    391  f153		       a9 58		      LDA	#$58
    392  f155		       85 07		      STA	COLUP1
    393  f157
    394  f157		       60		      RTS
    395  f158
    396  f158							;==================================================================================
    397  f158							; InitVariables
    398  f158							;==================================================================================
    399  f158
    400  f158				   InitVariables
    401  f158							; Initialize BG Color and PF Color
    402  f158		       a9 00		      LDA	#$00
    403  f15a		       85 09		      STA	COLUBK
    404  f15c		       a9 72		      LDA	#$72
    405  f15e		       85 08		      STA	COLUPF
    406  f160
    407  f160							; Initialize Player Color and Pattern
    408  f160		       a9 1e		      LDA	#$1E
    409  f162		       85 06		      STA	COLUP0
    410  f164		       a9 58		      LDA	#$58
    411  f166		       85 07		      STA	COLUP1
    412  f168
    413  f168							; Initialize CTRLPF
    414  f168		       a9 01		      LDA	#1
    415  f16a		       85 0a		      STA	CTRLPF
    416  f16c
    417  f16c							; Initialize Missile Graphics
    418  f16c		       a9 20		      LDA	#%100000
    419  f16e		       85 04		      STA	NUSIZ0
    420  f170
    421  f170							; Initialize Variables
    422  f170
    423  f170							; SpriteXPos and YPos
    424  f170		       a9 50		      LDA	#80
    425  f172		       85 83		      STA	SpriteXPos
    426  f174		       a9 6b		      LDA	#107
    427  f176		       85 84		      STA	SpriteYPos
    428  f178
    429  f178							; SpriteGhostXPos and YPos
    430  f178		       a9 4d		      LDA	#77
    431  f17a		       85 8a		      STA	GhostSpriteXPos
    432  f17c		       a9 8c		      LDA	#140
    433  f17e		       85 8b		      STA	GhostSpriteYPos
    434  f180
    435  f180							; LifeCount
    436  f180		       a9 03		      LDA	#3
    437  f182		       85 a4		      STA	LifeCount
    438  f184
    439  f184							; Timer Counter
    440  f184		       a9 00		      LDA	#0
    441  f186		       85 a0		      STA	TimerCounter5
    442  f188		       85 a1		      STA	TimerCounter20
    443  f18a
    444  f18a							; Score
    445  f18a		       85 98		      STA	ScoreTens
    446  f18c		       85 99		      STA	ScoreOnes
    447  f18e
    448  f18e							; Set Controller Inputs
    449  f18e		       8d 81 02 	      STA	SWACNT
    450  f191
    451  f191							; Set SpriteAnimationIndex
    452  f191		       85 95		      STA	SpriteAnimationIndex
    453  f193
    454  f193							; Set P0 and P1 Delays
    455  f193		       85 25		      STA	VDELP0
    456  f195
    457  f195							; Set Wafer XPos Index
    458  f195		       85 8d		      STA	WaferXPosIndex
    459  f197
    460  f197							; Set IsFrameGoingUp
    461  f197		       a9 01		      LDA	#1
    462  f199		       85 96		      STA	IsFrameGoingUp
    463  f19b
    464  f19b							; PacmanSpriteDataPointer
    465  f19b		       a9 00		      LDA	#<Sprite0Data
    466  f19d		       85 81		      STA	SpriteAddrPtr
    467  f19f		       a9 f6		      LDA	#>Sprite0Data
    468  f1a1		       85 82		      STA	SpriteAddrPtr+1
    469  f1a3
    470  f1a3							; GhostSpriteDataPointer
    471  f1a3		       a9 b0		      LDA	#<SpriteGhostData
    472  f1a5		       85 88		      STA	SpriteGhostAddrPtr
    473  f1a7		       a9 f6		      LDA	#>SpriteGhostData
    474  f1a9		       85 89		      STA	SpriteGhostAddrPtr+1
    475  f1ab
    476  f1ab		       60		      RTS
    477  f1ac
    478  f1ac							;==================================================================================
    479  f1ac							; PositionSpriteX - Subroutine to position player sprite
    480  f1ac							;==================================================================================
    481  f1ac
    482  f1ac				   PositionSpriteX
    483  f1ac		       85 02		      STA	WSYNC	; 3
    484  f1ae		       85 2b		      STA	HMCLR	; clear any previous movement	  ; 3
    485  f1b0
    486  f1b0				   PosSP
    487  f1b0
    488  f1b0		       a5 83		      LDA	SpriteXPos	; 4
    489  f1b2		       a8		      TAY		; 2
    490  f1b3
    491  f1b3							; Divide by 16
    492  f1b3		       4a		      LSR		; 2
    493  f1b4		       4a		      LSR		; 2
    494  f1b5		       4a		      LSR		; 2
    495  f1b6		       4a		      LSR		; 2
    496  f1b7		       85 80		      STA	PS_temp	; 3
    497  f1b9
    498  f1b9		       98		      TYA		; 2
    499  f1ba		       29 0f		      AND	#15	; 2
    500  f1bc
    501  f1bc		       18		      CLC		; 2
    502  f1bd
    503  f1bd		       65 80		      ADC	PS_temp	; 3
    504  f1bf		       a4 80		      LDY	PS_temp	; 3
    505  f1c1
    506  f1c1		       c9 0f		      CMP	#15	; 2
    507  f1c3		       90 03		      BCC	NH	; 3
    508  f1c5		       e9 0f		      SBC	#15	; 2
    509  f1c7		       c8		      INY		; 2
    510  f1c8
    511  f1c8				   NH
    512  f1c8							; Use remainder for fine adjustment
    513  f1c8		       49 07		      EOR	#7	; 2
    514  f1ca		       0a		      ASL		; 2
    515  f1cb		       0a		      ASL		; 2
    516  f1cc		       0a		      ASL		; 2
    517  f1cd		       0a		      ASL		; 2
    518  f1ce
    519  f1ce		       85 20		      STA	HMP0	; fine movement	     ; 4
    520  f1d0		       85 02		      STA	WSYNC	; 3
    521  f1d2
    522  f1d2		       20 e0 f1 	      JSR	Ret	; just a 12 cycle delay     ; 12
    523  f1d5		       24 00		      BIT	0	; 15 cycles = 3 loops :)    ; 3
    524  f1d7
    525  f1d7
    526  f1d7				   Jiggle
    527  f1d7		       88		      DEY		; 2
    528  f1d8		       10 fd		      BPL	Jiggle	; 3
    529  f1da
    530  f1da		       85 10		      STA	RESP0	; 4
    531  f1dc
    532  f1dc		       85 02		      STA	WSYNC	; 3
    533  f1de		       85 2a		      STA	HMOVE	; 3
    534  f1e0
    535  f1e0				   Ret
    536  f1e0		       60		      RTS		; 6
    537  f1e1
    538  f1e1							;==================================================================================
    539  f1e1							; PositionGhostSpriteX - Subroutine to position ghost sprite
    540  f1e1							;==================================================================================
    541  f1e1
    542  f1e1				   PositionGhostSpriteX
    543  f1e1		       85 02		      STA	WSYNC	; 3
    544  f1e3		       85 2b		      STA	HMCLR	; clear any previous movement	  ; 3
    545  f1e5
    546  f1e5		       a2 01		      LDX	#1	; sprite index 		  ; 2
    547  f1e7
    548  f1e7				   PosSP1
    549  f1e7
    550  f1e7		       b5 89		      LDA	GhostSpriteXPos-1,x	; 4
    551  f1e9		       a8		      TAY		; 2
    552  f1ea
    553  f1ea							; Divide by 16
    554  f1ea		       4a		      LSR		; 2
    555  f1eb		       4a		      LSR		; 2
    556  f1ec		       4a		      LSR		; 2
    557  f1ed		       4a		      LSR		; 2
    558  f1ee		       85 80		      STA	PS_temp	; 3
    559  f1f0
    560  f1f0		       98		      TYA		; 2
    561  f1f1		       29 0f		      AND	#15	; 2
    562  f1f3
    563  f1f3		       18		      CLC		; 2
    564  f1f4
    565  f1f4		       65 80		      ADC	PS_temp	; 3
    566  f1f6		       a4 80		      LDY	PS_temp	; 3
    567  f1f8
    568  f1f8		       c9 0f		      CMP	#15	; 2
    569  f1fa		       90 03		      BCC	NH1	; 3
    570  f1fc		       e9 0f		      SBC	#15	; 2
    571  f1fe		       c8		      INY		; 2
    572  f1ff
    573  f1ff				   NH1
    574  f1ff							; Use remainder for fine adjustment
    575  f1ff		       49 07		      EOR	#7	; 2
    576  f201		       0a		      ASL		; 2
    577  f202		       0a		      ASL		; 2
    578  f203		       0a		      ASL		; 2
    579  f204		       0a		      ASL		; 2
    580  f205
    581  f205		       95 20		      STA	HMP1-1,x	; fine movement	     ; 4
    582  f207		       85 02		      STA	WSYNC	; 3
    583  f209
    584  f209		       20 1a f2 	      JSR	Ret1	; just a 12 cycle delay     ; 12
    585  f20c		       24 00		      BIT	0	; 15 cycles = 3 loops :)    ; 3
    586  f20e
    587  f20e
    588  f20e				   Jiggle1
    589  f20e		       88		      DEY		; 2
    590  f20f		       10 fd		      BPL	Jiggle1	; 3
    591  f211
    592  f211		       95 10		      STA	RESP1-1,x	; 4
    593  f213
    594  f213		       ca		      DEX		; 2
    595  f214		       d0 d1		      BNE	PosSP1	; 3
    596  f216
    597  f216		       85 02		      STA	WSYNC	; 3
    598  f218		       85 2a		      STA	HMOVE	; 3
    599  f21a
    600  f21a				   Ret1
    601  f21a		       60		      RTS		; 6
    602  f21b
    603  f21b							;==================================================================================
    604  f21b							; PositionWaferX0 - Subroutine to position wafer missile
    605  f21b							;==================================================================================
    606  f21b
    607  f21b				   PositionWaferX0
    608  f21b		       85 02		      STA	WSYNC	; 3
    609  f21d		       85 2b		      STA	HMCLR	; clear any previous movement	  ; 3
    610  f21f
    611  f21f				   PosSPWafer0
    612  f21f
    613  f21f		       a5 8c		      LDA	CurWaferXPos0	; 4
    614  f221		       a8		      TAY		; 2
    615  f222
    616  f222							; Divide by 16
    617  f222		       4a		      LSR		; 2
    618  f223		       4a		      LSR		; 2
    619  f224		       4a		      LSR		; 2
    620  f225		       4a		      LSR		; 2
    621  f226		       85 80		      STA	PS_temp	; 3
    622  f228
    623  f228		       98		      TYA		; 2
    624  f229		       29 0f		      AND	#15	; 2
    625  f22b
    626  f22b		       18		      CLC		; 2
    627  f22c
    628  f22c		       65 80		      ADC	PS_temp	; 3
    629  f22e		       a4 80		      LDY	PS_temp	; 3
    630  f230
    631  f230		       c9 0f		      CMP	#15	; 2
    632  f232		       90 03		      BCC	NHWafer0	; 3
    633  f234		       e9 0f		      SBC	#15	; 2
    634  f236		       c8		      INY		; 2
    635  f237
    636  f237				   NHWafer0
    637  f237							; Use remainder for fine adjustment
    638  f237		       49 07		      EOR	#7	; 2
    639  f239		       0a		      ASL		; 2
    640  f23a		       0a		      ASL		; 2
    641  f23b		       0a		      ASL		; 2
    642  f23c		       0a		      ASL		; 2
    643  f23d
    644  f23d		       85 22		      STA	HMM0	; fine movement	     ; 4
    645  f23f		       85 02		      STA	WSYNC	; 3
    646  f241
    647  f241		       20 4f f2 	      JSR	RetWafer0	; just a 12 cycle delay     ; 12
    648  f244		       24 00		      BIT	0	; 15 cycles = 3 loops :)    ; 3
    649  f246
    650  f246
    651  f246				   JiggleWafer0
    652  f246		       88		      DEY		; 2
    653  f247		       10 fd		      BPL	JiggleWafer0	; 3
    654  f249
    655  f249		       85 12		      STA	RESM0	; 4
    656  f24b
    657  f24b		       85 02		      STA	WSYNC	; 3
    658  f24d		       85 2a		      STA	HMOVE	; 3
    659  f24f
    660  f24f				   RetWafer0
    661  f24f		       60		      RTS		; 6
    662  f250
    663  f250							;==================================================================================
    664  f250							; UpdateEntities - Update Game Logic
    665  f250							;==================================================================================
    666  f250
    667  f250				   UpdateEntities
    668  f250							; Check Player Collision with PF
    669  f250		       20 94 f2 	      JSR	CheckPlayerCollisionPF
    670  f253
    671  f253							; Update Sprite Pos According to Velocity Mask
    672  f253		       20 e9 f2 	      JSR	UpdatePlayerPosition
    673  f256
    674  f256							; Check Player Collision with Ghosts
    675  f256		       20 7d f2 	      JSR	CheckPlayerCollisionGhosts
    676  f259
    677  f259							; Remove Collisions After Checks
    678  f259		       85 2c		      STA	CXCLR
    679  f25b
    680  f25b							; Update Timer
    681  f25b		       20 b3 f4 	      JSR	UpdateTimer
    682  f25e
    683  f25e							; Increase Score According with Picked Up Wafer Buffer
    684  f25e		       20 d2 f4 	      JSR	UpdateScore
    685  f261
    686  f261							; Change Animation Frame
    687  f261		       20 4e f3 	      JSR	ChangeAnimationFrame
    688  f264
    689  f264							; Apply Animation Frame
    690  f264		       20 9e f3 	      JSR	ApplyAnimationFrame
    691  f267
    692  f267							; Update Wafer XPos Index
    693  f267		       20 6b f2 	      JSR	UpdateWaferIndex
    694  f26a
    695  f26a		       60		      RTS
    696  f26b
    697  f26b							;==================================================================================
    698  f26b							; UpdateWaferIndex - increase wafer XPos Index and apply it
    699  f26b							;==================================================================================
    700  f26b
    701  f26b				   UpdateWaferIndex
    702  f26b		       e6 8d		      INC	WaferXPosIndex
    703  f26d
    704  f26d		       a6 8d		      LDX	WaferXPosIndex
    705  f26f		       e0 06		      CPX	#6
    706  f271		       d0 04		      BNE	ReturnWaferIndex
    707  f273
    708  f273				   WaferIndexEquals6
    709  f273		       a2 00		      LDX	#0
    710  f275		       86 8d		      STX	WaferXPosIndex
    711  f277
    712  f277				   ReturnWaferIndex
    713  f277		       bd 02 f5 	      LDA	WaferXPosArray0,x
    714  f27a		       85 8c		      STA	CurWaferXPos0
    715  f27c		       60		      RTS
    716  f27d
    717  f27d							;==================================================================================
    718  f27d							; CheckPlayerCollisionGhosts - Verify for Player Collision with Ghosts
    719  f27d							;==================================================================================
    720  f27d
    721  f27d				   CheckPlayerCollisionGhosts
    722  f27d
    723  f27d							; Check if death animation is playing
    724  f27d		       a5 a5		      LDA	IsPlayingDeathAnimation
    725  f27f		       d0 12		      BNE	NoP0P1Collision
    726  f281
    727  f281							; Check Collision
    728  f281		       a5 07		      LDA	CXPPMM
    729  f283		       29 80		      AND	#%10000000
    730  f285		       f0 0c		      BEQ	NoP0P1Collision
    731  f287
    732  f287				   P0P1Collision
    733  f287							; Reset Player Velocity
    734  f287		       a9 00		      LDA	#0
    735  f289		       85 87		      STA	PlayerVelocityMask
    736  f28b
    737  f28b							; Set Animation Frame to 4 and IsPlayingDeathAnimation
    738  f28b		       a9 04		      LDA	#4
    739  f28d		       85 95		      STA	SpriteAnimationIndex
    740  f28f
    741  f28f		       a9 01		      LDA	#1
    742  f291		       85 a5		      STA	IsPlayingDeathAnimation
    743  f293
    744  f293				   NoP0P1Collision
    745  f293		       60		      RTS
    746  f294
    747  f294							;==================================================================================
    748  f294							; CheckPlayerCollisionPF - Verify for Player Collision with PF and Update Velocity Mask
    749  f294							;==================================================================================
    750  f294
    751  f294				   CheckPlayerCollisionPF
    752  f294							; Verify P0PF Collision Bit
    753  f294		       a5 02		      LDA	CXP0FB
    754  f296		       29 80		      AND	#%10000000
    755  f298		       f0 4e		      BEQ	PlayerPFCollisionNotDetected
    756  f29a
    757  f29a							; Check Where Player Was Going
    758  f29a		       a6 87		      LDX	PlayerVelocityMask
    759  f29c
    760  f29c							; Return Player to Previous Spot Before Zeoring Velocity
    761  f29c		       8a		      TXA
    762  f29d		       29 08		      AND	#%1000
    763  f29f		       d0 1a		      BNE	WasGoingRight
    764  f2a1
    765  f2a1		       8a		      TXA
    766  f2a2		       29 04		      AND	#%0100
    767  f2a4		       d0 20		      BNE	WasGoingLeft
    768  f2a6
    769  f2a6		       8a		      TXA
    770  f2a7		       29 02		      AND	#%0010
    771  f2a9		       d0 26		      BNE	WasGoingDown
    772  f2ab
    773  f2ab		       8a		      TXA
    774  f2ac		       29 01		      AND	#%0001
    775  f2ae		       d0 2c		      BNE	WasGoingUp
    776  f2b0
    777  f2b0							; Return X and Y in case Player isnt moving and is still stuck
    778  f2b0		       a5 85		      LDA	LastSpriteXPos
    779  f2b2		       85 83		      STA	SpriteXPos
    780  f2b4		       a5 86		      LDA	LastSpriteYPos
    781  f2b6		       85 84		      STA	SpriteYPos
    782  f2b8
    783  f2b8		       4c e4 f2 	      JMP	ZeroPlayerVelocity
    784  f2bb
    785  f2bb				   WasGoingRight
    786  f2bb		       a5 85		      LDA	LastSpriteXPos
    787  f2bd		       85 83		      STA	SpriteXPos
    788  f2bf
    789  f2bf		       c6 83		      DEC	SpriteXPos
    790  f2c1		       c6 83		      DEC	SpriteXPos
    791  f2c3
    792  f2c3		       4c e4 f2 	      JMP	ZeroPlayerVelocity
    793  f2c6
    794  f2c6				   WasGoingLeft
    795  f2c6		       a5 85		      LDA	LastSpriteXPos
    796  f2c8		       85 83		      STA	SpriteXPos
    797  f2ca
    798  f2ca		       e6 83		      INC	SpriteXPos
    799  f2cc		       e6 83		      INC	SpriteXPos
    800  f2ce
    801  f2ce		       4c e4 f2 	      JMP	ZeroPlayerVelocity
    802  f2d1
    803  f2d1				   WasGoingDown
    804  f2d1		       a5 86		      LDA	LastSpriteYPos
    805  f2d3		       85 84		      STA	SpriteYPos
    806  f2d5
    807  f2d5		       e6 84		      INC	SpriteYPos
    808  f2d7		       e6 84		      INC	SpriteYPos
    809  f2d9
    810  f2d9		       4c e4 f2 	      JMP	ZeroPlayerVelocity
    811  f2dc
    812  f2dc				   WasGoingUp
    813  f2dc		       a5 86		      LDA	LastSpriteYPos
    814  f2de		       85 84		      STA	SpriteYPos
    815  f2e0
    816  f2e0		       c6 84		      DEC	SpriteYPos
    817  f2e2		       c6 84		      DEC	SpriteYPos
    818  f2e4
    819  f2e4				   ZeroPlayerVelocity
    820  f2e4		       a9 00		      LDA	#0
    821  f2e6		       85 87		      STA	PlayerVelocityMask
    822  f2e8
    823  f2e8				   PlayerPFCollisionNotDetected
    824  f2e8		       60		      RTS
    825  f2e9
    826  f2e9							;==================================================================================
    827  f2e9							; UpdatePlayerPosition - Update Player Position According to Velocity Mask
    828  f2e9							;==================================================================================
    829  f2e9
    830  f2e9				   UpdatePlayerPosition
    831  f2e9							; Verify Collision and Refuse to Move in case is colliding
    832  f2e9		       a5 02		      LDA	CXP0FB
    833  f2eb		       29 80		      AND	#%10000000
    834  f2ed		       d0 5e		      BNE	UpdatePlayerPositionRet
    835  f2ef
    836  f2ef		       a6 87		      LDX	PlayerVelocityMask
    837  f2f1
    838  f2f1		       8a		      TXA
    839  f2f2		       29 08		      AND	#%1000
    840  f2f4		       d0 12		      BNE	GoRight
    841  f2f6
    842  f2f6		       8a		      TXA
    843  f2f7		       29 04		      AND	#%0100
    844  f2f9		       d0 24		      BNE	GoLeft
    845  f2fb
    846  f2fb		       8a		      TXA
    847  f2fc		       29 02		      AND	#%0010
    848  f2fe		       d0 36		      BNE	GoDown
    849  f300
    850  f300		       8a		      TXA
    851  f301		       29 01		      AND	#%0001
    852  f303		       d0 3e		      BNE	GoUp
    853  f305
    854  f305		       4c 4d f3 	      JMP	UpdatePlayerPositionRet
    855  f308
    856  f308				   GoRight
    857  f308		       a5 83		      LDA	SpriteXPos
    858  f30a		       85 85		      STA	LastSpriteXPos
    859  f30c		       a5 84		      LDA	SpriteYPos
    860  f30e		       85 86		      STA	LastSpriteYPos
    861  f310
    862  f310		       e6 83		      INC	SpriteXPos
    863  f312
    864  f312							; Verify If Sprite is in Far Right
    865  f312		       a5 83		      LDA	SpriteXPos
    866  f314		       c9 a0		      CMP	#160
    867  f316		       90 04		      BCC	NotFarRight
    868  f318
    869  f318		       a9 00		      LDA	#0
    870  f31a		       85 83		      STA	SpriteXPos
    871  f31c
    872  f31c				   NotFarRight
    873  f31c		       4c 4d f3 	      JMP	UpdatePlayerPositionRet
    874  f31f
    875  f31f				   GoLeft
    876  f31f		       a5 83		      LDA	SpriteXPos
    877  f321		       85 85		      STA	LastSpriteXPos
    878  f323		       a5 84		      LDA	SpriteYPos
    879  f325		       85 86		      STA	LastSpriteYPos
    880  f327
    881  f327		       c6 83		      DEC	SpriteXPos
    882  f329
    883  f329							; Verify If Sprite is in Far Left
    884  f329		       a5 83		      LDA	SpriteXPos
    885  f32b		       c9 00		      CMP	#0
    886  f32d		       d0 04		      BNE	NotFarLeft
    887  f32f
    888  f32f		       a9 a0		      LDA	#160
    889  f331		       85 83		      STA	SpriteXPos
    890  f333
    891  f333				   NotFarLeft
    892  f333		       4c 4d f3 	      JMP	UpdatePlayerPositionRet
    893  f336
    894  f336				   GoDown
    895  f336		       a5 83		      LDA	SpriteXPos
    896  f338		       85 85		      STA	LastSpriteXPos
    897  f33a		       a5 84		      LDA	SpriteYPos
    898  f33c		       85 86		      STA	LastSpriteYPos
    899  f33e
    900  f33e		       c6 84		      DEC	SpriteYPos
    901  f340		       4c 4d f3 	      JMP	UpdatePlayerPositionRet
    902  f343
    903  f343				   GoUp
    904  f343		       a5 83		      LDA	SpriteXPos
    905  f345		       85 85		      STA	LastSpriteXPos
    906  f347		       a5 84		      LDA	SpriteYPos
    907  f349		       85 86		      STA	LastSpriteYPos
    908  f34b
    909  f34b		       e6 84		      INC	SpriteYPos
    910  f34d
    911  f34d				   UpdatePlayerPositionRet
    912  f34d		       60		      RTS
    913  f34e
    914  f34e							;==================================================================================
    915  f34e							; ChangeAnimationFrame
    916  f34e							;==================================================================================
    917  f34e
    918  f34e				   ChangeAnimationFrame
    919  f34e							; Verify If Is Death Animation
    920  f34e		       a5 a5		      LDA	IsPlayingDeathAnimation
    921  f350		       d0 25		      BNE	FrameIsDeath
    922  f352
    923  f352				   FrameNotDeath
    924  f352							; Verify TimerCounter5
    925  f352		       a5 a0		      LDA	TimerCounter5
    926  f354		       d0 47		      BNE	DontChangeFrame
    927  f356
    928  f356							; Load Current Frame Index
    929  f356		       a4 95		      LDY	SpriteAnimationIndex
    930  f358
    931  f358							; Verify Next Frame
    932  f358		       a6 96		      LDX	IsFrameGoingUp
    933  f35a		       d0 04		      BNE	FrameIsGoingUp
    934  f35c
    935  f35c				   FrameIsGoingDown
    936  f35c		       88		      DEY
    937  f35d		       4c 61 f3 	      JMP	FrameChanged
    938  f360
    939  f360				   FrameIsGoingUp
    940  f360		       c8		      INY
    941  f361
    942  f361				   FrameChanged
    943  f361							; Check if Index is Either 0 or 3
    944  f361		       84 95		      STY	SpriteAnimationIndex
    945  f363		       c0 03		      CPY	#3
    946  f365		       f0 07		      BEQ	ChangeDirection
    947  f367		       c0 00		      CPY	#0
    948  f369		       f0 03		      BEQ	ChangeDirection
    949  f36b
    950  f36b							; If not
    951  f36b		       4c 9d f3 	      JMP	FrameChangeReturn
    952  f36e
    953  f36e				   ChangeDirection
    954  f36e		       a5 96		      LDA	IsFrameGoingUp
    955  f370		       49 01		      EOR	#1
    956  f372		       85 96		      STA	IsFrameGoingUp
    957  f374		       4c 9d f3 	      JMP	FrameChangeReturn
    958  f377
    959  f377				   FrameIsDeath
    960  f377							; Verify TimerCounter20
    961  f377		       a5 a1		      LDA	TimerCounter20
    962  f379		       d0 22		      BNE	DontChangeFrame
    963  f37b
    964  f37b				   CheckIfLastDeathFrame
    965  f37b							; Check if Frame is 9 (Last Death Frame)
    966  f37b		       a5 95		      LDA	SpriteAnimationIndex
    967  f37d		       c9 09		      CMP	#9
    968  f37f		       d0 17		      BNE	ChangeDeathFrame
    969  f381
    970  f381							; End Death Animation
    971  f381		       a9 00		      LDA	#0
    972  f383		       85 a5		      STA	IsPlayingDeathAnimation
    973  f385		       85 95		      STA	SpriteAnimationIndex
    974  f387
    975  f387		       a9 01		      LDA	#1
    976  f389		       85 96		      STA	IsFrameGoingUp
    977  f38b
    978  f38b							; Reset Player Coordinates
    979  f38b		       a9 50		      LDA	#80
    980  f38d		       85 83		      STA	SpriteXPos
    981  f38f		       a9 6b		      LDA	#107
    982  f391		       85 84		      STA	SpriteYPos
    983  f393
    984  f393							; Take One Life
    985  f393		       c6 a4		      DEC	LifeCount
    986  f395
    987  f395		       4c 9d f3 	      JMP	FrameChangeReturn
    988  f398
    989  f398				   ChangeDeathFrame
    990  f398		       e6 95		      INC	SpriteAnimationIndex
    991  f39a		       4c 9d f3 	      JMP	FrameChangeReturn
    992  f39d
    993  f39d				   DontRestartFrame
    994  f39d				   DontChangeFrame
    995  f39d				   FrameChangeReturn
    996  f39d		       60		      RTS
    997  f39e
    998  f39e							;==================================================================================
    999  f39e							; ApplyAnimationFrame
   1000  f39e							;==================================================================================
   1001  f39e
   1002  f39e				   ApplyAnimationFrame
   1003  f39e							; Check Counter
   1004  f39e		       a5 a0		      LDA	TimerCounter5
   1005  f3a0		       d0 28		      BNE	AnimationFrameRet
   1006  f3a2
   1007  f3a2		       a5 95		      LDA	SpriteAnimationIndex
   1008  f3a4		       f0 27		      BEQ	Animation0
   1009  f3a6		       c9 01		      CMP	#1
   1010  f3a8		       f0 2e		      BEQ	Animation1
   1011  f3aa		       c9 02		      CMP	#2
   1012  f3ac		       f0 35		      BEQ	Animation2
   1013  f3ae		       c9 03		      CMP	#3
   1014  f3b0		       f0 3c		      BEQ	Animation3
   1015  f3b2		       c9 04		      CMP	#4
   1016  f3b4		       f0 43		      BEQ	Animation4
   1017  f3b6		       c9 05		      CMP	#5
   1018  f3b8		       f0 4a		      BEQ	Animation5
   1019  f3ba		       c9 06		      CMP	#6
   1020  f3bc		       f0 51		      BEQ	Animation6
   1021  f3be		       c9 07		      CMP	#7
   1022  f3c0		       f0 58		      BEQ	Animation7
   1023  f3c2		       c9 08		      CMP	#8
   1024  f3c4		       f0 5f		      BEQ	Animation8
   1025  f3c6		       c9 09		      CMP	#9
   1026  f3c8		       f0 66		      BEQ	Animation9
   1027  f3ca
   1028  f3ca				   AnimationFrameRet
   1029  f3ca		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1030  f3cd
   1031  f3cd				   Animation0
   1032  f3cd		       a9 00		      LDA	#<Sprite0Data
   1033  f3cf		       85 81		      STA	SpriteAddrPtr
   1034  f3d1		       a9 f6		      LDA	#>Sprite0Data
   1035  f3d3		       85 82		      STA	SpriteAddrPtr+1
   1036  f3d5		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1037  f3d8
   1038  f3d8				   Animation1
   1039  f3d8		       a9 12		      LDA	#<Sprite1Data
   1040  f3da		       85 81		      STA	SpriteAddrPtr
   1041  f3dc		       a9 f6		      LDA	#>Sprite1Data
   1042  f3de		       85 82		      STA	SpriteAddrPtr+1
   1043  f3e0		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1044  f3e3
   1045  f3e3				   Animation2
   1046  f3e3		       a9 24		      LDA	#<Sprite2Data
   1047  f3e5		       85 81		      STA	SpriteAddrPtr
   1048  f3e7		       a9 f6		      LDA	#>Sprite2Data
   1049  f3e9		       85 82		      STA	SpriteAddrPtr+1
   1050  f3eb		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1051  f3ee
   1052  f3ee				   Animation3
   1053  f3ee		       a9 36		      LDA	#<Sprite3Data
   1054  f3f0		       85 81		      STA	SpriteAddrPtr
   1055  f3f2		       a9 f6		      LDA	#>Sprite3Data
   1056  f3f4		       85 82		      STA	SpriteAddrPtr+1
   1057  f3f6		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1058  f3f9
   1059  f3f9				   Animation4
   1060  f3f9		       a9 48		      LDA	#<Sprite4Data
   1061  f3fb		       85 81		      STA	SpriteAddrPtr
   1062  f3fd		       a9 f6		      LDA	#>Sprite4Data
   1063  f3ff		       85 82		      STA	SpriteAddrPtr+1
   1064  f401		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1065  f404
   1066  f404				   Animation5
   1067  f404		       a9 5a		      LDA	#<Sprite5Data
   1068  f406		       85 81		      STA	SpriteAddrPtr
   1069  f408		       a9 f6		      LDA	#>Sprite5Data
   1070  f40a		       85 82		      STA	SpriteAddrPtr+1
   1071  f40c		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1072  f40f
   1073  f40f				   Animation6
   1074  f40f		       a9 6c		      LDA	#<Sprite6Data
   1075  f411		       85 81		      STA	SpriteAddrPtr
   1076  f413		       a9 f6		      LDA	#>Sprite6Data
   1077  f415		       85 82		      STA	SpriteAddrPtr+1
   1078  f417		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1079  f41a
   1080  f41a				   Animation7
   1081  f41a		       a9 7e		      LDA	#<Sprite7Data
   1082  f41c		       85 81		      STA	SpriteAddrPtr
   1083  f41e		       a9 f6		      LDA	#>Sprite7Data
   1084  f420		       85 82		      STA	SpriteAddrPtr+1
   1085  f422		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1086  f425
   1087  f425				   Animation8
   1088  f425		       a9 90		      LDA	#<Sprite8Data
   1089  f427		       85 81		      STA	SpriteAddrPtr
   1090  f429		       a9 f6		      LDA	#>Sprite8Data
   1091  f42b		       85 82		      STA	SpriteAddrPtr+1
   1092  f42d		       4c 38 f4 	      JMP	ApplyAnimationFrameRet
   1093  f430
   1094  f430				   Animation9
   1095  f430		       a9 a0		      LDA	#<Sprite9Data
   1096  f432		       85 81		      STA	SpriteAddrPtr
   1097  f434		       a9 f6		      LDA	#>Sprite9Data
   1098  f436		       85 82		      STA	SpriteAddrPtr+1
   1099  f438
   1100  f438				   ApplyAnimationFrameRet
   1101  f438		       60		      RTS
   1102  f439
   1103  f439							;==================================================================================
   1104  f439							; GetControllerInputs - Update Player Velocity Mask According to Inputs
   1105  f439							;==================================================================================
   1106  f439
   1107  f439				   GetControllerInputs
   1108  f439		       a5 a5		      LDA	IsPlayingDeathAnimation
   1109  f43b		       d0 3d		      BNE	ControllerRet
   1110  f43d
   1111  f43d		       ae 80 02 	      LDX	SWCHA
   1112  f440
   1113  f440							; Check Right Input
   1114  f440		       8a		      TXA
   1115  f441		       29 80		      AND	#%10000000
   1116  f443		       f0 12		      BEQ	RightInput
   1117  f445
   1118  f445							; Check Left Input
   1119  f445		       8a		      TXA
   1120  f446		       29 40		      AND	#%01000000
   1121  f448		       f0 18		      BEQ	LeftInput
   1122  f44a
   1123  f44a							; Check Down Input
   1124  f44a		       8a		      TXA
   1125  f44b		       29 20		      AND	#%00100000
   1126  f44d		       f0 20		      BEQ	DownInput
   1127  f44f
   1128  f44f							; Check Up Input
   1129  f44f		       8a		      TXA
   1130  f450		       29 10		      AND	#%00010000
   1131  f452		       f0 22		      BEQ	UpInput
   1132  f454
   1133  f454							; No Input Detected
   1134  f454		       4c 7a f4 	      JMP	ControllerRet
   1135  f457
   1136  f457				   RightInput
   1137  f457		       a9 08		      LDA	#%1000
   1138  f459		       85 0b		      STA	REFP0
   1139  f45b		       85 a2		      STA	PlayerReflectedBuffer
   1140  f45d
   1141  f45d		       85 87		      STA	PlayerVelocityMask
   1142  f45f		       4c 7a f4 	      JMP	ControllerRet
   1143  f462
   1144  f462				   LeftInput
   1145  f462		       a9 00		      LDA	#0
   1146  f464		       85 0b		      STA	REFP0
   1147  f466		       85 a2		      STA	PlayerReflectedBuffer
   1148  f468
   1149  f468		       a9 04		      LDA	#%0100
   1150  f46a		       85 87		      STA	PlayerVelocityMask
   1151  f46c		       4c 7a f4 	      JMP	ControllerRet
   1152  f46f
   1153  f46f				   DownInput
   1154  f46f		       a9 02		      LDA	#%0010
   1155  f471		       85 87		      STA	PlayerVelocityMask
   1156  f473		       4c 7a f4 	      JMP	ControllerRet
   1157  f476
   1158  f476				   UpInput
   1159  f476		       a9 01		      LDA	#%0001
   1160  f478		       85 87		      STA	PlayerVelocityMask
   1161  f47a
   1162  f47a				   ControllerRet
   1163  f47a		       60		      RTS
   1164  f47b
   1165  f47b							;==================================================================================
   1166  f47b							; GetController2Inputs - DEBUG - Controls Ghost
   1167  f47b							;==================================================================================
   1168  f47b
   1169  f47b				   GetController2InputsDEBUG
   1170  f47b		       ae 80 02 	      LDX	SWCHA
   1171  f47e
   1172  f47e							; Check Right Input
   1173  f47e		       8a		      TXA
   1174  f47f		       29 08		      AND	#%00001000
   1175  f481		       f0 12		      BEQ	RightInputGhost
   1176  f483
   1177  f483							; Check Left Input
   1178  f483		       8a		      TXA
   1179  f484		       29 04		      AND	#%00000100
   1180  f486		       f0 18		      BEQ	LeftInputGhost
   1181  f488
   1182  f488							; Check Down Input
   1183  f488		       8a		      TXA
   1184  f489		       29 02		      AND	#%00000010
   1185  f48b		       f0 1e		      BEQ	DownInputGhost
   1186  f48d
   1187  f48d							; Check Up Input
   1188  f48d		       8a		      TXA
   1189  f48e		       29 01		      AND	#%00000001
   1190  f490		       f0 1e		      BEQ	UpInputGhost
   1191  f492
   1192  f492							; No Input Detected
   1193  f492		       4c b2 f4 	      JMP	ControllerRetGhost
   1194  f495
   1195  f495				   RightInputGhost
   1196  f495		       e6 8a		      INC	GhostSpriteXPos
   1197  f497		       a9 08		      LDA	#%1000
   1198  f499		       85 0c		      STA	REFP1
   1199  f49b		       85 a3		      STA	GhostReflectedBuffer
   1200  f49d		       4c b2 f4 	      JMP	ControllerRetGhost
   1201  f4a0
   1202  f4a0				   LeftInputGhost
   1203  f4a0		       c6 8a		      DEC	GhostSpriteXPos
   1204  f4a2		       a9 00		      LDA	#0
   1205  f4a4		       85 0c		      STA	REFP1
   1206  f4a6		       85 a3		      STA	GhostReflectedBuffer
   1207  f4a8		       4c b2 f4 	      JMP	ControllerRetGhost
   1208  f4ab
   1209  f4ab				   DownInputGhost
   1210  f4ab		       c6 8b		      DEC	GhostSpriteYPos
   1211  f4ad		       4c b2 f4 	      JMP	ControllerRetGhost
   1212  f4b0
   1213  f4b0				   UpInputGhost
   1214  f4b0		       e6 8b		      INC	GhostSpriteYPos
   1215  f4b2
   1216  f4b2				   ControllerRetGhost
   1217  f4b2		       60		      RTS
   1218  f4b3
   1219  f4b3							;==================================================================================
   1220  f4b3							; UpdateTimer - Updates All Timers
   1221  f4b3							;==================================================================================
   1222  f4b3
   1223  f4b3				   UpdateTimer
   1224  f4b3				   UpdateTimer5
   1225  f4b3		       a5 a0		      LDA	TimerCounter5
   1226  f4b5		       c9 00		      CMP	#0
   1227  f4b7		       d0 07		      BNE	DidntReachLimitTimer5
   1228  f4b9
   1229  f4b9				   ReachedLimitTimer5
   1230  f4b9		       a9 05		      LDA	#TIMER_LIMIT1
   1231  f4bb		       85 a0		      STA	TimerCounter5
   1232  f4bd		       4c c2 f4 	      JMP	UpdateTimer20
   1233  f4c0
   1234  f4c0				   DidntReachLimitTimer5
   1235  f4c0		       c6 a0		      DEC	TimerCounter5
   1236  f4c2
   1237  f4c2				   UpdateTimer20
   1238  f4c2		       a5 a1		      LDA	TimerCounter20
   1239  f4c4		       c9 00		      CMP	#0
   1240  f4c6		       d0 07		      BNE	DidntReachLimitTimer20
   1241  f4c8
   1242  f4c8				   ReachedLimitTimer20
   1243  f4c8		       a9 14		      LDA	#TIMER_LIMIT2
   1244  f4ca		       85 a1		      STA	TimerCounter20
   1245  f4cc		       4c d1 f4 	      JMP	TimerRet
   1246  f4cf
   1247  f4cf				   DidntReachLimitTimer20
   1248  f4cf		       c6 a1		      DEC	TimerCounter20
   1249  f4d1
   1250  f4d1				   TimerRet
   1251  f4d1		       60		      RTS
   1252  f4d2
   1253  f4d2							;==================================================================================
   1254  f4d2							; UpdateScore
   1255  f4d2							;==================================================================================
   1256  f4d2
   1257  f4d2				   UpdateScore
   1258  f4d2							; Check If Wafer Was Picked Up
   1259  f4d2		       a5 94		      LDA	PickedUpWaferBuffer
   1260  f4d4		       c9 00		      CMP	#0
   1261  f4d6		       f0 24		      BEQ	DidntPickUpWafer
   1262  f4d8
   1263  f4d8							; Increase Ones
   1264  f4d8		       e6 99		      INC	ScoreOnes
   1265  f4da
   1266  f4da							; Check if Ones reached 10
   1267  f4da		       a6 99		      LDX	ScoreOnes
   1268  f4dc		       e0 0a		      CPX	#10
   1269  f4de		       d0 1c		      BNE	NotYet10
   1270  f4e0
   1271  f4e0				   OnesReached10
   1272  f4e0							; Reset Ones and Increase Tens
   1273  f4e0		       a2 00		      LDX	#0
   1274  f4e2		       86 99		      STX	ScoreOnes
   1275  f4e4		       e6 98		      INC	ScoreTens
   1276  f4e6
   1277  f4e6							; Check if Tens reached 10
   1278  f4e6		       a6 98		      LDX	ScoreTens
   1279  f4e8		       e0 0a		      CPX	#10
   1280  f4ea		       d0 10		      BNE	NotYet10
   1281  f4ec
   1282  f4ec				   TensReached10
   1283  f4ec							; Reset Tens
   1284  f4ec		       a2 00		      LDX	#0
   1285  f4ee		       86 98		      STX	ScoreTens
   1286  f4f0		       e6 97		      INC	ScoreHundreds
   1287  f4f2
   1288  f4f2							; Check if Hundreds reached 10
   1289  f4f2		       a6 97		      LDX	ScoreHundreds
   1290  f4f4		       e0 0a		      CPX	#10
   1291  f4f6		       d0 04		      BNE	NotYet10
   1292  f4f8
   1293  f4f8				   HundredsReached10
   1294  f4f8							; Reset Hundreds
   1295  f4f8		       a2 00		      LDX	#0
   1296  f4fa		       86 97		      STX	ScoreHundreds
   1297  f4fc
   1298  f4fc				   DidntPickUpWafer
   1299  f4fc				   NotYet10
   1300  f4fc							; Flush PickedUpWaferBuffer
   1301  f4fc		       a9 00		      LDA	#0
   1302  f4fe		       85 94		      STA	PickedUpWaferBuffer
   1303  f500
   1304  f500		       60		      RTS
   1305  f501
   1306  f501							;==================================================================================
   1307  f501							; Delay12 - Waste 12 cycles of CPU
   1308  f501							;==================================================================================
   1309  f501
   1310  f501				   Delay12
   1311  f501		       60		      RTS
   1312  f502
   1313  f502							;==================================================================================
   1314  f502							; WaferXPosArray0
   1315  f502							;==================================================================================
   1316  f502
   1317  f502				   WaferXPosArray0
   1318  f502		       19 23 3c 64*	      .byte.b	25,35,60,100,130,140
   1319  f508
   1320  f508							;==================================================================================
   1321  f508							; FindWaferLookUp - Look up table for finding wafer in memory
   1322  f508							;==================================================================================
   1323  f508
   1324  f508				   FindWaferLookUp
   1325  f508		       00 02 04 08*	      .byte.b	0,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000
   1326  f510
   1327  f510							;==================================================================================
   1328  f510							; MultBy14
   1329  f510							;==================================================================================
   1330  f510
   1331  f510				   MultBy14
   1332  f510		       f0 fe 0c 1a*	      .byte.b	-16,-2,12,26,40,54,68,82,96,110,124
   1333  f51b
   1334  f51b							;==================================================================================
   1335  f51b							; Lives Icons NUSIZ0 Look up table
   1336  f51b							;==================================================================================
   1337  f51b
   1338  f51b				   LivesNUSIZ0LookUp
   1339  f51b		       00 00 01 03	      .byte.b	0,0,%001,%011
   1340  f51f
   1341  f51f							;==================================================================================
   1342  f51f							; CheckLineBytes
   1343  f51f							;==================================================================================
   1344  f51f
   1345  f51f				   CheckLineBytes
   1346  f51f		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1347  f52a		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,7,7,0,0
   1348  f535		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1349  f540		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1350  f54b		       06 06 00 00*	      .byte.b	6,6,0,0,0,0,0,0,0,0,0
   1351  f556		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1352  f561		       00 00 00 00*	      .byte.b	0,0,0,0,5,5,0,0,0,0,0
   1353  f56c		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1354  f577		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,4,4,0,0,0
   1355  f582		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1356  f58d		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,3,3,0
   1357  f598		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1358  f5a3		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,2
   1359  f5ae		       02 00 00 00*	      .byte.b	2,0,0,0,0,0,0,0,0,0,0
   1360  f5b9		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1361  f5c4		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,1,1
   1362  f5cf		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1363  f5da		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1364  f5e5		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1365  f5f0		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1366  f5fb
   1367  f5fb							;===============================================================================
   1368  f5fb							; free space check before page boundry
   1369  f5fb							;===============================================================================
   1370  f5fb
 Start of Sprite0Data is:  $f5fb
   1371  f5fb					      echo	"Start of Sprite0Data is: ", *
   1372  f600		       00 00 00 00*	      align	256
   1373  f600
   1374  f600							;==================================================================================
   1375  f600							; Sprite Data - Pacman
   1376  f600							;==================================================================================
   1377  f600
   1378  f600				   Sprite0Data
   1379  f600							; Frame 0
   1380  f600		       00		      .byte.b	#%00000000
   1381  f601		       00		      .byte.b	#%00000000
   1382  f602		       7e		      .byte.b	#%01111110
   1383  f603		       7e		      .byte.b	#%01111110
   1384  f604		       3f		      .byte.b	#%00111111
   1385  f605		       3f		      .byte.b	#%00111111
   1386  f606		       0f		      .byte.b	#%00001111
   1387  f607		       0f		      .byte.b	#%00001111
   1388  f608		       07		      .byte.b	#%00000111
   1389  f609		       07		      .byte.b	#%00000111
   1390  f60a		       0f		      .byte.b	#%00001111
   1391  f60b		       0f		      .byte.b	#%00001111
   1392  f60c		       3f		      .byte.b	#%00111111
   1393  f60d		       3f		      .byte.b	#%00111111
   1394  f60e		       7e		      .byte.b	#%01111110
   1395  f60f		       7e		      .byte.b	#%01111110
   1396  f610		       00		      .byte.b	#%00000000
   1397  f611		       00		      .byte.b	#%00000000
   1398  f612
   1399  f612				   Sprite1Data
   1400  f612							; Frame 1
   1401  f612		       00		      .byte.b	#%00000000
   1402  f613		       00		      .byte.b	#%00000000
   1403  f614		       7e		      .byte.b	#%01111110
   1404  f615		       7e		      .byte.b	#%01111110
   1405  f616		       ff		      .byte.b	#%11111111
   1406  f617		       ff		      .byte.b	#%11111111
   1407  f618		       3f		      .byte.b	#%00111111
   1408  f619		       3f		      .byte.b	#%00111111
   1409  f61a		       0f		      .byte.b	#%00001111
   1410  f61b		       0f		      .byte.b	#%00001111
   1411  f61c		       3f		      .byte.b	#%00111111
   1412  f61d		       3f		      .byte.b	#%00111111
   1413  f61e		       ff		      .byte.b	#%11111111
   1414  f61f		       ff		      .byte.b	#%11111111
   1415  f620		       7e		      .byte.b	#%01111110
   1416  f621		       7e		      .byte.b	#%01111110
   1417  f622		       00		      .byte.b	#%00000000
   1418  f623		       00		      .byte.b	#%00000000
   1419  f624
   1420  f624				   Sprite2Data
   1421  f624							; Frame 2
   1422  f624		       00		      .byte.b	#%00000000
   1423  f625		       00		      .byte.b	#%00000000
   1424  f626		       7e		      .byte.b	#%01111110
   1425  f627		       7e		      .byte.b	#%01111110
   1426  f628		       ff		      .byte.b	#%11111111
   1427  f629		       ff		      .byte.b	#%11111111
   1428  f62a		       ff		      .byte.b	#%11111111
   1429  f62b		       ff		      .byte.b	#%11111111
   1430  f62c		       0f		      .byte.b	#%00001111
   1431  f62d		       0f		      .byte.b	#%00001111
   1432  f62e		       ff		      .byte.b	#%11111111
   1433  f62f		       ff		      .byte.b	#%11111111
   1434  f630		       ff		      .byte.b	#%11111111
   1435  f631		       ff		      .byte.b	#%11111111
   1436  f632		       7e		      .byte.b	#%01111110
   1437  f633		       7e		      .byte.b	#%01111110
   1438  f634		       00		      .byte.b	#%00000000
   1439  f635		       00		      .byte.b	#%00000000
   1440  f636
   1441  f636				   Sprite3Data
   1442  f636							; Frame 3
   1443  f636		       00		      .byte.b	#%00000000
   1444  f637		       00		      .byte.b	#%00000000
   1445  f638		       7e		      .byte.b	#%01111110
   1446  f639		       7e		      .byte.b	#%01111110
   1447  f63a		       ff		      .byte.b	#%11111111
   1448  f63b		       ff		      .byte.b	#%11111111
   1449  f63c		       ff		      .byte.b	#%11111111
   1450  f63d		       ff		      .byte.b	#%11111111
   1451  f63e		       ff		      .byte.b	#%11111111
   1452  f63f		       ff		      .byte.b	#%11111111
   1453  f640		       ff		      .byte.b	#%11111111
   1454  f641		       ff		      .byte.b	#%11111111
   1455  f642		       ff		      .byte.b	#%11111111
   1456  f643		       ff		      .byte.b	#%11111111
   1457  f644		       7e		      .byte.b	#%01111110
   1458  f645		       7e		      .byte.b	#%01111110
   1459  f646		       00		      .byte.b	#%00000000
   1460  f647		       00		      .byte.b	#%00000000
   1461  f648
   1462  f648				   Sprite4Data
   1463  f648							; Frame 4
   1464  f648		       00		      .byte.b	#%00000000
   1465  f649		       00		      .byte.b	#%00000000
   1466  f64a		       1e		      .byte.b	#%00011110
   1467  f64b		       1e		      .byte.b	#%00011110
   1468  f64c		       1f		      .byte.b	#%00011111
   1469  f64d		       1f		      .byte.b	#%00011111
   1470  f64e		       0f		      .byte.b	#%00001111
   1471  f64f		       0f		      .byte.b	#%00001111
   1472  f650		       07		      .byte.b	#%00000111
   1473  f651		       07		      .byte.b	#%00000111
   1474  f652		       0f		      .byte.b	#%00001111
   1475  f653		       0f		      .byte.b	#%00001111
   1476  f654		       1f		      .byte.b	#%00011111
   1477  f655		       1f		      .byte.b	#%00011111
   1478  f656		       1e		      .byte.b	#%00011110
   1479  f657		       1e		      .byte.b	#%00011110
   1480  f658		       00		      .byte.b	#%00000000
   1481  f659		       00		      .byte.b	#%00000000
   1482  f65a
   1483  f65a				   Sprite5Data
   1484  f65a							; Frame 5
   1485  f65a		       00		      .byte.b	#%00000000
   1486  f65b		       00		      .byte.b	#%00000000
   1487  f65c		       02		      .byte.b	#%00000010
   1488  f65d		       02		      .byte.b	#%00000010
   1489  f65e		       07		      .byte.b	#%00000111
   1490  f65f		       07		      .byte.b	#%00000111
   1491  f660		       07		      .byte.b	#%00000111
   1492  f661		       07		      .byte.b	#%00000111
   1493  f662		       07		      .byte.b	#%00000111
   1494  f663		       07		      .byte.b	#%00000111
   1495  f664		       07		      .byte.b	#%00000111
   1496  f665		       07		      .byte.b	#%00000111
   1497  f666		       07		      .byte.b	#%00000111
   1498  f667		       07		      .byte.b	#%00000111
   1499  f668		       02		      .byte.b	#%00000010
   1500  f669		       02		      .byte.b	#%00000010
   1501  f66a		       00		      .byte.b	#%00000000
   1502  f66b		       00		      .byte.b	#%00000000
   1503  f66c
   1504  f66c				   Sprite6Data
   1505  f66c							; Frame 6
   1506  f66c		       00		      .byte.b	#%00000000
   1507  f66d		       00		      .byte.b	#%00000000
   1508  f66e		       00		      .byte.b	#%00000000
   1509  f66f		       00		      .byte.b	#%00000000
   1510  f670		       00		      .byte.b	#%00000000
   1511  f671		       03		      .byte.b	#%00000011
   1512  f672		       03		      .byte.b	#%00000011
   1513  f673		       07		      .byte.b	#%00000111
   1514  f674		       07		      .byte.b	#%00000111
   1515  f675		       07		      .byte.b	#%00000111
   1516  f676		       07		      .byte.b	#%00000111
   1517  f677		       03		      .byte.b	#%00000011
   1518  f678		       03		      .byte.b	#%00000011
   1519  f679		       00		      .byte.b	#%00000000
   1520  f67a		       00		      .byte.b	#%00000000
   1521  f67b		       00		      .byte.b	#%00000000
   1522  f67c		       00		      .byte.b	#%00000000
   1523  f67d		       00		      .byte.b	#%00000000
   1524  f67e
   1525  f67e				   Sprite7Data
   1526  f67e							; Frame 7
   1527  f67e		       00		      .byte.b	#%00000000
   1528  f67f		       00		      .byte.b	#%00000000
   1529  f680		       00		      .byte.b	#%00000000
   1530  f681		       00		      .byte.b	#%00000000
   1531  f682		       00		      .byte.b	#%00000000
   1532  f683		       00		      .byte.b	#%00000000
   1533  f684		       00		      .byte.b	#%00000000
   1534  f685		       07		      .byte.b	#%00000111
   1535  f686		       07		      .byte.b	#%00000111
   1536  f687		       07		      .byte.b	#%00000111
   1537  f688		       07		      .byte.b	#%00000111
   1538  f689		       00		      .byte.b	#%00000000
   1539  f68a		       00		      .byte.b	#%00000000
   1540  f68b		       00		      .byte.b	#%00000000
   1541  f68c		       00		      .byte.b	#%00000000
   1542  f68d		       00		      .byte.b	#%00000000
   1543  f68e		       00		      .byte.b	#%00000000
   1544  f68f		       00		      .byte.b	#%00000000
   1545  f690
   1546  f690				   Sprite8Data
   1547  f690							; Frame 8
   1548  f690		       00		      .byte.b	#%00000000
   1549  f691		       00		      .byte.b	#%00000000
   1550  f692		       81		      .byte.b	#%10000001
   1551  f693		       81		      .byte.b	#%10000001
   1552  f694		       44		      .byte.b	#%01000100
   1553  f695		       44		      .byte.b	#%01000100
   1554  f696		       38		      .byte.b	#%00111000
   1555  f697		       38		      .byte.b	#%00111000
   1556  f698		       46		      .byte.b	#%01000110
   1557  f699		       46		      .byte.b	#%01000110
   1558  f69a		       81		      .byte.b	#%10000001
   1559  f69b		       81		      .byte.b	#%10000001
   1560  f69c		       00		      .byte.b	#%00000000
   1561  f69d		       00		      .byte.b	#%00000000
   1562  f69e		       00		      .byte.b	#%00000000
   1563  f69f		       00		      .byte.b	#%00000000
   1564  f6a0
   1565  f6a0				   Sprite9Data
   1566  f6a0							; Frame 9
   1567  f6a0		       00		      .byte.b	#%00000000
   1568  f6a1		       00		      .byte.b	#%00000000
   1569  f6a2		       10		      .byte.b	#%00010000
   1570  f6a3		       10		      .byte.b	#%00010000
   1571  f6a4		       81		      .byte.b	#%10000001
   1572  f6a5		       81		      .byte.b	#%10000001
   1573  f6a6		       00		      .byte.b	#%00000000
   1574  f6a7		       00		      .byte.b	#%00000000
   1575  f6a8		       80		      .byte.b	#%10000000
   1576  f6a9		       80		      .byte.b	#%10000000
   1577  f6aa		       01		      .byte.b	#%00000001
   1578  f6ab		       01		      .byte.b	#%00000001
   1579  f6ac		       00		      .byte.b	#%00000000
   1580  f6ad		       00		      .byte.b	#%00000000
   1581  f6ae		       00		      .byte.b	#%00000000
   1582  f6af		       00		      .byte.b	#%00000000
   1583  f6b0
   1584  f6b0							;==================================================================================
   1585  f6b0							; Sprite Data - Ghost
   1586  f6b0							;==================================================================================
   1587  f6b0
   1588  f6b0				   SpriteGhostData
   1589  f6b0		       00		      .byte.b	#%00000000
   1590  f6b1		       00		      .byte.b	#%00000000
   1591  f6b2		       55		      .byte.b	#%01010101
   1592  f6b3		       55		      .byte.b	#%01010101
   1593  f6b4		       ff		      .byte.b	#%11111111
   1594  f6b5		       ff		      .byte.b	#%11111111
   1595  f6b6		       ff		      .byte.b	#%11111111
   1596  f6b7		       99		      .byte.b	#%10011001
   1597  f6b8		       99		      .byte.b	#%10011001
   1598  f6b9		       bb		      .byte.b	#%10111011
   1599  f6ba		       bb		      .byte.b	#%10111011
   1600  f6bb		       ff		      .byte.b	#%11111111
   1601  f6bc		       7e		      .byte.b	#%01111110
   1602  f6bd		       7e		      .byte.b	#%01111110
   1603  f6be		       7e		      .byte.b	#%01111110
   1604  f6bf		       7e		      .byte.b	#%01111110
   1605  f6c0		       00		      .byte.b	#%00000000
   1606  f6c1		       00		      .byte.b	#%00000000
   1607  f6c2
   1608  f6c2							;==================================================================================
   1609  f6c2							; Sprite Data - Lives
   1610  f6c2							;==================================================================================
   1611  f6c2
   1612  f6c2				   SpriteLifeData
   1613  f6c2		       00		      .byte.b	#%00000000
   1614  f6c3		       00		      .byte.b	#%00000000
   1615  f6c4		       00		      .byte.b	#%00000000
   1616  f6c5		       00		      .byte.b	#%00000000
   1617  f6c6		       00		      .byte.b	#%00000000
   1618  f6c7		       00		      .byte.b	#%00000000
   1619  f6c8		       00		      .byte.b	#%00000000
   1620  f6c9		       00		      .byte.b	#%00000000
   1621  f6ca		       00		      .byte.b	#%00000000
   1622  f6cb		       00		      .byte.b	#%00000000
   1623  f6cc		       00		      .byte.b	#%00000000
   1624  f6cd		       00		      .byte.b	#%00000000
   1625  f6ce		       00		      .byte.b	#%00000000
   1626  f6cf		       00		      .byte.b	#%00000000
   1627  f6d0		       00		      .byte.b	#%00000000
   1628  f6d1		       00		      .byte.b	#%00000000
   1629  f6d2		       00		      .byte.b	#%00000000
   1630  f6d3		       00		      .byte.b	#%00000000
   1631  f6d4		       3c		      .byte.b	#%00111100
   1632  f6d5		       7e		      .byte.b	#%01111110
   1633  f6d6		       ff		      .byte.b	#%11111111
   1634  f6d7		       ff		      .byte.b	#%11111111
   1635  f6d8		       ff		      .byte.b	#%11111111
   1636  f6d9		       ff		      .byte.b	#%11111111
   1637  f6da		       ff		      .byte.b	#%11111111
   1638  f6db		       ff		      .byte.b	#%11111111
   1639  f6dc		       ff		      .byte.b	#%11111111
   1640  f6dd		       7e		      .byte.b	#%01111110
   1641  f6de		       3c		      .byte.b	#%00111100
   1642  f6df		       00		      .byte.b	#%00000000
   1643  f6e0
   1644  f6e0							;==================================================================================
   1645  f6e0							; free space check before page boundry
   1646  f6e0							;==================================================================================
   1647  f6e0
 End of Sprite0Data is:  $f6e0
   1648  f6e0					      echo	"End of Sprite0Data is: ", *
   1649  f700		       00 00 00 00*	      align	256
   1650  f700
   1651  f700							;==================================================================================
   1652  f700							; Board Data
   1653  f700							;==================================================================================
   1654  f700
------- FILE MainBoard.asm LEVEL 2 PASS 2
      0  f700					      include	"MainBoard.asm"
      1  f700				   MainBoard
      2  f700
      3  f700				   MainBoard_STRIP_0
      4  f700		       50		      .byte.b	80
      5  f701		       00		      .byte.b	0
      6  f702		       f0		      .byte.b	240
      7  f703		       f0		      .byte.b	240
      8  f704		       f0		      .byte.b	240
      9  f705		       10		      .byte.b	16
     10  f706		       10		      .byte.b	16
     11  f707		       10		      .byte.b	16
     12  f708		       10		      .byte.b	16
     13  f709		       10		      .byte.b	16
     14  f70a		       10		      .byte.b	16
     15  f70b		       10		      .byte.b	16
     16  f70c		       10		      .byte.b	16
     17  f70d		       10		      .byte.b	16
     18  f70e		       10		      .byte.b	16
     19  f70f		       10		      .byte.b	16
     20  f710		       10		      .byte.b	16
     21  f711		       10		      .byte.b	16
     22  f712		       10		      .byte.b	16
     23  f713		       10		      .byte.b	16
     24  f714		       10		      .byte.b	16
     25  f715		       10		      .byte.b	16
     26  f716		       10		      .byte.b	16
     27  f717		       10		      .byte.b	16
     28  f718		       10		      .byte.b	16
     29  f719		       10		      .byte.b	16
     30  f71a		       10		      .byte.b	16
     31  f71b		       10		      .byte.b	16
     32  f71c		       10		      .byte.b	16
     33  f71d		       10		      .byte.b	16
     34  f71e		       10		      .byte.b	16
     35  f71f		       10		      .byte.b	16
     36  f720		       10		      .byte.b	16
     37  f721		       10		      .byte.b	16
     38  f722		       10		      .byte.b	16
     39  f723		       10		      .byte.b	16
     40  f724		       10		      .byte.b	16
     41  f725		       10		      .byte.b	16
     42  f726		       10		      .byte.b	16
     43  f727		       10		      .byte.b	16
     44  f728		       10		      .byte.b	16
     45  f729		       10		      .byte.b	16
     46  f72a		       10		      .byte.b	16
     47  f72b		       10		      .byte.b	16
     48  f72c		       10		      .byte.b	16
     49  f72d		       10		      .byte.b	16
     50  f72e		       10		      .byte.b	16
     51  f72f		       10		      .byte.b	16
     52  f730		       10		      .byte.b	16
     53  f731		       10		      .byte.b	16
     54  f732		       10		      .byte.b	16
     55  f733		       10		      .byte.b	16
     56  f734		       10		      .byte.b	16
     57  f735		       10		      .byte.b	16
     58  f736		       10		      .byte.b	16
     59  f737		       10		      .byte.b	16
     60  f738		       10		      .byte.b	16
     61  f739		       f0		      .byte.b	240
     62  f73a		       f0		      .byte.b	240
     63  f73b		       f0		      .byte.b	240
     64  f73c		       f0		      .byte.b	240
     65  f73d		       80		      .byte.b	128
     66  f73e		       80		      .byte.b	128
     67  f73f		       80		      .byte.b	128
     68  f740		       80		      .byte.b	128
     69  f741		       80		      .byte.b	128
     70  f742		       80		      .byte.b	128
     71  f743		       80		      .byte.b	128
     72  f744		       80		      .byte.b	128
     73  f745		       80		      .byte.b	128
     74  f746		       80		      .byte.b	128
     75  f747		       80		      .byte.b	128
     76  f748		       80		      .byte.b	128
     77  f749		       80		      .byte.b	128
     78  f74a		       80		      .byte.b	128
     79  f74b		       80		      .byte.b	128
     80  f74c		       80		      .byte.b	128
     81  f74d		       80		      .byte.b	128
     82  f74e		       80		      .byte.b	128
     83  f74f		       80		      .byte.b	128
     84  f750		       80		      .byte.b	128
     85  f751		       f0		      .byte.b	240
     86  f752		       f0		      .byte.b	240
     87  f753		       f0		      .byte.b	240
     88  f754		       f0		      .byte.b	240
     89  f755		       00		      .byte.b	0
     90  f756		       00		      .byte.b	0
     91  f757		       00		      .byte.b	0
     92  f758		       00		      .byte.b	0
     93  f759		       00		      .byte.b	0
     94  f75a		       00		      .byte.b	0
     95  f75b		       00		      .byte.b	0
     96  f75c		       00		      .byte.b	0
     97  f75d		       00		      .byte.b	0
     98  f75e		       00		      .byte.b	0
     99  f75f		       00		      .byte.b	0
    100  f760		       00		      .byte.b	0
    101  f761		       00		      .byte.b	0
    102  f762		       00		      .byte.b	0
    103  f763		       00		      .byte.b	0
    104  f764		       00		      .byte.b	0
    105  f765		       00		      .byte.b	0
    106  f766		       00		      .byte.b	0
    107  f767		       00		      .byte.b	0
    108  f768		       00		      .byte.b	0
    109  f769		       00		      .byte.b	0
    110  f76a		       00		      .byte.b	0
    111  f76b		       f0		      .byte.b	240
    112  f76c		       f0		      .byte.b	240
    113  f76d		       f0		      .byte.b	240
    114  f76e		       80		      .byte.b	128
    115  f76f		       80		      .byte.b	128
    116  f770		       80		      .byte.b	128
    117  f771		       80		      .byte.b	128
    118  f772		       80		      .byte.b	128
    119  f773		       80		      .byte.b	128
    120  f774		       80		      .byte.b	128
    121  f775		       80		      .byte.b	128
    122  f776		       80		      .byte.b	128
    123  f777		       80		      .byte.b	128
    124  f778		       80		      .byte.b	128
    125  f779		       80		      .byte.b	128
    126  f77a		       80		      .byte.b	128
    127  f77b		       80		      .byte.b	128
    128  f77c		       80		      .byte.b	128
    129  f77d		       80		      .byte.b	128
    130  f77e		       80		      .byte.b	128
    131  f77f		       80		      .byte.b	128
    132  f780		       80		      .byte.b	128
    133  f781		       f0		      .byte.b	240
    134  f782		       f0		      .byte.b	240
    135  f783		       f0		      .byte.b	240
    136  f784		       f0		      .byte.b	240
    137  f785		       10		      .byte.b	16
    138  f786		       10		      .byte.b	16
    139  f787		       10		      .byte.b	16
    140  f788		       10		      .byte.b	16
    141  f789		       10		      .byte.b	16
    142  f78a		       10		      .byte.b	16
    143  f78b		       10		      .byte.b	16
    144  f78c		       10		      .byte.b	16
    145  f78d		       10		      .byte.b	16
    146  f78e		       10		      .byte.b	16
    147  f78f		       10		      .byte.b	16
    148  f790		       10		      .byte.b	16
    149  f791		       10		      .byte.b	16
    150  f792		       10		      .byte.b	16
    151  f793		       10		      .byte.b	16
    152  f794		       10		      .byte.b	16
    153  f795		       10		      .byte.b	16
    154  f796		       10		      .byte.b	16
    155  f797		       10		      .byte.b	16
    156  f798		       10		      .byte.b	16
    157  f799		       10		      .byte.b	16
    158  f79a		       10		      .byte.b	16
    159  f79b		       10		      .byte.b	16
    160  f79c		       10		      .byte.b	16
    161  f79d		       10		      .byte.b	16
    162  f79e		       10		      .byte.b	16
    163  f79f		       10		      .byte.b	16
    164  f7a0		       10		      .byte.b	16
    165  f7a1		       10		      .byte.b	16
    166  f7a2		       10		      .byte.b	16
    167  f7a3		       10		      .byte.b	16
    168  f7a4		       10		      .byte.b	16
    169  f7a5		       10		      .byte.b	16
    170  f7a6		       10		      .byte.b	16
    171  f7a7		       10		      .byte.b	16
    172  f7a8		       10		      .byte.b	16
    173  f7a9		       10		      .byte.b	16
    174  f7aa		       10		      .byte.b	16
    175  f7ab		       10		      .byte.b	16
    176  f7ac		       10		      .byte.b	16
    177  f7ad		       10		      .byte.b	16
    178  f7ae		       10		      .byte.b	16
    179  f7af		       10		      .byte.b	16
    180  f7b0		       10		      .byte.b	16
    181  f7b1		       10		      .byte.b	16
    182  f7b2		       10		      .byte.b	16
    183  f7b3		       10		      .byte.b	16
    184  f7b4		       10		      .byte.b	16
    185  f7b5		       10		      .byte.b	16
    186  f7b6		       10		      .byte.b	16
    187  f7b7		       10		      .byte.b	16
    188  f7b8		       10		      .byte.b	16
    189  f7b9		       10		      .byte.b	16
    190  f7ba		       f0		      .byte.b	240
    191  f7bb		       f0		      .byte.b	240
    192  f7bc		       f0		      .byte.b	240
    193  f7bd		       f0		      .byte.b	240
    194  f7be		       00		      .byte.b	0
    195  f7bf		       00		      .byte.b	0
    196  f7c0				   MainBoard_STRIP_1
    197  f7c0		       aa		      .byte.b	170
    198  f7c1		       00		      .byte.b	0
    199  f7c2		       ff		      .byte.b	255
    200  f7c3		       ff		      .byte.b	255
    201  f7c4		       ff		      .byte.b	255
    202  f7c5		       00		      .byte.b	0
    203  f7c6		       00		      .byte.b	0
    204  f7c7		       00		      .byte.b	0
    205  f7c8		       00		      .byte.b	0
    206  f7c9		       00		      .byte.b	0
    207  f7ca		       00		      .byte.b	0
    208  f7cb		       00		      .byte.b	0
    209  f7cc		       00		      .byte.b	0
    210  f7cd		       00		      .byte.b	0
    211  f7ce		       00		      .byte.b	0
    212  f7cf		       00		      .byte.b	0
    213  f7d0		       00		      .byte.b	0
    214  f7d1		       00		      .byte.b	0
    215  f7d2		       00		      .byte.b	0
    216  f7d3		       00		      .byte.b	0
    217  f7d4		       00		      .byte.b	0
    218  f7d5		       00		      .byte.b	0
    219  f7d6		       00		      .byte.b	0
    220  f7d7		       00		      .byte.b	0
    221  f7d8		       00		      .byte.b	0
    222  f7d9		       00		      .byte.b	0
    223  f7da		       00		      .byte.b	0
    224  f7db		       00		      .byte.b	0
    225  f7dc		       00		      .byte.b	0
    226  f7dd		       00		      .byte.b	0
    227  f7de		       00		      .byte.b	0
    228  f7df		       e3		      .byte.b	227
    229  f7e0		       e3		      .byte.b	227
    230  f7e1		       e3		      .byte.b	227
    231  f7e2		       e3		      .byte.b	227
    232  f7e3		       03		      .byte.b	3
    233  f7e4		       03		      .byte.b	3
    234  f7e5		       03		      .byte.b	3
    235  f7e6		       03		      .byte.b	3
    236  f7e7		       03		      .byte.b	3
    237  f7e8		       03		      .byte.b	3
    238  f7e9		       03		      .byte.b	3
    239  f7ea		       03		      .byte.b	3
    240  f7eb		       03		      .byte.b	3
    241  f7ec		       03		      .byte.b	3
    242  f7ed		       03		      .byte.b	3
    243  f7ee		       03		      .byte.b	3
    244  f7ef		       03		      .byte.b	3
    245  f7f0		       03		      .byte.b	3
    246  f7f1		       03		      .byte.b	3
    247  f7f2		       03		      .byte.b	3
    248  f7f3		       03		      .byte.b	3
    249  f7f4		       03		      .byte.b	3
    250  f7f5		       03		      .byte.b	3
    251  f7f6		       03		      .byte.b	3
    252  f7f7		       03		      .byte.b	3
    253  f7f8		       03		      .byte.b	3
    254  f7f9		       e3		      .byte.b	227
    255  f7fa		       e3		      .byte.b	227
    256  f7fb		       e3		      .byte.b	227
    257  f7fc		       e3		      .byte.b	227
    258  f7fd		       00		      .byte.b	0
    259  f7fe		       00		      .byte.b	0
    260  f7ff		       00		      .byte.b	0
    261  f800		       00		      .byte.b	0
    262  f801		       00		      .byte.b	0
    263  f802		       00		      .byte.b	0
    264  f803		       00		      .byte.b	0
    265  f804		       00		      .byte.b	0
    266  f805		       00		      .byte.b	0
    267  f806		       00		      .byte.b	0
    268  f807		       00		      .byte.b	0
    269  f808		       00		      .byte.b	0
    270  f809		       00		      .byte.b	0
    271  f80a		       00		      .byte.b	0
    272  f80b		       00		      .byte.b	0
    273  f80c		       00		      .byte.b	0
    274  f80d		       00		      .byte.b	0
    275  f80e		       00		      .byte.b	0
    276  f80f		       00		      .byte.b	0
    277  f810		       00		      .byte.b	0
    278  f811		       00		      .byte.b	0
    279  f812		       1f		      .byte.b	31
    280  f813		       1f		      .byte.b	31
    281  f814		       1f		      .byte.b	31
    282  f815		       00		      .byte.b	0
    283  f816		       00		      .byte.b	0
    284  f817		       00		      .byte.b	0
    285  f818		       00		      .byte.b	0
    286  f819		       00		      .byte.b	0
    287  f81a		       00		      .byte.b	0
    288  f81b		       00		      .byte.b	0
    289  f81c		       00		      .byte.b	0
    290  f81d		       00		      .byte.b	0
    291  f81e		       00		      .byte.b	0
    292  f81f		       00		      .byte.b	0
    293  f820		       00		      .byte.b	0
    294  f821		       00		      .byte.b	0
    295  f822		       00		      .byte.b	0
    296  f823		       00		      .byte.b	0
    297  f824		       00		      .byte.b	0
    298  f825		       00		      .byte.b	0
    299  f826		       00		      .byte.b	0
    300  f827		       00		      .byte.b	0
    301  f828		       00		      .byte.b	0
    302  f829		       00		      .byte.b	0
    303  f82a		       00		      .byte.b	0
    304  f82b		       1f		      .byte.b	31
    305  f82c		       1f		      .byte.b	31
    306  f82d		       00		      .byte.b	0
    307  f82e		       00		      .byte.b	0
    308  f82f		       00		      .byte.b	0
    309  f830		       00		      .byte.b	0
    310  f831		       00		      .byte.b	0
    311  f832		       00		      .byte.b	0
    312  f833		       00		      .byte.b	0
    313  f834		       00		      .byte.b	0
    314  f835		       00		      .byte.b	0
    315  f836		       00		      .byte.b	0
    316  f837		       00		      .byte.b	0
    317  f838		       00		      .byte.b	0
    318  f839		       00		      .byte.b	0
    319  f83a		       00		      .byte.b	0
    320  f83b		       00		      .byte.b	0
    321  f83c		       00		      .byte.b	0
    322  f83d		       00		      .byte.b	0
    323  f83e		       00		      .byte.b	0
    324  f83f		       00		      .byte.b	0
    325  f840		       00		      .byte.b	0
    326  f841		       00		      .byte.b	0
    327  f842		       1f		      .byte.b	31
    328  f843		       1f		      .byte.b	31
    329  f844		       1f		      .byte.b	31
    330  f845		       00		      .byte.b	0
    331  f846		       00		      .byte.b	0
    332  f847		       00		      .byte.b	0
    333  f848		       00		      .byte.b	0
    334  f849		       00		      .byte.b	0
    335  f84a		       00		      .byte.b	0
    336  f84b		       00		      .byte.b	0
    337  f84c		       00		      .byte.b	0
    338  f84d		       00		      .byte.b	0
    339  f84e		       00		      .byte.b	0
    340  f84f		       00		      .byte.b	0
    341  f850		       00		      .byte.b	0
    342  f851		       00		      .byte.b	0
    343  f852		       00		      .byte.b	0
    344  f853		       00		      .byte.b	0
    345  f854		       00		      .byte.b	0
    346  f855		       00		      .byte.b	0
    347  f856		       00		      .byte.b	0
    348  f857		       00		      .byte.b	0
    349  f858		       00		      .byte.b	0
    350  f859		       00		      .byte.b	0
    351  f85a		       00		      .byte.b	0
    352  f85b		       f8		      .byte.b	248
    353  f85c		       f8		      .byte.b	248
    354  f85d		       f8		      .byte.b	248
    355  f85e		       f8		      .byte.b	248
    356  f85f		       f8		      .byte.b	248
    357  f860		       f8		      .byte.b	248
    358  f861		       f8		      .byte.b	248
    359  f862		       f8		      .byte.b	248
    360  f863		       f8		      .byte.b	248
    361  f864		       00		      .byte.b	0
    362  f865		       00		      .byte.b	0
    363  f866		       00		      .byte.b	0
    364  f867		       00		      .byte.b	0
    365  f868		       00		      .byte.b	0
    366  f869		       00		      .byte.b	0
    367  f86a		       00		      .byte.b	0
    368  f86b		       00		      .byte.b	0
    369  f86c		       00		      .byte.b	0
    370  f86d		       00		      .byte.b	0
    371  f86e		       00		      .byte.b	0
    372  f86f		       00		      .byte.b	0
    373  f870		       00		      .byte.b	0
    374  f871		       00		      .byte.b	0
    375  f872		       00		      .byte.b	0
    376  f873		       00		      .byte.b	0
    377  f874		       00		      .byte.b	0
    378  f875		       00		      .byte.b	0
    379  f876		       00		      .byte.b	0
    380  f877		       00		      .byte.b	0
    381  f878		       00		      .byte.b	0
    382  f879		       00		      .byte.b	0
    383  f87a		       ff		      .byte.b	255
    384  f87b		       ff		      .byte.b	255
    385  f87c		       ff		      .byte.b	255
    386  f87d		       ff		      .byte.b	255
    387  f87e		       00		      .byte.b	0
    388  f87f		       00		      .byte.b	0
    389  f880				   MainBoard_STRIP_2
    390  f880		       00		      .byte.b	0
    391  f881		       00		      .byte.b	0
    392  f882		       ff		      .byte.b	255
    393  f883		       ff		      .byte.b	255
    394  f884		       ff		      .byte.b	255
    395  f885		       80		      .byte.b	128
    396  f886		       80		      .byte.b	128
    397  f887		       80		      .byte.b	128
    398  f888		       80		      .byte.b	128
    399  f889		       80		      .byte.b	128
    400  f88a		       80		      .byte.b	128
    401  f88b		       80		      .byte.b	128
    402  f88c		       80		      .byte.b	128
    403  f88d		       80		      .byte.b	128
    404  f88e		       80		      .byte.b	128
    405  f88f		       80		      .byte.b	128
    406  f890		       80		      .byte.b	128
    407  f891		       80		      .byte.b	128
    408  f892		       80		      .byte.b	128
    409  f893		       80		      .byte.b	128
    410  f894		       80		      .byte.b	128
    411  f895		       80		      .byte.b	128
    412  f896		       80		      .byte.b	128
    413  f897		       80		      .byte.b	128
    414  f898		       80		      .byte.b	128
    415  f899		       80		      .byte.b	128
    416  f89a		       80		      .byte.b	128
    417  f89b		       80		      .byte.b	128
    418  f89c		       80		      .byte.b	128
    419  f89d		       80		      .byte.b	128
    420  f89e		       80		      .byte.b	128
    421  f89f		       8f		      .byte.b	143
    422  f8a0		       8f		      .byte.b	143
    423  f8a1		       8f		      .byte.b	143
    424  f8a2		       8f		      .byte.b	143
    425  f8a3		       01		      .byte.b	1
    426  f8a4		       01		      .byte.b	1
    427  f8a5		       01		      .byte.b	1
    428  f8a6		       01		      .byte.b	1
    429  f8a7		       01		      .byte.b	1
    430  f8a8		       01		      .byte.b	1
    431  f8a9		       01		      .byte.b	1
    432  f8aa		       01		      .byte.b	1
    433  f8ab		       01		      .byte.b	1
    434  f8ac		       01		      .byte.b	1
    435  f8ad		       01		      .byte.b	1
    436  f8ae		       01		      .byte.b	1
    437  f8af		       01		      .byte.b	1
    438  f8b0		       01		      .byte.b	1
    439  f8b1		       01		      .byte.b	1
    440  f8b2		       01		      .byte.b	1
    441  f8b3		       01		      .byte.b	1
    442  f8b4		       01		      .byte.b	1
    443  f8b5		       01		      .byte.b	1
    444  f8b6		       01		      .byte.b	1
    445  f8b7		       01		      .byte.b	1
    446  f8b8		       01		      .byte.b	1
    447  f8b9		       e1		      .byte.b	225
    448  f8ba		       e1		      .byte.b	225
    449  f8bb		       e1		      .byte.b	225
    450  f8bc		       e1		      .byte.b	225
    451  f8bd		       80		      .byte.b	128
    452  f8be		       80		      .byte.b	128
    453  f8bf		       80		      .byte.b	128
    454  f8c0		       80		      .byte.b	128
    455  f8c1		       80		      .byte.b	128
    456  f8c2		       80		      .byte.b	128
    457  f8c3		       80		      .byte.b	128
    458  f8c4		       80		      .byte.b	128
    459  f8c5		       80		      .byte.b	128
    460  f8c6		       80		      .byte.b	128
    461  f8c7		       80		      .byte.b	128
    462  f8c8		       80		      .byte.b	128
    463  f8c9		       80		      .byte.b	128
    464  f8ca		       80		      .byte.b	128
    465  f8cb		       80		      .byte.b	128
    466  f8cc		       80		      .byte.b	128
    467  f8cd		       80		      .byte.b	128
    468  f8ce		       80		      .byte.b	128
    469  f8cf		       80		      .byte.b	128
    470  f8d0		       80		      .byte.b	128
    471  f8d1		       80		      .byte.b	128
    472  f8d2		       8f		      .byte.b	143
    473  f8d3		       8f		      .byte.b	143
    474  f8d4		       8f		      .byte.b	143
    475  f8d5		       00		      .byte.b	0
    476  f8d6		       00		      .byte.b	0
    477  f8d7		       00		      .byte.b	0
    478  f8d8		       00		      .byte.b	0
    479  f8d9		       00		      .byte.b	0
    480  f8da		       00		      .byte.b	0
    481  f8db		       00		      .byte.b	0
    482  f8dc		       00		      .byte.b	0
    483  f8dd		       00		      .byte.b	0
    484  f8de		       00		      .byte.b	0
    485  f8df		       00		      .byte.b	0
    486  f8e0		       00		      .byte.b	0
    487  f8e1		       00		      .byte.b	0
    488  f8e2		       00		      .byte.b	0
    489  f8e3		       00		      .byte.b	0
    490  f8e4		       00		      .byte.b	0
    491  f8e5		       00		      .byte.b	0
    492  f8e6		       00		      .byte.b	0
    493  f8e7		       00		      .byte.b	0
    494  f8e8		       00		      .byte.b	0
    495  f8e9		       00		      .byte.b	0
    496  f8ea		       e0		      .byte.b	224
    497  f8eb		       e3		      .byte.b	227
    498  f8ec		       e3		      .byte.b	227
    499  f8ed		       20		      .byte.b	32
    500  f8ee		       20		      .byte.b	32
    501  f8ef		       20		      .byte.b	32
    502  f8f0		       20		      .byte.b	32
    503  f8f1		       20		      .byte.b	32
    504  f8f2		       20		      .byte.b	32
    505  f8f3		       20		      .byte.b	32
    506  f8f4		       20		      .byte.b	32
    507  f8f5		       20		      .byte.b	32
    508  f8f6		       20		      .byte.b	32
    509  f8f7		       20		      .byte.b	32
    510  f8f8		       20		      .byte.b	32
    511  f8f9		       20		      .byte.b	32
    512  f8fa		       20		      .byte.b	32
    513  f8fb		       20		      .byte.b	32
    514  f8fc		       20		      .byte.b	32
    515  f8fd		       20		      .byte.b	32
    516  f8fe		       20		      .byte.b	32
    517  f8ff		       20		      .byte.b	32
    518  f900		       20		      .byte.b	32
    519  f901		       20		      .byte.b	32
    520  f902		       3f		      .byte.b	63
    521  f903		       ff		      .byte.b	255
    522  f904		       ff		      .byte.b	255
    523  f905		       00		      .byte.b	0
    524  f906		       00		      .byte.b	0
    525  f907		       00		      .byte.b	0
    526  f908		       00		      .byte.b	0
    527  f909		       00		      .byte.b	0
    528  f90a		       00		      .byte.b	0
    529  f90b		       00		      .byte.b	0
    530  f90c		       00		      .byte.b	0
    531  f90d		       00		      .byte.b	0
    532  f90e		       00		      .byte.b	0
    533  f90f		       00		      .byte.b	0
    534  f910		       00		      .byte.b	0
    535  f911		       00		      .byte.b	0
    536  f912		       00		      .byte.b	0
    537  f913		       00		      .byte.b	0
    538  f914		       00		      .byte.b	0
    539  f915		       00		      .byte.b	0
    540  f916		       00		      .byte.b	0
    541  f917		       00		      .byte.b	0
    542  f918		       00		      .byte.b	0
    543  f919		       00		      .byte.b	0
    544  f91a		       00		      .byte.b	0
    545  f91b		       8f		      .byte.b	143
    546  f91c		       8f		      .byte.b	143
    547  f91d		       8f		      .byte.b	143
    548  f91e		       8f		      .byte.b	143
    549  f91f		       8f		      .byte.b	143
    550  f920		       8f		      .byte.b	143
    551  f921		       8f		      .byte.b	143
    552  f922		       8f		      .byte.b	143
    553  f923		       8f		      .byte.b	143
    554  f924		       80		      .byte.b	128
    555  f925		       80		      .byte.b	128
    556  f926		       80		      .byte.b	128
    557  f927		       80		      .byte.b	128
    558  f928		       80		      .byte.b	128
    559  f929		       80		      .byte.b	128
    560  f92a		       80		      .byte.b	128
    561  f92b		       80		      .byte.b	128
    562  f92c		       80		      .byte.b	128
    563  f92d		       80		      .byte.b	128
    564  f92e		       80		      .byte.b	128
    565  f92f		       80		      .byte.b	128
    566  f930		       80		      .byte.b	128
    567  f931		       80		      .byte.b	128
    568  f932		       80		      .byte.b	128
    569  f933		       80		      .byte.b	128
    570  f934		       80		      .byte.b	128
    571  f935		       80		      .byte.b	128
    572  f936		       80		      .byte.b	128
    573  f937		       80		      .byte.b	128
    574  f938		       80		      .byte.b	128
    575  f939		       80		      .byte.b	128
    576  f93a		       ff		      .byte.b	255
    577  f93b		       ff		      .byte.b	255
    578  f93c		       ff		      .byte.b	255
    579  f93d		       ff		      .byte.b	255
    580  f93e		       00		      .byte.b	0
    581  f93f		       00		      .byte.b	0
    582  f940							;end
    583  f940
------- FILE PacMan.asm
   1656  f940
   1657  f940							;===============================================================================
   1658  f940							; free space check before page boundry
   1659  f940							;===============================================================================
   1660  f940
 End of MainBoard.asm is:  $f940
   1661  f940					      echo	"End of MainBoard.asm is: ", *
   1662  fa00		       00 00 00 00*	      align	256
   1663  fa00
   1664  fa00							;==================================================================================
   1665  fa00							; Bottom Data
   1666  fa00							;==================================================================================
   1667  fa00
   1668  fa00				   BottomData
   1669  fa00
   1670  fa00							; 0
   1671  fa00		       00		      .byte.b	%00000000
   1672  fa01		       7e		      .byte.b	%01111110
   1673  fa02		       7e		      .byte.b	%01111110
   1674  fa03		       e7		      .byte.b	%11100111
   1675  fa04		       e7		      .byte.b	%11100111
   1676  fa05		       c3		      .byte.b	%11000011
   1677  fa06		       c3		      .byte.b	%11000011
   1678  fa07		       c3		      .byte.b	%11000011
   1679  fa08		       c3		      .byte.b	%11000011
   1680  fa09		       c3		      .byte.b	%11000011
   1681  fa0a		       e7		      .byte.b	%11100111
   1682  fa0b		       e7		      .byte.b	%11100111
   1683  fa0c		       7e		      .byte.b	%01111110
   1684  fa0d		       7e		      .byte.b	%01111110
   1685  fa0e
   1686  fa0e							; 1
   1687  fa0e		       00		      .byte.b	%00000000
   1688  fa0f		       ff		      .byte.b	%11111111
   1689  fa10		       ff		      .byte.b	%11111111
   1690  fa11		       1c		      .byte.b	%00011100
   1691  fa12		       1c		      .byte.b	%00011100
   1692  fa13		       1c		      .byte.b	%00011100
   1693  fa14		       1c		      .byte.b	%00011100
   1694  fa15		       1c		      .byte.b	%00011100
   1695  fa16		       1c		      .byte.b	%00011100
   1696  fa17		       1c		      .byte.b	%00011100
   1697  fa18		       fc		      .byte.b	%11111100
   1698  fa19		       7c		      .byte.b	%01111100
   1699  fa1a		       3c		      .byte.b	%00111100
   1700  fa1b		       1c		      .byte.b	%00011100
   1701  fa1c
   1702  fa1c							; 2
   1703  fa1c		       00		      .byte.b	%00000000
   1704  fa1d		       ff		      .byte.b	%11111111
   1705  fa1e		       ff		      .byte.b	%11111111
   1706  fa1f		       e0		      .byte.b	%11100000
   1707  fa20		       e0		      .byte.b	%11100000
   1708  fa21		       38		      .byte.b	%00111000
   1709  fa22		       0e		      .byte.b	%00001110
   1710  fa23		       07		      .byte.b	%00000111
   1711  fa24		       03		      .byte.b	%00000011
   1712  fa25		       c3		      .byte.b	%11000011
   1713  fa26		       c3		      .byte.b	%11000011
   1714  fa27		       e7		      .byte.b	%11100111
   1715  fa28		       7e		      .byte.b	%01111110
   1716  fa29		       3c		      .byte.b	%00111100
   1717  fa2a
   1718  fa2a							; 3
   1719  fa2a		       00		      .byte.b	%00000000
   1720  fa2b		       3c		      .byte.b	%00111100
   1721  fa2c		       7e		      .byte.b	%01111110
   1722  fa2d		       ef		      .byte.b	%11101111
   1723  fa2e		       c7		      .byte.b	%11000111
   1724  fa2f		       07		      .byte.b	%00000111
   1725  fa30		       0e		      .byte.b	%00001110
   1726  fa31		       1c		      .byte.b	%00011100
   1727  fa32		       0e		      .byte.b	%00001110
   1728  fa33		       07		      .byte.b	%00000111
   1729  fa34		       c7		      .byte.b	%11000111
   1730  fa35		       ef		      .byte.b	%11101111
   1731  fa36		       7e		      .byte.b	%01111110
   1732  fa37		       3c		      .byte.b	%00111100
   1733  fa38
   1734  fa38							; 4
   1735  fa38		       00		      .byte.b	%00000000
   1736  fa39		       06		      .byte.b	%00000110
   1737  fa3a		       06		      .byte.b	%00000110
   1738  fa3b		       ff		      .byte.b	%11111111
   1739  fa3c		       ff		      .byte.b	%11111111
   1740  fa3d		       c6		      .byte.b	%11000110
   1741  fa3e		       c6		      .byte.b	%11000110
   1742  fa3f		       66		      .byte.b	%01100110
   1743  fa40		       66		      .byte.b	%01100110
   1744  fa41		       36		      .byte.b	%00110110
   1745  fa42		       36		      .byte.b	%00110110
   1746  fa43		       1e		      .byte.b	%00011110
   1747  fa44		       0e		      .byte.b	%00001110
   1748  fa45		       0e		      .byte.b	%00001110
   1749  fa46
   1750  fa46							; 5
   1751  fa46		       00		      .byte.b	%00000000
   1752  fa47		       fc		      .byte.b	%11111100
   1753  fa48		       fe		      .byte.b	%11111110
   1754  fa49		       0f		      .byte.b	%00001111
   1755  fa4a		       07		      .byte.b	%00000111
   1756  fa4b		       07		      .byte.b	%00000111
   1757  fa4c		       0f		      .byte.b	%00001111
   1758  fa4d		       fe		      .byte.b	%11111110
   1759  fa4e		       fc		      .byte.b	%11111100
   1760  fa4f		       e0		      .byte.b	%11100000
   1761  fa50		       e0		      .byte.b	%11100000
   1762  fa51		       e0		      .byte.b	%11100000
   1763  fa52		       ff		      .byte.b	%11111111
   1764  fa53		       ff		      .byte.b	%11111111
   1765  fa54
   1766  fa54							; 6
   1767  fa54		       00		      .byte.b	%00000000
   1768  fa55		       3c		      .byte.b	%00111100
   1769  fa56		       7e		      .byte.b	%01111110
   1770  fa57		       e7		      .byte.b	%11100111
   1771  fa58		       c3		      .byte.b	%11000011
   1772  fa59		       c3		      .byte.b	%11000011
   1773  fa5a		       e7		      .byte.b	%11100111
   1774  fa5b		       fe		      .byte.b	%11111110
   1775  fa5c		       fc		      .byte.b	%11111100
   1776  fa5d		       c0		      .byte.b	%11000000
   1777  fa5e		       c3		      .byte.b	%11000011
   1778  fa5f		       e7		      .byte.b	%11100111
   1779  fa60		       ff		      .byte.b	%11111111
   1780  fa61		       7e		      .byte.b	%01111110
   1781  fa62
   1782  fa62							; 7
   1783  fa62		       00		      .byte.b	%00000000
   1784  fa63		       18		      .byte.b	%00011000
   1785  fa64		       18		      .byte.b	%00011000
   1786  fa65		       18		      .byte.b	%00011000
   1787  fa66		       18		      .byte.b	%00011000
   1788  fa67		       18		      .byte.b	%00011000
   1789  fa68		       0c		      .byte.b	%00001100
   1790  fa69		       0c		      .byte.b	%00001100
   1791  fa6a		       0c		      .byte.b	%00001100
   1792  fa6b		       c6		      .byte.b	%11000110
   1793  fa6c		       c7		      .byte.b	%11000111
   1794  fa6d		       ff		      .byte.b	%11111111
   1795  fa6e		       ff		      .byte.b	%11111111
   1796  fa6f		       ff		      .byte.b	%11111111
   1797  fa70
   1798  fa70							; 8
   1799  fa70		       00		      .byte.b	%00000000
   1800  fa71		       3c		      .byte.b	%00111100
   1801  fa72		       7e		      .byte.b	%01111110
   1802  fa73		       e7		      .byte.b	%11100111
   1803  fa74		       c3		      .byte.b	%11000011
   1804  fa75		       c3		      .byte.b	%11000011
   1805  fa76		       e7		      .byte.b	%11100111
   1806  fa77		       7e		      .byte.b	%01111110
   1807  fa78		       3c		      .byte.b	%00111100
   1808  fa79		       66		      .byte.b	%01100110
   1809  fa7a		       c3		      .byte.b	%11000011
   1810  fa7b		       e7		      .byte.b	%11100111
   1811  fa7c		       7e		      .byte.b	%01111110
   1812  fa7d		       3c		      .byte.b	%00111100
   1813  fa7e
   1814  fa7e							; 9
   1815  fa7e		       00		      .byte.b	%00000000
   1816  fa7f		       3c		      .byte.b	%00111100
   1817  fa80		       7e		      .byte.b	%01111110
   1818  fa81		       e7		      .byte.b	%11100111
   1819  fa82		       c3		      .byte.b	%11000011
   1820  fa83		       03		      .byte.b	%00000011
   1821  fa84		       3f		      .byte.b	%00111111
   1822  fa85		       7f		      .byte.b	%01111111
   1823  fa86		       e7		      .byte.b	%11100111
   1824  fa87		       c3		      .byte.b	%11000011
   1825  fa88		       c3		      .byte.b	%11000011
   1826  fa89		       e7		      .byte.b	%11100111
   1827  fa8a		       7e		      .byte.b	%01111110
   1828  fa8b		       3c		      .byte.b	%00111100
   1829  fa8c
   1830  fa8c							;==================================================================================
   1831  fa8c							; Interrupt Routines
   1832  fa8c							;==================================================================================
   1833  fa8c
   1834  10000 ????				       SEG	Interrupt
   1835  fffa					      ORG	$FFFA
   1836  fffa
   1837  fffa				   InterruptVectors
   1838  fffa		       00 f0		      .word.w	Reset
   1839  fffc		       00 f0		      .word.w	Reset
   1840  fffe		       00 f0		      .word.w	Reset
   1841  10000
   1842  10000					       END
