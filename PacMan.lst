------- FILE PacMan.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE PacMan.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE PacMan.asm
      4  0000 ????
      5  0000 ????						;==================================================================================
      6  0000 ????						; Program Definitions
      7  0000 ????						;==================================================================================
      8  0000 ????
      9  0000 ????	       00 12	   SPRITE_HEIGHT =	18
     10  0000 ????	       00 05	   TIMER_LIMIT1 =	5
     11  0000 ????	       00 14	   TIMER_LIMIT2 =	20
     12  0000 ????
     13  0000 ????						;==================================================================================
     14  0000 ????						; Program Variables
     15  0000 ????						;==================================================================================
     16  0000 ????
     17 U00af ????				      SEG.U	Variables
     18 U0080					      ORG	$80
     19 U0080
     20 U0080		       00	   PS_temp    ds	1
     21 U0081
     22 U0081		       00 00	   SpriteAddrPtr ds	2
     23 U0083		       00	   SpriteYPos ds	1
     24 U0084		       00	   LastSpriteXPos ds	1
     25 U0085		       00	   LastSpriteYPos ds	1
     26 U0086		       00	   PlayerVelocityMask ds	1
     27 U0087
     28 U0087		       00 00	   SpriteGhostAddrPtr ds	2
     29 U0089
     30 U0089		       00	   SpriteXPos ds	1
     31 U008a		       00	   GhostSpriteXPos ds	1
     32 U008b		       00	   CurWaferXPos0 ds	1
     33 U008c
     34 U008c		       00	   GhostSpriteYPos ds	1
     35 U008d
     36 U008d		       00	   WaferXPosIndex ds	1
     37 U008e		       00 00 00 00*WaferArray ds	6
     38 U0094		       00	   PickedUpWaferBuffer ds	1
     39 U0095		       00 00 00 00*WaferDrawingArray ds	7
     40 U009c
     41 U009c		       00	   SpriteAnimationIndex ds	1
     42 U009d		       00	   IsFrameGoingUp ds	1
     43 U009e
     44 U009e		       00	   ScoreHundreds ds	1
     45 U009f		       00	   ScoreTens  ds	1
     46 U00a0		       00	   ScoreOnes  ds	1
     47 U00a1
     48 U00a1		       00	   HundredsOffset ds	1
     49 U00a2		       00	   TensOffset ds	1
     50 U00a3		       00	   OnesOffset ds	1
     51 U00a4
     52 U00a4		       00	   ScoreDisplayBufferHundreds ds	1
     53 U00a5		       00	   ScoreDisplayBufferTens ds	1
     54 U00a6		       00	   ScoreDisplayBufferOnes ds	1
     55 U00a7
     56 U00a7		       00	   TimerCounter5 ds	1
     57 U00a8		       00	   TimerCounter20 ds	1
     58 U00a9
     59 U00a9		       00	   PlayerReflectedBuffer ds	1
     60 U00aa		       00	   GhostReflectedBuffer ds	1
     61 U00ab
     62 U00ab		       00	   LifeCount  ds	1
     63 U00ac		       00	   WaferCount ds	1
     64 U00ad
     65 U00ad		       00	   WasButtonPressed ds	1
     66 U00ae
     67 U00ae							; Game State - 0 = PlayingGame; 1 = PlayingDeathAnimation; 2 = GamePaused;
     68 U00ae							; 3 = GameOver; 4 = PlayingWinningScreen
     69 U00ae		       00	   GameState  ds	1
     70 U00af
     71 U00af							;==================================================================================
     72 U00af							; Program Initialization
     73 U00af							;==================================================================================
     74 U00af
     75  fc8c ????				      SEG	Executable
     76  f000					      ORG	$F000
     77  f000
     78  f000				   Reset
     79  f000				   ClearMemory
     80  f000		       a2 00		      LDX	#0
     81  f002		       9a		      TXS
     82  f003		       48		      PHA
     83  f004		       8a		      TXA
     84  f005
     85  f005				   ClearMemoryLoop
     86  f005		       48		      PHA
     87  f006		       ca		      DEX
     88  f007		       d0 fc		      BNE	ClearMemoryLoop
     89  f009
     90  f009		       20 39 f1 	      JSR	InitVariables
     91  f00c
     92  f00c							;==================================================================================
     93  f00c							; Main Loop
     94  f00c							;==================================================================================
     95  f00c
     96  f00c				   Main
     97  f00c		       20 1b f0 	      JSR	HandleVSync
     98  f00f		       20 2a f0 	      JSR	HandleVBlank
     99  f012		       20 4e f0 	      JSR	MainKernel
    100  f015		       20 be f0 	      JSR	Overscan
    101  f018		       4c 0c f0 	      JMP	Main
    102  f01b
    103  f01b							;==================================================================================
    104  f01b							; HandleVSync
    105  f01b							;==================================================================================
    106  f01b
    107  f01b				   HandleVSync
    108  f01b		       a9 00		      LDA	#0
    109  f01d		       85 01		      STA	VBLANK
    110  f01f		       a9 02		      LDA	#2
    111  f021		       85 00		      STA	VSYNC
    112  f023
    113  f023				   VSyncLoop
    114  f023		       85 02		      STA	WSYNC
    115  f025		       85 02		      STA	WSYNC
    116  f027		       85 02		      STA	WSYNC
    117  f029
    118  f029		       60		      RTS
    119  f02a
    120  f02a							;==================================================================================
    121  f02a							; HandleVBlank
    122  f02a							; Handle Part of Game Logic
    123  f02a							;==================================================================================
    124  f02a
    125  f02a				   HandleVBlank
    126  f02a
    127  f02a							; Initialize TIM64T
    128  f02a		       a9 2a		      LDA	#42
    129  f02c		       8d 96 02 	      STA	TIM64T
    130  f02f
    131  f02f							; Prepare Registers for VBLANK
    132  f02f		       a9 00		      LDA	#0
    133  f031		       85 00		      STA	VSYNC
    134  f033		       a9 42		      LDA	#%01000010
    135  f035		       85 01		      STA	VBLANK
    136  f037
    137  f037							; Processing Tasks
    138  f037		       20 6e f4 	      JSR	GetControllerInputsDirectional
    139  f03a		       20 b2 f4 	      JSR	GetControllerInputsButton
    140  f03d		       20 dc f4 	      JSR	GetController2InputsDEBUG
    141  f040		       20 ea f1 	      JSR	UpdateEntities
    142  f043		       20 cb f1 	      JSR	PrepareWaferDrawingArray
    143  f046
    144  f046				   VBlankLoop
    145  f046		       ad 84 02 	      LDA	INTIM
    146  f049		       d0 fb		      BNE	VBlankLoop
    147  f04b
    148  f04b		       85 02		      STA	WSYNC
    149  f04d		       60		      RTS
    150  f04e
    151  f04e							;==================================================================================
    152  f04e							; MainKernel - Main Routine to Display Game
    153  f04e							;==================================================================================
    154  f04e
    155  f04e				   MainKernel
    156  f04e		       a9 00		      LDA	#0
    157  f050		       85 01		      STA	VBLANK
    158  f052
    159  f052							; Position Player, Ghost and Wafer According to XPos
    160  f052		       20 91 f1 	      JSR	PositionSpriteX
    161  f055
    162  f055		       a2 bf		      LDX	#191
    163  f057		       85 02		      STA	WSYNC
    164  f059
    165  f059				   MainFrameLoop
    166  f059							; First Line
    167  f059							; Load First Playfield
    168  f059		       bd 00 f9 	      LDA	MainBoard_STRIP_0,x	; 4  4   0
    169  f05c		       85 0d		      STA	PF0	; 3  7   12
    170  f05e
    171  f05e		       bd c0 f9 	      LDA	MainBoard_STRIP_1,x	; 4  11   33
    172  f061		       85 0e		      STA	PF1	; 3  14   42
    173  f063
    174  f063		       bd 80 fa 	      LDA	MainBoard_STRIP_2,x	; 4  18
    175  f066		       85 0f		      STA	PF2	; 3  21
    176  f068
    177  f068							; Check if line has wafer
    178  f068		       bd e5 f5 	      LDA	CheckLineBytes,x
    179  f06b		       f0 0d		      BEQ	DoNotDrawWafer
    180  f06d
    181  f06d							; Check if wafer was picked up
    182  f06d		       a8		      TAY
    183  f06e		       b9 94 00 	      LDA	WaferDrawingArray-1,y
    184  f071		       d0 07		      BNE	DoNotDrawWafer
    185  f073
    186  f073				   DoDrawWafer
    187  f073		       a9 02		      LDA	#%10
    188  f075		       85 1d		      STA	ENAM0
    189  f077		       4c 7e f0 	      JMP	AfterDrawingWafer
    190  f07a
    191  f07a				   DoNotDrawWafer
    192  f07a		       a9 00		      LDA	#0
    193  f07c		       85 1d		      STA	ENAM0
    194  f07e
    195  f07e				   AfterDrawingWafer
    196  f07e							; Check Vertical Sprite (P0) Drawing
    197  f07e		       8a		      TXA		; 2
    198  f07f		       38		      SEC		; 2
    199  f080		       e5 83		      SBC	SpriteYPos	; 3
    200  f082		       69 12		      ADC	#SPRITE_HEIGHT	; 2
    201  f084		       90 05		      BCC	SkipDrawingP0	; 3
    202  f086
    203  f086							; Load P0 Sprite Data
    204  f086		       a8		      TAY		; 3
    205  f087		       b1 81		      LDA	(SpriteAddrPtr),y	; 5
    206  f089		       85 1b		      STA	GRP0	; 3
    207  f08b
    208  f08b				   SkipDrawingP0
    209  f08b							; Decrease X and Go To Next Line
    210  f08b		       85 02		      STA	WSYNC	; 3
    211  f08d		       ca		      DEX		; 2
    212  f08e		       f0 21		      BEQ	MainFrameLoopEnd	; 2 
    213  f090
    214  f090							; Second Line
    215  f090
    216  f090							; Load First Playfield
    217  f090		       bd 00 f9 	      LDA	MainBoard_STRIP_0,x	; 4
    218  f093		       85 0d		      STA	PF0	; 3
    219  f095
    220  f095		       bd c0 f9 	      LDA	MainBoard_STRIP_1,x	; 4
    221  f098		       85 0e		      STA	PF1	; 3
    222  f09a
    223  f09a		       bd 80 fa 	      LDA	MainBoard_STRIP_2,x	; 4
    224  f09d		       85 0f		      STA	PF2	; 3
    225  f09f
    226  f09f							; Check Ghost Vertical Drawing
    227  f09f		       8a		      TXA		; 2
    228  f0a0		       38		      SEC		; 2
    229  f0a1		       e5 8c		      SBC	GhostSpriteYPos	; 3
    230  f0a3		       69 12		      ADC	#SPRITE_HEIGHT	; 2
    231  f0a5		       90 05		      BCC	SkipGhostDrawing	; 3
    232  f0a7
    233  f0a7							; Load Ghost Sprite Data
    234  f0a7		       a8		      TAY		; 3
    235  f0a8		       b1 87		      LDA	(SpriteGhostAddrPtr),y	; 5
    236  f0aa		       85 1c		      STA	GRP1	; 3
    237  f0ac
    238  f0ac				   SkipGhostDrawing
    239  f0ac							; Decrease X and Go To Next Line
    240  f0ac		       85 02		      STA	WSYNC	; 3
    241  f0ae		       ca		      DEX		; 2
    242  f0af		       d0 a8		      BNE	MainFrameLoop	; 2
    243  f0b1
    244  f0b1				   MainFrameLoopEnd
    245  f0b1							; Clearing Playfield Registers
    246  f0b1		       a9 00		      LDA	#0
    247  f0b3		       85 0d		      STA	PF0
    248  f0b5		       85 0e		      STA	PF1
    249  f0b7		       85 0f		      STA	PF2
    250  f0b9
    251  f0b9		       85 1b		      STA	GRP0
    252  f0bb		       85 1c		      STA	GRP1
    253  f0bd
    254  f0bd		       60		      RTS
    255  f0be
    256  f0be							;==================================================================================
    257  f0be							; Overscan
    258  f0be							;==================================================================================
    259  f0be
    260  f0be				   Overscan
    261  f0be
    262  f0be							; Prepare Registers for Overscan Drawing
    263  f0be		       a9 00		      LDA	#0
    264  f0c0		       85 0b		      STA	REFP0
    265  f0c2		       85 0c		      STA	REFP1
    266  f0c4
    267  f0c4		       a9 0e		      LDA	#$0E
    268  f0c6		       85 07		      STA	COLUP1
    269  f0c8
    270  f0c8		       a9 03		      LDA	#%011
    271  f0ca
    272  f0ca							; Triplicate P1 (Score)
    273  f0ca		       85 05		      STA	NUSIZ1
    274  f0cc
    275  f0cc							; Select Ammount of Icons According to LifeCount
    276  f0cc		       a4 ab		      LDY	LifeCount
    277  f0ce
    278  f0ce							; Select position of Score
    279  f0ce		       85 11		      STA	RESP1
    280  f0d0
    281  f0d0		       b9 e1 f5 	      LDA	LivesNUSIZ0LookUp,y
    282  f0d3		       85 04		      STA	NUSIZ0
    283  f0d5
    284  f0d5							; Calculate Hundreds Offset
    285  f0d5		       a6 9e		      LDX	ScoreHundreds
    286  f0d7		       bd d6 f5 	      LDA	MultBy14,x
    287  f0da		       85 a1		      STA	HundredsOffset
    288  f0dc
    289  f0dc							; Calculate Tens Offset
    290  f0dc		       a6 9f		      LDX	ScoreTens
    291  f0de		       bd d6 f5 	      LDA	MultBy14,x
    292  f0e1		       85 a2		      STA	TensOffset
    293  f0e3
    294  f0e3							; Calculate Ones Offset
    295  f0e3		       a6 a0		      LDX	ScoreOnes
    296  f0e5		       bd d6 f5 	      LDA	MultBy14,x
    297  f0e8		       85 a3		      STA	OnesOffset
    298  f0ea
    299  f0ea		       85 02		      STA	WSYNC
    300  f0ec
    301  f0ec							; Select position of Lives
    302  f0ec		       85 10		      STA	RESP0
    303  f0ee
    304  f0ee		       a2 1d		      LDX	#29
    305  f0f0				   OverscanLoop
    306  f0f0
    307  f0f0							; Is it time to draw?
    308  f0f0		       e0 10		      CPX	#16
    309  f0f2		       90 27		      BCC	SmallerThan16
    310  f0f4
    311  f0f4				   BiggerThan16
    312  f0f4							; Time to draw
    313  f0f4
    314  f0f4							; Draw Lives
    315  f0f4		       bd d2 f8 	      LDA	SpriteLifeData,x
    316  f0f7		       85 1b		      STA	GRP0
    317  f0f9
    318  f0f9							; Prepare draw bits for hundreds
    319  f0f9		       18		      CLC
    320  f0fa		       8a		      TXA
    321  f0fb		       65 a1		      ADC	HundredsOffset
    322  f0fd		       a8		      TAY
    323  f0fe		       b9 00 fc 	      LDA	BottomData,y
    324  f101		       85 1c		      STA	GRP1
    325  f103
    326  f103							; Prepare draw bits for ones
    327  f103		       18		      CLC
    328  f104		       8a		      TXA
    329  f105		       65 a3		      ADC	OnesOffset
    330  f107		       a8		      TAY
    331  f108		       b9 00 fc 	      LDA	BottomData,y
    332  f10b		       85 a6		      STA	ScoreDisplayBufferOnes
    333  f10d
    334  f10d							; Prepare draw bits for tens
    335  f10d		       18		      CLC
    336  f10e		       8a		      TXA
    337  f10f		       65 a2		      ADC	TensOffset
    338  f111		       a8		      TAY
    339  f112		       b9 00 fc 	      LDA	BottomData,y
    340  f115
    341  f115							; Draw Tens
    342  f115		       85 1c		      STA	GRP1
    343  f117
    344  f117							; Draw Ones
    345  f117		       a5 a6		      LDA	ScoreDisplayBufferOnes
    346  f119		       85 1c		      STA	GRP1
    347  f11b
    348  f11b				   SmallerThan16
    349  f11b		       ca		      DEX
    350  f11c		       85 02		      STA	WSYNC
    351  f11e		       d0 d0		      BNE	OverscanLoop
    352  f120
    353  f120							; Clear Player Registers
    354  f120		       a9 00		      LDA	#0
    355  f122		       85 1b		      STA	GRP0
    356  f124		       85 1c		      STA	GRP1
    357  f126
    358  f126							; Return NUSIZ0 and NUSIZ1
    359  f126		       a9 20		      LDA	#%100000
    360  f128		       85 04		      STA	NUSIZ0
    361  f12a		       85 05		      STA	NUSIZ1
    362  f12c
    363  f12c							; Return P0 Register Reflection Value
    364  f12c		       a5 a9		      LDA	PlayerReflectedBuffer
    365  f12e		       85 0b		      STA	REFP0
    366  f130
    367  f130							; Return P1 Register Reflection Value
    368  f130		       a5 aa		      LDA	GhostReflectedBuffer
    369  f132		       85 0c		      STA	REFP1
    370  f134
    371  f134							; Return P1 color
    372  f134		       a9 58		      LDA	#$58
    373  f136		       85 07		      STA	COLUP1
    374  f138
    375  f138		       60		      RTS
    376  f139
    377  f139							;==================================================================================
    378  f139							; InitVariables
    379  f139							;==================================================================================
    380  f139
    381  f139				   InitVariables
    382  f139							; Initialize BG Color and PF Color
    383  f139		       a9 00		      LDA	#$00
    384  f13b		       85 09		      STA	COLUBK
    385  f13d		       a9 72		      LDA	#$72
    386  f13f		       85 08		      STA	COLUPF
    387  f141
    388  f141							; Initialize Player Color and Pattern
    389  f141		       a9 1e		      LDA	#$1E
    390  f143		       85 06		      STA	COLUP0
    391  f145		       a9 58		      LDA	#$58
    392  f147		       85 07		      STA	COLUP1
    393  f149
    394  f149							; Initialize CTRLPF
    395  f149		       a9 01		      LDA	#1
    396  f14b		       85 0a		      STA	CTRLPF
    397  f14d
    398  f14d							; Initialize Missile Graphics
    399  f14d		       a9 20		      LDA	#%100000
    400  f14f		       85 04		      STA	NUSIZ0
    401  f151
    402  f151							; Initialize Variables
    403  f151
    404  f151							; SpriteXPos, LastXPos, YPos and LastYPos
    405  f151		       a9 4d		      LDA	#77
    406  f153		       85 89		      STA	SpriteXPos
    407  f155		       85 84		      STA	LastSpriteXPos
    408  f157		       a9 6b		      LDA	#107
    409  f159		       85 83		      STA	SpriteYPos
    410  f15b		       85 85		      STA	LastSpriteYPos
    411  f15d
    412  f15d							; SpriteGhostXPos and YPos
    413  f15d		       a9 4d		      LDA	#77
    414  f15f		       85 8a		      STA	GhostSpriteXPos
    415  f161		       a9 8c		      LDA	#140
    416  f163		       85 8c		      STA	GhostSpriteYPos
    417  f165
    418  f165							; LifeCount
    419  f165		       a9 03		      LDA	#3
    420  f167		       85 ab		      STA	LifeCount
    421  f169
    422  f169							; Set SpriteAnimationIndex
    423  f169		       85 9c		      STA	SpriteAnimationIndex
    424  f16b
    425  f16b							; GameState
    426  f16b		       a9 04		      LDA	#4
    427  f16d		       85 ae		      STA	GameState
    428  f16f
    429  f16f							; TimerCounter20
    430  f16f		       a9 c8		      LDA	#200
    431  f171		       85 a8		      STA	TimerCounter20
    432  f173
    433  f173							; ScoreHundreds
    434  f173		       a9 ff		      LDA	#-1
    435  f175		       85 9e		      STA	ScoreHundreds
    436  f177
    437  f177							; Set Controller Inputs
    438  f177		       a9 00		      LDA	#0
    439  f179		       8d 81 02 	      STA	SWACNT
    440  f17c
    441  f17c							; Set P0 and P1 Delays
    442  f17c		       85 25		      STA	VDELP0
    443  f17e
    444  f17e							; Set Wafer XPos Index
    445  f17e		       85 8d		      STA	WaferXPosIndex
    446  f180
    447  f180							; PacmanSpriteDataPointer
    448  f180		       a9 00		      LDA	#<Sprite0Data
    449  f182		       85 81		      STA	SpriteAddrPtr
    450  f184		       a9 f8		      LDA	#>Sprite0Data
    451  f186		       85 82		      STA	SpriteAddrPtr+1
    452  f188
    453  f188							; GhostSpriteDataPointer
    454  f188		       a9 c0		      LDA	#<SpriteGhostData
    455  f18a		       85 87		      STA	SpriteGhostAddrPtr
    456  f18c		       a9 f8		      LDA	#>SpriteGhostData
    457  f18e		       85 88		      STA	SpriteGhostAddrPtr+1
    458  f190
    459  f190		       60		      RTS
    460  f191
    461  f191							;==================================================================================
    462  f191							; PositionSpriteX - Subroutine to position all sprites (P0,P1,M0)
    463  f191							;==================================================================================
    464  f191
    465  f191				   PositionSpriteX
    466  f191		       85 02		      STA	WSYNC	; 3
    467  f193		       85 2b		      STA	HMCLR	; clear any previous movement	  ; 3
    468  f195
    469  f195		       a2 03		      LDX	#3	; sprite index 		  ; 2
    470  f197
    471  f197				   PosSP1
    472  f197
    473  f197		       b5 88		      LDA	SpriteXPos-1,x	; 4
    474  f199		       a8		      TAY		; 2
    475  f19a
    476  f19a							; Divide by 16
    477  f19a		       4a		      LSR		; 2
    478  f19b		       4a		      LSR		; 2
    479  f19c		       4a		      LSR		; 2
    480  f19d		       4a		      LSR		; 2
    481  f19e		       85 80		      STA	PS_temp	; 3
    482  f1a0
    483  f1a0		       98		      TYA		; 2
    484  f1a1		       29 0f		      AND	#15	; 2
    485  f1a3
    486  f1a3		       18		      CLC		; 2
    487  f1a4
    488  f1a4		       65 80		      ADC	PS_temp	; 3
    489  f1a6		       a4 80		      LDY	PS_temp	; 3
    490  f1a8
    491  f1a8		       c9 0f		      CMP	#15	; 2
    492  f1aa		       90 03		      BCC	NH1	; 3
    493  f1ac		       e9 0f		      SBC	#15	; 2
    494  f1ae		       c8		      INY		; 2
    495  f1af
    496  f1af				   NH1
    497  f1af							; Use remainder for fine adjustment
    498  f1af		       49 07		      EOR	#7	; 2
    499  f1b1		       0a		      ASL		; 2
    500  f1b2		       0a		      ASL		; 2
    501  f1b3		       0a		      ASL		; 2
    502  f1b4		       0a		      ASL		; 2
    503  f1b5
    504  f1b5		       95 1f		      STA	HMP0-1,x	; fine movement	     ; 4
    505  f1b7		       85 02		      STA	WSYNC	; 3
    506  f1b9
    507  f1b9		       20 ca f1 	      JSR	Ret1	; just a 12 cycle delay     ; 12
    508  f1bc		       24 00		      BIT	0	; 15 cycles = 3 loops :)    ; 3
    509  f1be
    510  f1be
    511  f1be				   Jiggle1
    512  f1be		       88		      DEY		; 2
    513  f1bf		       10 fd		      BPL	Jiggle1	; 3
    514  f1c1
    515  f1c1		       95 0f		      STA	RESP0-1,x	; 4
    516  f1c3
    517  f1c3		       ca		      DEX		; 2
    518  f1c4		       d0 d1		      BNE	PosSP1	; 3
    519  f1c6
    520  f1c6		       85 02		      STA	WSYNC	; 3
    521  f1c8		       85 2a		      STA	HMOVE	; 3
    522  f1ca
    523  f1ca				   Ret1
    524  f1ca		       60		      RTS		; 6
    525  f1cb
    526  f1cb							;==================================================================================
    527  f1cb							; PrepareWaferDrawingArray - Prepare Wafer Drawing Array for MainKernel
    528  f1cb							;==================================================================================
    529  f1cb
    530  f1cb				   PrepareWaferDrawingArray
    531  f1cb
    532  f1cb							; Verify if wafer is picked up for each WaferY -> 1 = Picked up (do not draw), 0 = Not picked up (draw)
    533  f1cb		       a4 8d		      LDY	WaferXPosIndex
    534  f1cd		       b9 8e 00 	      LDA	WaferArray,y
    535  f1d0		       aa		      TAX
    536  f1d1
    537  f1d1		       a0 07		      LDY	#7
    538  f1d3				   PrepareWaferLoop
    539  f1d3		       8a		      TXA
    540  f1d4		       39 ce f5 	      AND	FindWaferLookUp,y
    541  f1d7		       f0 08		      BEQ	NotPickedUp
    542  f1d9
    543  f1d9				   PickedUp
    544  f1d9		       a9 01		      LDA	#1
    545  f1db		       99 94 00 	      STA	WaferDrawingArray-1,y
    546  f1de		       4c e6 f1 	      JMP	PrepareWaferDrawingArrayContinue
    547  f1e1
    548  f1e1				   NotPickedUp
    549  f1e1		       a9 00		      LDA	#0
    550  f1e3		       99 94 00 	      STA	WaferDrawingArray-1,y
    551  f1e6
    552  f1e6				   PrepareWaferDrawingArrayContinue
    553  f1e6		       88		      DEY
    554  f1e7		       d0 ea		      BNE	PrepareWaferLoop
    555  f1e9
    556  f1e9		       60		      RTS
    557  f1ea
    558  f1ea							;==================================================================================
    559  f1ea							; UpdateEntities - Update Game Logic
    560  f1ea							;==================================================================================
    561  f1ea
    562  f1ea				   UpdateEntities
    563  f1ea							; Check if Game Is Paused
    564  f1ea		       a5 ae		      LDA	GameState
    565  f1ec		       c9 02		      CMP	#2
    566  f1ee		       f0 2d		      BEQ	EndUpdateEntities
    567  f1f0
    568  f1f0							; Update Timer
    569  f1f0		       20 14 f5 	      JSR	UpdateTimer
    570  f1f3
    571  f1f3							; Get Out End of Level (If it's the case)
    572  f1f3		       20 40 f2 	      JSR	LevelEndOut
    573  f1f6
    574  f1f6							; Apply Animation Frame
    575  f1f6		       20 c4 f3 	      JSR	ApplyAnimationFrame
    576  f1f9
    577  f1f9							; Check if it's playing the end of the level
    578  f1f9		       a5 ae		      LDA	GameState
    579  f1fb		       c9 04		      CMP	#4
    580  f1fd		       f0 1e		      BEQ	EndUpdateEntities
    581  f1ff
    582  f1ff							; Change Animation Frame
    583  f1ff		       20 72 f3 	      JSR	ChangeAnimationFrame
    584  f202
    585  f202							; Check Player Collision with PF
    586  f202		       20 b8 f2 	      JSR	CheckPlayerCollisionPF
    587  f205
    588  f205							; Update Sprite Pos According to Velocity Mask
    589  f205		       20 0d f3 	      JSR	UpdatePlayerPosition
    590  f208
    591  f208							; Check Player Collision with Ghosts
    592  f208		       20 9f f2 	      JSR	CheckPlayerCollisionGhosts
    593  f20b
    594  f20b							; Check Player Collision with Wafers
    595  f20b		       20 25 f2 	      JSR	CheckWaferCollision
    596  f20e
    597  f20e							; Remove Collisions After Checks
    598  f20e		       85 2c		      STA	CXCLR
    599  f210
    600  f210							; Increase Score According with Picked Up Wafer Buffer
    601  f210		       20 33 f5 	      JSR	UpdateScore
    602  f213
    603  f213							; Update Wafer XPos Index
    604  f213		       20 8d f2 	      JSR	UpdateWaferIndex
    605  f216
    606  f216							; Check Game Over
    607  f216		       a5 ab		      LDA	LifeCount
    608  f218		       f0 04		      BEQ	GoToGameOver
    609  f21a
    610  f21a							; Check End of Level
    611  f21a		       20 61 f2 	      JSR	CheckLevelEnd
    612  f21d
    613  f21d				   EndUpdateEntities
    614  f21d		       60		      RTS
    615  f21e
    616  f21e				   GoToGameOver
    617  f21e		       a9 03		      LDA	#3
    618  f220		       85 ae		      STA	GameState
    619  f222		       4c 64 f5 	      JMP	HandleGameOver
    620  f225
    621  f225							;==================================================================================
    622  f225							; CheckWaferCollision - Verify player collision with wafer
    623  f225							;==================================================================================
    624  f225
    625  f225				   CheckWaferCollision
    626  f225							; Check Collision Between Player and Wafer
    627  f225		       24 00		      BIT	CXM0P
    628  f227		       50 16		      BVC	DidntGetWafer
    629  f229
    630  f229				   GotWafer
    631  f229							; Routine to save wafer as picked up
    632  f229
    633  f229							; Y = WaferX
    634  f229		       a4 8d		      LDY	WaferXPosIndex
    635  f22b
    636  f22b							; Load WaferArray[WaferX]
    637  f22b		       b9 8e 00 	      LDA	WaferArray,y
    638  f22e
    639  f22e							; Find WaferY from SpriteYPos
    640  f22e		       a4 83		      LDY	SpriteYPos
    641  f230		       be ab f6 	      LDX	ConvertPlayerPosToWaferIndex,y
    642  f233
    643  f233							; Mark Wafer Picked Up for Frame
    644  f233		       1d ce f5 	      ORA	FindWaferLookUp,x
    645  f236
    646  f236							; Save on WaferArray[WaferX]
    647  f236		       a4 8d		      LDY	WaferXPosIndex
    648  f238		       99 8e 00 	      STA	WaferArray,y
    649  f23b
    650  f23b							; Mark WaferPickedUp for UpdateScore
    651  f23b		       a9 01		      LDA	#1
    652  f23d		       85 94		      STA	PickedUpWaferBuffer
    653  f23f
    654  f23f				   DidntGetWafer
    655  f23f		       60		      RTS
    656  f240
    657  f240							;==================================================================================
    658  f240							; LevelEndOut - Get out of level end tune
    659  f240							;==================================================================================
    660  f240
    661  f240				   LevelEndOut
    662  f240							; Verify if it's in level end
    663  f240		       a5 ae		      LDA	GameState
    664  f242		       c9 04		      CMP	#4
    665  f244		       d0 0d		      BNE	LevelEndOutRet
    666  f246
    667  f246							; Verify Counter
    668  f246		       a5 a8		      LDA	TimerCounter20
    669  f248		       d0 09		      BNE	LevelEndOutRet
    670  f24a
    671  f24a							; Out of Level End
    672  f24a		       a9 00		      LDA	#0
    673  f24c		       85 ae		      STA	GameState
    674  f24e
    675  f24e							; Give 100 Points
    676  f24e		       e6 9e		      INC	ScoreHundreds
    677  f250
    678  f250							; Give a Free Life (Max 3)
    679  f250		       20 54 f2 	      JSR	GiveLife
    680  f253
    681  f253				   LevelEndOutRet
    682  f253		       60		      RTS
    683  f254
    684  f254							;==================================================================================
    685  f254							; GiveLife - Give an extra life to the player
    686  f254							;==================================================================================
    687  f254
    688  f254				   GiveLife
    689  f254		       e6 ab		      INC	LifeCount
    690  f256		       a5 ab		      LDA	LifeCount
    691  f258		       c9 04		      CMP	#4
    692  f25a		       d0 04		      BNE	GiveLifeRet
    693  f25c
    694  f25c		       a9 03		      LDA	#3
    695  f25e		       85 ab		      STA	LifeCount
    696  f260
    697  f260				   GiveLifeRet
    698  f260		       60		      RTS
    699  f261
    700  f261							;==================================================================================
    701  f261							; CheckLevelEnd - Verify if all wafers were collected
    702  f261							;==================================================================================
    703  f261
    704  f261				   CheckLevelEnd
    705  f261		       a5 ac		      LDA	WaferCount
    706  f263		       c9 2a		      CMP	#42
    707  f265		       d0 25		      BNE	NotLevelEnd
    708  f267
    709  f267				   LevelEnd
    710  f267		       a9 00		      LDA	#0
    711  f269		       a2 06		      LDX	#6
    712  f26b
    713  f26b							; Zero All Wafers
    714  f26b				   ZeroWaferArrayLoop
    715  f26b		       ca		      DEX
    716  f26c		       95 8e		      STA	WaferArray,x
    717  f26e		       e0 00		      CPX	#0
    718  f270		       d0 f9		      BNE	ZeroWaferArrayLoop
    719  f272
    720  f272							; Zero WaferCount
    721  f272		       85 ac		      STA	WaferCount
    722  f274
    723  f274							; Return Player to Center of Screen
    724  f274		       a9 50		      LDA	#80
    725  f276		       85 89		      STA	SpriteXPos
    726  f278		       a9 6b		      LDA	#107
    727  f27a		       85 83		      STA	SpriteYPos
    728  f27c
    729  f27c							; Start Playing Level End Tune
    730  f27c		       a9 04		      LDA	#4
    731  f27e		       85 ae		      STA	GameState
    732  f280
    733  f280							; Change Character Frame to 3
    734  f280		       a9 03		      LDA	#3
    735  f282		       85 9c		      STA	SpriteAnimationIndex
    736  f284		       a9 00		      LDA	#0
    737  f286		       85 9d		      STA	IsFrameGoingUp
    738  f288
    739  f288							; Prepare Timer For Level End Tune
    740  f288		       a9 c8		      LDA	#200
    741  f28a		       85 a8		      STA	TimerCounter20
    742  f28c
    743  f28c				   NotLevelEnd
    744  f28c		       60		      RTS
    745  f28d
    746  f28d							;==================================================================================
    747  f28d							; UpdateWaferIndex - increase wafer XPos Index and apply it
    748  f28d							;==================================================================================
    749  f28d
    750  f28d				   UpdateWaferIndex
    751  f28d		       e6 8d		      INC	WaferXPosIndex
    752  f28f
    753  f28f		       a6 8d		      LDX	WaferXPosIndex
    754  f291		       e0 06		      CPX	#6
    755  f293		       d0 04		      BNE	ReturnWaferIndex
    756  f295
    757  f295				   WaferIndexEquals6
    758  f295		       a2 00		      LDX	#0
    759  f297		       86 8d		      STX	WaferXPosIndex
    760  f299
    761  f299				   ReturnWaferIndex
    762  f299		       bd c8 f5 	      LDA	WaferXPosArray0,x
    763  f29c		       85 8b		      STA	CurWaferXPos0
    764  f29e		       60		      RTS
    765  f29f
    766  f29f							;==================================================================================
    767  f29f							; CheckPlayerCollisionGhosts - Verify for Player Collision with Ghosts
    768  f29f							;==================================================================================
    769  f29f
    770  f29f				   CheckPlayerCollisionGhosts
    771  f29f
    772  f29f							; Check if death animation is playing
    773  f29f		       a5 ae		      LDA	GameState
    774  f2a1		       c9 01		      CMP	#1
    775  f2a3		       f0 12		      BEQ	NoP0P1Collision
    776  f2a5
    777  f2a5							; Check Collision
    778  f2a5		       a5 07		      LDA	CXPPMM
    779  f2a7		       29 80		      AND	#%10000000
    780  f2a9		       f0 0c		      BEQ	NoP0P1Collision
    781  f2ab
    782  f2ab				   P0P1Collision
    783  f2ab							; Reset Player Velocity
    784  f2ab		       a9 00		      LDA	#0
    785  f2ad		       85 86		      STA	PlayerVelocityMask
    786  f2af
    787  f2af							; Set Animation Frame to 4 and IsPlayingDeathAnimation
    788  f2af		       a9 04		      LDA	#4
    789  f2b1		       85 9c		      STA	SpriteAnimationIndex
    790  f2b3
    791  f2b3		       a9 01		      LDA	#1
    792  f2b5		       85 ae		      STA	GameState
    793  f2b7
    794  f2b7				   NoP0P1Collision
    795  f2b7		       60		      RTS
    796  f2b8
    797  f2b8							;==================================================================================
    798  f2b8							; CheckPlayerCollisionPF - Verify for Player Collision with PF and Update Velocity Mask
    799  f2b8							;==================================================================================
    800  f2b8
    801  f2b8				   CheckPlayerCollisionPF
    802  f2b8							; Verify P0PF Collision Bit
    803  f2b8		       a5 02		      LDA	CXP0FB
    804  f2ba		       29 80		      AND	#%10000000
    805  f2bc		       f0 4e		      BEQ	PlayerPFCollisionNotDetected
    806  f2be
    807  f2be							; Check Where Player Was Going
    808  f2be		       a6 86		      LDX	PlayerVelocityMask
    809  f2c0
    810  f2c0							; Return Player to Previous Spot Before Zeoring Velocity
    811  f2c0		       8a		      TXA
    812  f2c1		       29 08		      AND	#%1000
    813  f2c3		       d0 1a		      BNE	WasGoingRight
    814  f2c5
    815  f2c5		       8a		      TXA
    816  f2c6		       29 04		      AND	#%0100
    817  f2c8		       d0 20		      BNE	WasGoingLeft
    818  f2ca
    819  f2ca		       8a		      TXA
    820  f2cb		       29 02		      AND	#%0010
    821  f2cd		       d0 26		      BNE	WasGoingDown
    822  f2cf
    823  f2cf		       8a		      TXA
    824  f2d0		       29 01		      AND	#%0001
    825  f2d2		       d0 2c		      BNE	WasGoingUp
    826  f2d4
    827  f2d4							; Return X and Y in case Player isnt moving and is still stuck
    828  f2d4		       a5 84		      LDA	LastSpriteXPos
    829  f2d6		       85 89		      STA	SpriteXPos
    830  f2d8		       a5 85		      LDA	LastSpriteYPos
    831  f2da		       85 83		      STA	SpriteYPos
    832  f2dc
    833  f2dc		       4c 08 f3 	      JMP	ZeroPlayerVelocity
    834  f2df
    835  f2df				   WasGoingRight
    836  f2df		       a5 84		      LDA	LastSpriteXPos
    837  f2e1		       85 89		      STA	SpriteXPos
    838  f2e3
    839  f2e3		       c6 89		      DEC	SpriteXPos
    840  f2e5		       c6 89		      DEC	SpriteXPos
    841  f2e7
    842  f2e7		       4c 08 f3 	      JMP	ZeroPlayerVelocity
    843  f2ea
    844  f2ea				   WasGoingLeft
    845  f2ea		       a5 84		      LDA	LastSpriteXPos
    846  f2ec		       85 89		      STA	SpriteXPos
    847  f2ee
    848  f2ee		       e6 89		      INC	SpriteXPos
    849  f2f0		       e6 89		      INC	SpriteXPos
    850  f2f2
    851  f2f2		       4c 08 f3 	      JMP	ZeroPlayerVelocity
    852  f2f5
    853  f2f5				   WasGoingDown
    854  f2f5		       a5 85		      LDA	LastSpriteYPos
    855  f2f7		       85 83		      STA	SpriteYPos
    856  f2f9
    857  f2f9		       e6 83		      INC	SpriteYPos
    858  f2fb		       e6 83		      INC	SpriteYPos
    859  f2fd
    860  f2fd		       4c 08 f3 	      JMP	ZeroPlayerVelocity
    861  f300
    862  f300				   WasGoingUp
    863  f300		       a5 85		      LDA	LastSpriteYPos
    864  f302		       85 83		      STA	SpriteYPos
    865  f304
    866  f304		       c6 83		      DEC	SpriteYPos
    867  f306		       c6 83		      DEC	SpriteYPos
    868  f308
    869  f308				   ZeroPlayerVelocity
    870  f308		       a9 00		      LDA	#0
    871  f30a		       85 86		      STA	PlayerVelocityMask
    872  f30c
    873  f30c				   PlayerPFCollisionNotDetected
    874  f30c		       60		      RTS
    875  f30d
    876  f30d							;==================================================================================
    877  f30d							; UpdatePlayerPosition - Update Player Position According to Velocity Mask
    878  f30d							;==================================================================================
    879  f30d
    880  f30d				   UpdatePlayerPosition
    881  f30d							; Verify Collision and Refuse to Move in case is colliding
    882  f30d		       a5 02		      LDA	CXP0FB
    883  f30f		       29 80		      AND	#%10000000
    884  f311		       d0 5e		      BNE	UpdatePlayerPositionRet
    885  f313
    886  f313		       a6 86		      LDX	PlayerVelocityMask
    887  f315
    888  f315		       8a		      TXA
    889  f316		       29 08		      AND	#%1000
    890  f318		       d0 12		      BNE	GoRight
    891  f31a
    892  f31a		       8a		      TXA
    893  f31b		       29 04		      AND	#%0100
    894  f31d		       d0 24		      BNE	GoLeft
    895  f31f
    896  f31f		       8a		      TXA
    897  f320		       29 02		      AND	#%0010
    898  f322		       d0 36		      BNE	GoDown
    899  f324
    900  f324		       8a		      TXA
    901  f325		       29 01		      AND	#%0001
    902  f327		       d0 3e		      BNE	GoUp
    903  f329
    904  f329		       4c 71 f3 	      JMP	UpdatePlayerPositionRet
    905  f32c
    906  f32c				   GoRight
    907  f32c		       a5 89		      LDA	SpriteXPos
    908  f32e		       85 84		      STA	LastSpriteXPos
    909  f330		       a5 83		      LDA	SpriteYPos
    910  f332		       85 85		      STA	LastSpriteYPos
    911  f334
    912  f334		       e6 89		      INC	SpriteXPos
    913  f336
    914  f336							; Verify If Sprite is in Far Right
    915  f336		       a5 89		      LDA	SpriteXPos
    916  f338		       c9 a0		      CMP	#160
    917  f33a		       90 04		      BCC	NotFarRight
    918  f33c
    919  f33c		       a9 00		      LDA	#0
    920  f33e		       85 89		      STA	SpriteXPos
    921  f340
    922  f340				   NotFarRight
    923  f340		       4c 71 f3 	      JMP	UpdatePlayerPositionRet
    924  f343
    925  f343				   GoLeft
    926  f343		       a5 89		      LDA	SpriteXPos
    927  f345		       85 84		      STA	LastSpriteXPos
    928  f347		       a5 83		      LDA	SpriteYPos
    929  f349		       85 85		      STA	LastSpriteYPos
    930  f34b
    931  f34b		       c6 89		      DEC	SpriteXPos
    932  f34d
    933  f34d							; Verify If Sprite is in Far Left
    934  f34d		       a5 89		      LDA	SpriteXPos
    935  f34f		       c9 00		      CMP	#0
    936  f351		       d0 04		      BNE	NotFarLeft
    937  f353
    938  f353		       a9 a0		      LDA	#160
    939  f355		       85 89		      STA	SpriteXPos
    940  f357
    941  f357				   NotFarLeft
    942  f357		       4c 71 f3 	      JMP	UpdatePlayerPositionRet
    943  f35a
    944  f35a				   GoDown
    945  f35a		       a5 89		      LDA	SpriteXPos
    946  f35c		       85 84		      STA	LastSpriteXPos
    947  f35e		       a5 83		      LDA	SpriteYPos
    948  f360		       85 85		      STA	LastSpriteYPos
    949  f362
    950  f362		       c6 83		      DEC	SpriteYPos
    951  f364		       4c 71 f3 	      JMP	UpdatePlayerPositionRet
    952  f367
    953  f367				   GoUp
    954  f367		       a5 89		      LDA	SpriteXPos
    955  f369		       85 84		      STA	LastSpriteXPos
    956  f36b		       a5 83		      LDA	SpriteYPos
    957  f36d		       85 85		      STA	LastSpriteYPos
    958  f36f
    959  f36f		       e6 83		      INC	SpriteYPos
    960  f371
    961  f371				   UpdatePlayerPositionRet
    962  f371		       60		      RTS
    963  f372
    964  f372							;==================================================================================
    965  f372							; ChangeAnimationFrame
    966  f372							;==================================================================================
    967  f372
    968  f372				   ChangeAnimationFrame
    969  f372							; Verify If Is Death Animation
    970  f372		       a5 ae		      LDA	GameState
    971  f374		       c9 01		      CMP	#1
    972  f376		       f0 25		      BEQ	FrameIsDeath
    973  f378
    974  f378				   FrameNotDeath
    975  f378							; Verify TimerCounter5
    976  f378		       a5 a7		      LDA	TimerCounter5
    977  f37a		       d0 47		      BNE	DontChangeFrame
    978  f37c
    979  f37c							; Load Current Frame Index
    980  f37c		       a4 9c		      LDY	SpriteAnimationIndex
    981  f37e
    982  f37e							; Verify Next Frame
    983  f37e		       a6 9d		      LDX	IsFrameGoingUp
    984  f380		       d0 04		      BNE	FrameIsGoingUp
    985  f382
    986  f382				   FrameIsGoingDown
    987  f382		       88		      DEY
    988  f383		       4c 87 f3 	      JMP	FrameChanged
    989  f386
    990  f386				   FrameIsGoingUp
    991  f386		       c8		      INY
    992  f387
    993  f387				   FrameChanged
    994  f387							; Check if Index is Either 0 or 3
    995  f387		       84 9c		      STY	SpriteAnimationIndex
    996  f389		       c0 03		      CPY	#3
    997  f38b		       f0 07		      BEQ	ChangeDirection
    998  f38d		       c0 00		      CPY	#0
    999  f38f		       f0 03		      BEQ	ChangeDirection
   1000  f391
   1001  f391							; If not
   1002  f391		       4c c3 f3 	      JMP	FrameChangeReturn
   1003  f394
   1004  f394				   ChangeDirection
   1005  f394		       a5 9d		      LDA	IsFrameGoingUp
   1006  f396		       49 01		      EOR	#1
   1007  f398		       85 9d		      STA	IsFrameGoingUp
   1008  f39a		       4c c3 f3 	      JMP	FrameChangeReturn
   1009  f39d
   1010  f39d				   FrameIsDeath
   1011  f39d							; Verify TimerCounter20
   1012  f39d		       a5 a8		      LDA	TimerCounter20
   1013  f39f		       d0 22		      BNE	DontChangeFrame
   1014  f3a1
   1015  f3a1				   CheckIfLastDeathFrame
   1016  f3a1							; Check if Frame is 10 (Last Death Frame)
   1017  f3a1		       a5 9c		      LDA	SpriteAnimationIndex
   1018  f3a3		       c9 0a		      CMP	#10
   1019  f3a5		       d0 17		      BNE	ChangeDeathFrame
   1020  f3a7
   1021  f3a7							; End Death Animation
   1022  f3a7		       a9 00		      LDA	#0
   1023  f3a9		       85 ae		      STA	GameState
   1024  f3ab		       85 9c		      STA	SpriteAnimationIndex
   1025  f3ad
   1026  f3ad		       a9 01		      LDA	#1
   1027  f3af		       85 9d		      STA	IsFrameGoingUp
   1028  f3b1
   1029  f3b1							; Reset Player Coordinates
   1030  f3b1		       a9 4d		      LDA	#77
   1031  f3b3		       85 89		      STA	SpriteXPos
   1032  f3b5		       a9 6b		      LDA	#107
   1033  f3b7		       85 83		      STA	SpriteYPos
   1034  f3b9
   1035  f3b9							; Take One Life
   1036  f3b9		       c6 ab		      DEC	LifeCount
   1037  f3bb
   1038  f3bb		       4c c3 f3 	      JMP	FrameChangeReturn
   1039  f3be
   1040  f3be				   ChangeDeathFrame
   1041  f3be		       e6 9c		      INC	SpriteAnimationIndex
   1042  f3c0		       4c c3 f3 	      JMP	FrameChangeReturn
   1043  f3c3
   1044  f3c3				   DontRestartFrame
   1045  f3c3				   DontChangeFrame
   1046  f3c3				   FrameChangeReturn
   1047  f3c3		       60		      RTS
   1048  f3c4
   1049  f3c4							;==================================================================================
   1050  f3c4							; ApplyAnimationFrame
   1051  f3c4							;==================================================================================
   1052  f3c4
   1053  f3c4				   ApplyAnimationFrame
   1054  f3c4							; Check Counter
   1055  f3c4		       a5 a7		      LDA	TimerCounter5
   1056  f3c6		       d0 2c		      BNE	AnimationFrameRet
   1057  f3c8
   1058  f3c8		       a5 9c		      LDA	SpriteAnimationIndex
   1059  f3ca		       f0 2b		      BEQ	Animation0
   1060  f3cc		       c9 01		      CMP	#1
   1061  f3ce		       f0 32		      BEQ	Animation1
   1062  f3d0		       c9 02		      CMP	#2
   1063  f3d2		       f0 39		      BEQ	Animation2
   1064  f3d4		       c9 03		      CMP	#3
   1065  f3d6		       f0 40		      BEQ	Animation3
   1066  f3d8		       c9 04		      CMP	#4
   1067  f3da		       f0 47		      BEQ	Animation4
   1068  f3dc		       c9 05		      CMP	#5
   1069  f3de		       f0 4e		      BEQ	Animation5
   1070  f3e0		       c9 06		      CMP	#6
   1071  f3e2		       f0 55		      BEQ	Animation6
   1072  f3e4		       c9 07		      CMP	#7
   1073  f3e6		       f0 5c		      BEQ	Animation7
   1074  f3e8		       c9 08		      CMP	#8
   1075  f3ea		       f0 63		      BEQ	Animation8
   1076  f3ec		       c9 09		      CMP	#9
   1077  f3ee		       f0 6a		      BEQ	Animation9
   1078  f3f0		       c9 0a		      CMP	#10
   1079  f3f2		       f0 71		      BEQ	Animation10
   1080  f3f4
   1081  f3f4				   AnimationFrameRet
   1082  f3f4		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1083  f3f7
   1084  f3f7				   Animation0
   1085  f3f7		       a9 00		      LDA	#<Sprite0Data
   1086  f3f9		       85 81		      STA	SpriteAddrPtr
   1087  f3fb		       a9 f8		      LDA	#>Sprite0Data
   1088  f3fd		       85 82		      STA	SpriteAddrPtr+1
   1089  f3ff		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1090  f402
   1091  f402				   Animation1
   1092  f402		       a9 12		      LDA	#<Sprite1Data
   1093  f404		       85 81		      STA	SpriteAddrPtr
   1094  f406		       a9 f8		      LDA	#>Sprite1Data
   1095  f408		       85 82		      STA	SpriteAddrPtr+1
   1096  f40a		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1097  f40d
   1098  f40d				   Animation2
   1099  f40d		       a9 24		      LDA	#<Sprite2Data
   1100  f40f		       85 81		      STA	SpriteAddrPtr
   1101  f411		       a9 f8		      LDA	#>Sprite2Data
   1102  f413		       85 82		      STA	SpriteAddrPtr+1
   1103  f415		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1104  f418
   1105  f418				   Animation3
   1106  f418		       a9 36		      LDA	#<Sprite3Data
   1107  f41a		       85 81		      STA	SpriteAddrPtr
   1108  f41c		       a9 f8		      LDA	#>Sprite3Data
   1109  f41e		       85 82		      STA	SpriteAddrPtr+1
   1110  f420		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1111  f423
   1112  f423				   Animation4
   1113  f423		       a9 48		      LDA	#<Sprite4Data
   1114  f425		       85 81		      STA	SpriteAddrPtr
   1115  f427		       a9 f8		      LDA	#>Sprite4Data
   1116  f429		       85 82		      STA	SpriteAddrPtr+1
   1117  f42b		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1118  f42e
   1119  f42e				   Animation5
   1120  f42e		       a9 5a		      LDA	#<Sprite5Data
   1121  f430		       85 81		      STA	SpriteAddrPtr
   1122  f432		       a9 f8		      LDA	#>Sprite5Data
   1123  f434		       85 82		      STA	SpriteAddrPtr+1
   1124  f436		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1125  f439
   1126  f439				   Animation6
   1127  f439		       a9 6c		      LDA	#<Sprite6Data
   1128  f43b		       85 81		      STA	SpriteAddrPtr
   1129  f43d		       a9 f8		      LDA	#>Sprite6Data
   1130  f43f		       85 82		      STA	SpriteAddrPtr+1
   1131  f441		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1132  f444
   1133  f444				   Animation7
   1134  f444		       a9 7e		      LDA	#<Sprite7Data
   1135  f446		       85 81		      STA	SpriteAddrPtr
   1136  f448		       a9 f8		      LDA	#>Sprite7Data
   1137  f44a		       85 82		      STA	SpriteAddrPtr+1
   1138  f44c		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1139  f44f
   1140  f44f				   Animation8
   1141  f44f		       a9 90		      LDA	#<Sprite8Data
   1142  f451		       85 81		      STA	SpriteAddrPtr
   1143  f453		       a9 f8		      LDA	#>Sprite8Data
   1144  f455		       85 82		      STA	SpriteAddrPtr+1
   1145  f457		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1146  f45a
   1147  f45a				   Animation9
   1148  f45a		       a9 a0		      LDA	#<Sprite9Data
   1149  f45c		       85 81		      STA	SpriteAddrPtr
   1150  f45e		       a9 f8		      LDA	#>Sprite9Data
   1151  f460		       85 82		      STA	SpriteAddrPtr+1
   1152  f462		       4c 6d f4 	      JMP	ApplyAnimationFrameRet
   1153  f465
   1154  f465				   Animation10
   1155  f465		       a9 b0		      LDA	#<Sprite10Data
   1156  f467		       85 81		      STA	SpriteAddrPtr
   1157  f469		       a9 f8		      LDA	#>Sprite10Data
   1158  f46b		       85 82		      STA	SpriteAddrPtr+1
   1159  f46d
   1160  f46d				   ApplyAnimationFrameRet
   1161  f46d		       60		      RTS
   1162  f46e
   1163  f46e							;==================================================================================
   1164  f46e							; GetControllerInputsDirectional - Update Player Velocity Mask According to Inputs
   1165  f46e							;==================================================================================
   1166  f46e
   1167  f46e				   GetControllerInputsDirectional
   1168  f46e							; Check if game is in death animation
   1169  f46e		       a5 ae		      LDA	GameState
   1170  f470		       c9 01		      CMP	#1
   1171  f472		       f0 3d		      BEQ	ControllerRet
   1172  f474
   1173  f474		       ae 80 02 	      LDX	SWCHA
   1174  f477
   1175  f477							; Check Right Input
   1176  f477		       8a		      TXA
   1177  f478		       29 80		      AND	#%10000000
   1178  f47a		       f0 12		      BEQ	RightInput
   1179  f47c
   1180  f47c							; Check Left Input
   1181  f47c		       8a		      TXA
   1182  f47d		       29 40		      AND	#%01000000
   1183  f47f		       f0 18		      BEQ	LeftInput
   1184  f481
   1185  f481							; Check Down Input
   1186  f481		       8a		      TXA
   1187  f482		       29 20		      AND	#%00100000
   1188  f484		       f0 20		      BEQ	DownInput
   1189  f486
   1190  f486							; Check Up Input
   1191  f486		       8a		      TXA
   1192  f487		       29 10		      AND	#%00010000
   1193  f489		       f0 22		      BEQ	UpInput
   1194  f48b
   1195  f48b							; No Input Detected
   1196  f48b		       4c b1 f4 	      JMP	ControllerRet
   1197  f48e
   1198  f48e				   RightInput
   1199  f48e		       a9 08		      LDA	#%1000
   1200  f490		       85 0b		      STA	REFP0
   1201  f492		       85 a9		      STA	PlayerReflectedBuffer
   1202  f494
   1203  f494		       85 86		      STA	PlayerVelocityMask
   1204  f496		       4c b1 f4 	      JMP	ControllerRet
   1205  f499
   1206  f499				   LeftInput
   1207  f499		       a9 00		      LDA	#0
   1208  f49b		       85 0b		      STA	REFP0
   1209  f49d		       85 a9		      STA	PlayerReflectedBuffer
   1210  f49f
   1211  f49f		       a9 04		      LDA	#%0100
   1212  f4a1		       85 86		      STA	PlayerVelocityMask
   1213  f4a3		       4c b1 f4 	      JMP	ControllerRet
   1214  f4a6
   1215  f4a6				   DownInput
   1216  f4a6		       a9 02		      LDA	#%0010
   1217  f4a8		       85 86		      STA	PlayerVelocityMask
   1218  f4aa		       4c b1 f4 	      JMP	ControllerRet
   1219  f4ad
   1220  f4ad				   UpInput
   1221  f4ad		       a9 01		      LDA	#%0001
   1222  f4af		       85 86		      STA	PlayerVelocityMask
   1223  f4b1
   1224  f4b1				   ControllerRet
   1225  f4b1		       60		      RTS
   1226  f4b2
   1227  f4b2							;==================================================================================
   1228  f4b2							; GetControllerInputsButton - Pause Game
   1229  f4b2							;==================================================================================
   1230  f4b2
   1231  f4b2				   GetControllerInputsButton
   1232  f4b2							; Verify Button Press
   1233  f4b2		       a5 0c		      LDA	INPT4
   1234  f4b4		       29 80		      AND	#%10000000
   1235  f4b6		       a8		      TAY
   1236  f4b7
   1237  f4b7							; See if it's Edge
   1238  f4b7		       c5 ad		      CMP	WasButtonPressed
   1239  f4b9		       f0 1e		      BEQ	StateNotChanged
   1240  f4bb
   1241  f4bb				   StateChanged
   1242  f4bb							; Only React to One Edge
   1243  f4bb		       c9 00		      CMP	#0
   1244  f4bd		       d0 1a		      BNE	ButtonNotPushed
   1245  f4bf
   1246  f4bf							; Check Expected Behavior if in Game Over Screen
   1247  f4bf		       a5 ae		      LDA	GameState
   1248  f4c1		       c9 03		      CMP	#3
   1249  f4c3		       d0 03		      BNE	PauseUnpauseGame
   1250  f4c5
   1251  f4c5				   RestartGame
   1252  f4c5							; Fully Reset Game
   1253  f4c5		       4c 00 f0 	      JMP	Reset
   1254  f4c8
   1255  f4c8				   PauseUnpauseGame
   1256  f4c8							; Pause/Unpause Game
   1257  f4c8		       a5 ae		      LDA	GameState
   1258  f4ca		       c9 00		      CMP	#0
   1259  f4cc		       f0 07		      BEQ	PauseGame
   1260  f4ce
   1261  f4ce				   UnpauseGame
   1262  f4ce		       a9 00		      LDA	#0
   1263  f4d0		       85 ae		      STA	GameState
   1264  f4d2		       4c d9 f4 	      JMP	ControllerButtonRet
   1265  f4d5
   1266  f4d5				   PauseGame
   1267  f4d5		       a9 02		      LDA	#2
   1268  f4d7		       85 ae		      STA	GameState
   1269  f4d9
   1270  f4d9				   StateNotChanged
   1271  f4d9				   ButtonNotPushed
   1272  f4d9				   ControllerButtonRet
   1273  f4d9		       84 ad		      STY	WasButtonPressed
   1274  f4db		       60		      RTS
   1275  f4dc
   1276  f4dc							;==================================================================================
   1277  f4dc							; GetController2Inputs - DEBUG - Controls Ghost
   1278  f4dc							;==================================================================================
   1279  f4dc
   1280  f4dc				   GetController2InputsDEBUG
   1281  f4dc		       ae 80 02 	      LDX	SWCHA
   1282  f4df
   1283  f4df							; Check Right Input
   1284  f4df		       8a		      TXA
   1285  f4e0		       29 08		      AND	#%00001000
   1286  f4e2		       f0 12		      BEQ	RightInputGhost
   1287  f4e4
   1288  f4e4							; Check Left Input
   1289  f4e4		       8a		      TXA
   1290  f4e5		       29 04		      AND	#%00000100
   1291  f4e7		       f0 18		      BEQ	LeftInputGhost
   1292  f4e9
   1293  f4e9							; Check Down Input
   1294  f4e9		       8a		      TXA
   1295  f4ea		       29 02		      AND	#%00000010
   1296  f4ec		       f0 1e		      BEQ	DownInputGhost
   1297  f4ee
   1298  f4ee							; Check Up Input
   1299  f4ee		       8a		      TXA
   1300  f4ef		       29 01		      AND	#%00000001
   1301  f4f1		       f0 1e		      BEQ	UpInputGhost
   1302  f4f3
   1303  f4f3							; No Input Detected
   1304  f4f3		       4c 13 f5 	      JMP	ControllerRetGhost
   1305  f4f6
   1306  f4f6				   RightInputGhost
   1307  f4f6		       e6 8a		      INC	GhostSpriteXPos
   1308  f4f8		       a9 08		      LDA	#%1000
   1309  f4fa		       85 0c		      STA	REFP1
   1310  f4fc		       85 aa		      STA	GhostReflectedBuffer
   1311  f4fe		       4c 13 f5 	      JMP	ControllerRetGhost
   1312  f501
   1313  f501				   LeftInputGhost
   1314  f501		       c6 8a		      DEC	GhostSpriteXPos
   1315  f503		       a9 00		      LDA	#0
   1316  f505		       85 0c		      STA	REFP1
   1317  f507		       85 aa		      STA	GhostReflectedBuffer
   1318  f509		       4c 13 f5 	      JMP	ControllerRetGhost
   1319  f50c
   1320  f50c				   DownInputGhost
   1321  f50c		       c6 8c		      DEC	GhostSpriteYPos
   1322  f50e		       4c 13 f5 	      JMP	ControllerRetGhost
   1323  f511
   1324  f511				   UpInputGhost
   1325  f511		       e6 8c		      INC	GhostSpriteYPos
   1326  f513
   1327  f513				   ControllerRetGhost
   1328  f513		       60		      RTS
   1329  f514
   1330  f514							;==================================================================================
   1331  f514							; UpdateTimer - Updates All Timers
   1332  f514							;==================================================================================
   1333  f514
   1334  f514				   UpdateTimer
   1335  f514				   UpdateTimer5
   1336  f514		       a5 a7		      LDA	TimerCounter5
   1337  f516		       c9 00		      CMP	#0
   1338  f518		       d0 07		      BNE	DidntReachLimitTimer5
   1339  f51a
   1340  f51a				   ReachedLimitTimer5
   1341  f51a		       a9 05		      LDA	#TIMER_LIMIT1
   1342  f51c		       85 a7		      STA	TimerCounter5
   1343  f51e		       4c 23 f5 	      JMP	UpdateTimer20
   1344  f521
   1345  f521				   DidntReachLimitTimer5
   1346  f521		       c6 a7		      DEC	TimerCounter5
   1347  f523
   1348  f523				   UpdateTimer20
   1349  f523		       a5 a8		      LDA	TimerCounter20
   1350  f525		       c9 00		      CMP	#0
   1351  f527		       d0 07		      BNE	DidntReachLimitTimer20
   1352  f529
   1353  f529				   ReachedLimitTimer20
   1354  f529		       a9 14		      LDA	#TIMER_LIMIT2
   1355  f52b		       85 a8		      STA	TimerCounter20
   1356  f52d		       4c 32 f5 	      JMP	TimerRet
   1357  f530
   1358  f530				   DidntReachLimitTimer20
   1359  f530		       c6 a8		      DEC	TimerCounter20
   1360  f532
   1361  f532				   TimerRet
   1362  f532		       60		      RTS
   1363  f533
   1364  f533							;==================================================================================
   1365  f533							; UpdateScore
   1366  f533							;==================================================================================
   1367  f533
   1368  f533				   UpdateScore
   1369  f533							; Check If Wafer Was Picked Up
   1370  f533		       a5 94		      LDA	PickedUpWaferBuffer
   1371  f535		       c9 00		      CMP	#0
   1372  f537		       f0 26		      BEQ	DidntPickUpWafer
   1373  f539
   1374  f539							; Picked Up Wafer - Increase Ones and Add to Wafer Count
   1375  f539		       e6 a0		      INC	ScoreOnes
   1376  f53b		       e6 ac		      INC	WaferCount
   1377  f53d
   1378  f53d							; Check if Ones reached 10
   1379  f53d		       a6 a0		      LDX	ScoreOnes
   1380  f53f		       e0 0a		      CPX	#10
   1381  f541		       d0 1c		      BNE	NotYet10
   1382  f543
   1383  f543				   OnesReached10
   1384  f543							; Reset Ones and Increase Tens
   1385  f543		       a2 00		      LDX	#0
   1386  f545		       86 a0		      STX	ScoreOnes
   1387  f547		       e6 9f		      INC	ScoreTens
   1388  f549
   1389  f549							; Check if Tens reached 10
   1390  f549		       a6 9f		      LDX	ScoreTens
   1391  f54b		       e0 0a		      CPX	#10
   1392  f54d		       d0 10		      BNE	NotYet10
   1393  f54f
   1394  f54f				   TensReached10
   1395  f54f							; Reset Tens
   1396  f54f		       a2 00		      LDX	#0
   1397  f551		       86 9f		      STX	ScoreTens
   1398  f553		       e6 9e		      INC	ScoreHundreds
   1399  f555
   1400  f555							; Check if Hundreds reached 10
   1401  f555		       a6 9e		      LDX	ScoreHundreds
   1402  f557		       e0 0a		      CPX	#10
   1403  f559		       d0 04		      BNE	NotYet10
   1404  f55b
   1405  f55b				   HundredsReached10
   1406  f55b							; Reset Hundreds
   1407  f55b		       a2 00		      LDX	#0
   1408  f55d		       86 9e		      STX	ScoreHundreds
   1409  f55f
   1410  f55f				   DidntPickUpWafer
   1411  f55f				   NotYet10
   1412  f55f							; Flush PickedUpWaferBuffer
   1413  f55f		       a9 00		      LDA	#0
   1414  f561		       85 94		      STA	PickedUpWaferBuffer
   1415  f563
   1416  f563		       60		      RTS
   1417  f564
   1418  f564							;==================================================================================
   1419  f564							; HandleGameOver
   1420  f564							;==================================================================================
   1421  f564
   1422  f564				   HandleGameOver
   1423  f564							; Check if Button is Pressed
   1424  f564		       20 b2 f4 	      JSR	GetControllerInputsButton
   1425  f567
   1426  f567							; TIM64T Loop
   1427  f567				   VBlankLoopGameOver
   1428  f567		       ad 84 02 	      LDA	INTIM
   1429  f56a		       d0 fb		      BNE	VBlankLoopGameOver
   1430  f56c
   1431  f56c							; Show Screen
   1432  f56c		       20 85 f5 	      JSR	ShowGameOverScreen
   1433  f56f		       20 bf f5 	      JSR	GameOverOverscan
   1434  f572		       20 1b f0 	      JSR	HandleVSync
   1435  f575
   1436  f575							; Initialize TIM64T
   1437  f575		       a9 2a		      LDA	#42
   1438  f577		       8d 96 02 	      STA	TIM64T
   1439  f57a
   1440  f57a							; Prepare Registers for VBLANK
   1441  f57a		       a9 00		      LDA	#0
   1442  f57c		       85 00		      STA	VSYNC
   1443  f57e		       a9 42		      LDA	#%01000010
   1444  f580		       85 01		      STA	VBLANK
   1445  f582
   1446  f582		       4c 64 f5 	      JMP	HandleGameOver
   1447  f585
   1448  f585							;==================================================================================
   1449  f585							; ShowGameOverScreen
   1450  f585							;==================================================================================
   1451  f585
   1452  f585				   ShowGameOverScreen
   1453  f585		       a9 00		      LDA	#0
   1454  f587		       85 01		      STA	VBLANK
   1455  f589
   1456  f589		       a9 0e		      LDA	#$0E
   1457  f58b		       85 08		      STA	COLUPF
   1458  f58d
   1459  f58d		       a2 3c		      LDX	#60
   1460  f58f		       85 02		      STA	WSYNC
   1461  f591				   GameOverLoop1
   1462  f591		       85 02		      STA	WSYNC
   1463  f593		       ca		      DEX
   1464  f594		       d0 fb		      BNE	GameOverLoop1
   1465  f596
   1466  f596		       a2 32		      LDX	#50
   1467  f598				   GameOverLoop2
   1468  f598							; Display Game Over Message
   1469  f598		       bd 40 fb 	      LDA	GameOverMessage_STRIP_0,x
   1470  f59b		       85 0d		      STA	PF0
   1471  f59d		       bd 72 fb 	      LDA	GameOverMessage_STRIP_1,x
   1472  f5a0		       85 0e		      STA	PF1
   1473  f5a2		       bd a4 fb 	      LDA	GameOverMessage_STRIP_2,x
   1474  f5a5		       85 0f		      STA	PF2
   1475  f5a7
   1476  f5a7		       20 c7 f5 	      JSR	Delay12
   1477  f5aa
   1478  f5aa		       a9 00		      LDA	#0
   1479  f5ac		       85 0d		      STA	PF0
   1480  f5ae		       85 0e		      STA	PF1
   1481  f5b0		       85 0f		      STA	PF2
   1482  f5b2
   1483  f5b2		       85 02		      STA	WSYNC
   1484  f5b4		       ca		      DEX
   1485  f5b5		       d0 e1		      BNE	GameOverLoop2
   1486  f5b7
   1487  f5b7		       a2 51		      LDX	#81
   1488  f5b9				   GameOverLoop3
   1489  f5b9		       85 02		      STA	WSYNC
   1490  f5bb		       ca		      DEX
   1491  f5bc		       d0 fb		      BNE	GameOverLoop3
   1492  f5be
   1493  f5be		       60		      RTS
   1494  f5bf
   1495  f5bf							;==================================================================================
   1496  f5bf							; GameOverOverscan
   1497  f5bf							;==================================================================================
   1498  f5bf
   1499  f5bf				   GameOverOverscan
   1500  f5bf
   1501  f5bf		       a2 1e		      LDX	#30
   1502  f5c1				   GameOverOverscanLoop
   1503  f5c1		       85 02		      STA	WSYNC
   1504  f5c3		       ca		      DEX
   1505  f5c4		       d0 fb		      BNE	GameOverOverscanLoop
   1506  f5c6
   1507  f5c6		       60		      RTS
   1508  f5c7
   1509  f5c7							;==================================================================================
   1510  f5c7							; Delay12 - Waste 12 cycles of CPU
   1511  f5c7							;==================================================================================
   1512  f5c7
   1513  f5c7				   Delay12
   1514  f5c7		       60		      RTS
   1515  f5c8
   1516  f5c8							;==================================================================================
   1517  f5c8							; WaferXPosArray0
   1518  f5c8							;==================================================================================
   1519  f5c8
   1520  f5c8				   WaferXPosArray0
   1521  f5c8		       19 23 3c 64*	      .byte.b	25,35,60,100,130,140
   1522  f5ce
   1523  f5ce							;==================================================================================
   1524  f5ce							; FindWaferLookUp - Look up table for finding wafer in memory
   1525  f5ce							;==================================================================================
   1526  f5ce
   1527  f5ce				   FindWaferLookUp
   1528  f5ce		       00 02 04 08*	      .byte.b	0,%00000010,%00000100,%00001000,%00010000,%00100000,%01000000,%10000000
   1529  f5d6
   1530  f5d6							;==================================================================================
   1531  f5d6							; MultBy14
   1532  f5d6							;==================================================================================
   1533  f5d6
   1534  f5d6				   MultBy14
   1535  f5d6		       f0 fe 0c 1a*	      .byte.b	-16,-2,12,26,40,54,68,82,96,110,124
   1536  f5e1
   1537  f5e1							;==================================================================================
   1538  f5e1							; Lives Icons NUSIZ0 Look up table
   1539  f5e1							;==================================================================================
   1540  f5e1
   1541  f5e1				   LivesNUSIZ0LookUp
   1542  f5e1		       00 00 01 03	      .byte.b	0,0,%001,%011
   1543  f5e5
   1544  f5e5							;==================================================================================
   1545  f5e5							; CheckLineBytes
   1546  f5e5							;==================================================================================
   1547  f5e5
   1548  f5e5				   CheckLineBytes
   1549  f5e5		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1550  f5f0		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,7,7,0,0
   1551  f5fb		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1552  f606		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1553  f611		       06 06 00 00*	      .byte.b	6,6,0,0,0,0,0,0,0,0,0
   1554  f61c		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1555  f627		       00 00 00 00*	      .byte.b	0,0,0,0,5,5,0,0,0,0,0
   1556  f632		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1557  f63d		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,4,4,0,0,0
   1558  f648		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1559  f653		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,3,3,0
   1560  f65e		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1561  f669		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,2
   1562  f674		       02 00 00 00*	      .byte.b	2,0,0,0,0,0,0,0,0,0,0
   1563  f67f		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1564  f68a		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,1,1
   1565  f695		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1566  f6a0		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0
   1567  f6ab
   1568  f6ab				   ConvertPlayerPosToWaferIndex
   1569  f6ab		       07 07 07 07*	      .byte.b	7,7,7,7,7,7,7,7,7,7
   1570  f6b5		       07 07 07 07*	      .byte.b	7,7,7,7,7,7,7,7,7,7
   1571  f6bf		       07 07 07 07*	      .byte.b	7,7,7,7,7,7,7,7,7,7
   1572  f6c9		       07 07 07 07*	      .byte.b	7,7,7,7,7,7,7,7,7,6
   1573  f6d3		       06 06 06 06*	      .byte.b	6,6,6,6,6,6,6,6,6,6
   1574  f6dd		       06 06 06 06*	      .byte.b	6,6,6,6,6,6,6,6,6,6
   1575  f6e7		       06 06 06 06*	      .byte.b	6,6,6,6,6,6,6,6,6,5
   1576  f6f1		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5,5,5
   1577  f6fb		       05 05 05 05*	      .byte.b	5,5,5,5,5,5,5,5,5,5
   1578  f705		       05 05 04 04*	      .byte.b	5,5,4,4,4,4,4,4,4,4
   1579  f70f		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4,4,4
   1580  f719		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,3,3,3
   1581  f723		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3,3,3
   1582  f72d		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3,3,3
   1583  f737		       02 02 02 02*	      .byte.b	2,2,2,2,2,2,2,2,2,2
   1584  f741		       02 02 02 02*	      .byte.b	2,2,2,2,2,2,2,2,2,2
   1585  f74b		       02 02 02 02*	      .byte.b	2,2,2,2,2,2,1,1,1,1
   1586  f755		       01 01 01 01*	      .byte.b	1,1,1,1,1,1,1,1,1,1
   1587  f75f		       01 01 01 01*	      .byte.b	1,1,1,1,1,1,1,1,1,1
   1588  f769		       01 01 01 01	      .byte.b	1,1,1,1
   1589  f76d
   1590  f76d							;===============================================================================
   1591  f76d							; free space check before page boundry
   1592  f76d							;===============================================================================
   1593  f76d
 Start of Sprite0Data is:  $f76d
   1594  f76d					      echo	"Start of Sprite0Data is: ", *
   1595  f800		       00 00 00 00*	      align	256
   1596  f800
   1597  f800							;==================================================================================
   1598  f800							; Sprite Data - Pacman
   1599  f800							;==================================================================================
   1600  f800
   1601  f800				   Sprite0Data
   1602  f800							; Frame 0
   1603  f800		       00		      .byte.b	#%00000000
   1604  f801		       00		      .byte.b	#%00000000
   1605  f802		       7e		      .byte.b	#%01111110
   1606  f803		       7e		      .byte.b	#%01111110
   1607  f804		       3f		      .byte.b	#%00111111
   1608  f805		       3f		      .byte.b	#%00111111
   1609  f806		       0f		      .byte.b	#%00001111
   1610  f807		       0f		      .byte.b	#%00001111
   1611  f808		       07		      .byte.b	#%00000111
   1612  f809		       07		      .byte.b	#%00000111
   1613  f80a		       0f		      .byte.b	#%00001111
   1614  f80b		       0f		      .byte.b	#%00001111
   1615  f80c		       3f		      .byte.b	#%00111111
   1616  f80d		       3f		      .byte.b	#%00111111
   1617  f80e		       7e		      .byte.b	#%01111110
   1618  f80f		       7e		      .byte.b	#%01111110
   1619  f810		       00		      .byte.b	#%00000000
   1620  f811		       00		      .byte.b	#%00000000
   1621  f812
   1622  f812				   Sprite1Data
   1623  f812							; Frame 1
   1624  f812		       00		      .byte.b	#%00000000
   1625  f813		       00		      .byte.b	#%00000000
   1626  f814		       7e		      .byte.b	#%01111110
   1627  f815		       7e		      .byte.b	#%01111110
   1628  f816		       ff		      .byte.b	#%11111111
   1629  f817		       ff		      .byte.b	#%11111111
   1630  f818		       3f		      .byte.b	#%00111111
   1631  f819		       3f		      .byte.b	#%00111111
   1632  f81a		       0f		      .byte.b	#%00001111
   1633  f81b		       0f		      .byte.b	#%00001111
   1634  f81c		       3f		      .byte.b	#%00111111
   1635  f81d		       3f		      .byte.b	#%00111111
   1636  f81e		       ff		      .byte.b	#%11111111
   1637  f81f		       ff		      .byte.b	#%11111111
   1638  f820		       7e		      .byte.b	#%01111110
   1639  f821		       7e		      .byte.b	#%01111110
   1640  f822		       00		      .byte.b	#%00000000
   1641  f823		       00		      .byte.b	#%00000000
   1642  f824
   1643  f824				   Sprite2Data
   1644  f824							; Frame 2
   1645  f824		       00		      .byte.b	#%00000000
   1646  f825		       00		      .byte.b	#%00000000
   1647  f826		       7e		      .byte.b	#%01111110
   1648  f827		       7e		      .byte.b	#%01111110
   1649  f828		       ff		      .byte.b	#%11111111
   1650  f829		       ff		      .byte.b	#%11111111
   1651  f82a		       ff		      .byte.b	#%11111111
   1652  f82b		       ff		      .byte.b	#%11111111
   1653  f82c		       0f		      .byte.b	#%00001111
   1654  f82d		       0f		      .byte.b	#%00001111
   1655  f82e		       ff		      .byte.b	#%11111111
   1656  f82f		       ff		      .byte.b	#%11111111
   1657  f830		       ff		      .byte.b	#%11111111
   1658  f831		       ff		      .byte.b	#%11111111
   1659  f832		       7e		      .byte.b	#%01111110
   1660  f833		       7e		      .byte.b	#%01111110
   1661  f834		       00		      .byte.b	#%00000000
   1662  f835		       00		      .byte.b	#%00000000
   1663  f836
   1664  f836				   Sprite3Data
   1665  f836							; Frame 3
   1666  f836		       00		      .byte.b	#%00000000
   1667  f837		       00		      .byte.b	#%00000000
   1668  f838		       7e		      .byte.b	#%01111110
   1669  f839		       7e		      .byte.b	#%01111110
   1670  f83a		       ff		      .byte.b	#%11111111
   1671  f83b		       ff		      .byte.b	#%11111111
   1672  f83c		       ff		      .byte.b	#%11111111
   1673  f83d		       ff		      .byte.b	#%11111111
   1674  f83e		       ff		      .byte.b	#%11111111
   1675  f83f		       ff		      .byte.b	#%11111111
   1676  f840		       ff		      .byte.b	#%11111111
   1677  f841		       ff		      .byte.b	#%11111111
   1678  f842		       ff		      .byte.b	#%11111111
   1679  f843		       ff		      .byte.b	#%11111111
   1680  f844		       7e		      .byte.b	#%01111110
   1681  f845		       7e		      .byte.b	#%01111110
   1682  f846		       00		      .byte.b	#%00000000
   1683  f847		       00		      .byte.b	#%00000000
   1684  f848
   1685  f848				   Sprite4Data
   1686  f848							; Frame 4
   1687  f848		       00		      .byte.b	#%00000000
   1688  f849		       00		      .byte.b	#%00000000
   1689  f84a		       1e		      .byte.b	#%00011110
   1690  f84b		       1e		      .byte.b	#%00011110
   1691  f84c		       1f		      .byte.b	#%00011111
   1692  f84d		       1f		      .byte.b	#%00011111
   1693  f84e		       0f		      .byte.b	#%00001111
   1694  f84f		       0f		      .byte.b	#%00001111
   1695  f850		       07		      .byte.b	#%00000111
   1696  f851		       07		      .byte.b	#%00000111
   1697  f852		       0f		      .byte.b	#%00001111
   1698  f853		       0f		      .byte.b	#%00001111
   1699  f854		       1f		      .byte.b	#%00011111
   1700  f855		       1f		      .byte.b	#%00011111
   1701  f856		       1e		      .byte.b	#%00011110
   1702  f857		       1e		      .byte.b	#%00011110
   1703  f858		       00		      .byte.b	#%00000000
   1704  f859		       00		      .byte.b	#%00000000
   1705  f85a
   1706  f85a				   Sprite5Data
   1707  f85a							; Frame 5
   1708  f85a		       00		      .byte.b	#%00000000
   1709  f85b		       00		      .byte.b	#%00000000
   1710  f85c		       02		      .byte.b	#%00000010
   1711  f85d		       02		      .byte.b	#%00000010
   1712  f85e		       07		      .byte.b	#%00000111
   1713  f85f		       07		      .byte.b	#%00000111
   1714  f860		       07		      .byte.b	#%00000111
   1715  f861		       07		      .byte.b	#%00000111
   1716  f862		       07		      .byte.b	#%00000111
   1717  f863		       07		      .byte.b	#%00000111
   1718  f864		       07		      .byte.b	#%00000111
   1719  f865		       07		      .byte.b	#%00000111
   1720  f866		       07		      .byte.b	#%00000111
   1721  f867		       07		      .byte.b	#%00000111
   1722  f868		       02		      .byte.b	#%00000010
   1723  f869		       02		      .byte.b	#%00000010
   1724  f86a		       00		      .byte.b	#%00000000
   1725  f86b		       00		      .byte.b	#%00000000
   1726  f86c
   1727  f86c				   Sprite6Data
   1728  f86c							; Frame 6
   1729  f86c		       00		      .byte.b	#%00000000
   1730  f86d		       00		      .byte.b	#%00000000
   1731  f86e		       00		      .byte.b	#%00000000
   1732  f86f		       00		      .byte.b	#%00000000
   1733  f870		       00		      .byte.b	#%00000000
   1734  f871		       03		      .byte.b	#%00000011
   1735  f872		       03		      .byte.b	#%00000011
   1736  f873		       07		      .byte.b	#%00000111
   1737  f874		       07		      .byte.b	#%00000111
   1738  f875		       07		      .byte.b	#%00000111
   1739  f876		       07		      .byte.b	#%00000111
   1740  f877		       03		      .byte.b	#%00000011
   1741  f878		       03		      .byte.b	#%00000011
   1742  f879		       00		      .byte.b	#%00000000
   1743  f87a		       00		      .byte.b	#%00000000
   1744  f87b		       00		      .byte.b	#%00000000
   1745  f87c		       00		      .byte.b	#%00000000
   1746  f87d		       00		      .byte.b	#%00000000
   1747  f87e
   1748  f87e				   Sprite7Data
   1749  f87e							; Frame 7
   1750  f87e		       00		      .byte.b	#%00000000
   1751  f87f		       00		      .byte.b	#%00000000
   1752  f880		       00		      .byte.b	#%00000000
   1753  f881		       00		      .byte.b	#%00000000
   1754  f882		       00		      .byte.b	#%00000000
   1755  f883		       00		      .byte.b	#%00000000
   1756  f884		       00		      .byte.b	#%00000000
   1757  f885		       07		      .byte.b	#%00000111
   1758  f886		       07		      .byte.b	#%00000111
   1759  f887		       07		      .byte.b	#%00000111
   1760  f888		       07		      .byte.b	#%00000111
   1761  f889		       00		      .byte.b	#%00000000
   1762  f88a		       00		      .byte.b	#%00000000
   1763  f88b		       00		      .byte.b	#%00000000
   1764  f88c		       00		      .byte.b	#%00000000
   1765  f88d		       00		      .byte.b	#%00000000
   1766  f88e		       00		      .byte.b	#%00000000
   1767  f88f		       00		      .byte.b	#%00000000
   1768  f890
   1769  f890				   Sprite8Data
   1770  f890							; Frame 8
   1771  f890		       00		      .byte.b	#%00000000
   1772  f891		       00		      .byte.b	#%00000000
   1773  f892		       81		      .byte.b	#%10000001
   1774  f893		       81		      .byte.b	#%10000001
   1775  f894		       44		      .byte.b	#%01000100
   1776  f895		       44		      .byte.b	#%01000100
   1777  f896		       38		      .byte.b	#%00111000
   1778  f897		       38		      .byte.b	#%00111000
   1779  f898		       46		      .byte.b	#%01000110
   1780  f899		       46		      .byte.b	#%01000110
   1781  f89a		       81		      .byte.b	#%10000001
   1782  f89b		       81		      .byte.b	#%10000001
   1783  f89c		       00		      .byte.b	#%00000000
   1784  f89d		       00		      .byte.b	#%00000000
   1785  f89e		       00		      .byte.b	#%00000000
   1786  f89f		       00		      .byte.b	#%00000000
   1787  f8a0
   1788  f8a0				   Sprite9Data
   1789  f8a0							; Frame 9
   1790  f8a0		       00		      .byte.b	#%00000000
   1791  f8a1		       00		      .byte.b	#%00000000
   1792  f8a2		       10		      .byte.b	#%00010000
   1793  f8a3		       10		      .byte.b	#%00010000
   1794  f8a4		       81		      .byte.b	#%10000001
   1795  f8a5		       81		      .byte.b	#%10000001
   1796  f8a6		       00		      .byte.b	#%00000000
   1797  f8a7		       00		      .byte.b	#%00000000
   1798  f8a8		       80		      .byte.b	#%10000000
   1799  f8a9		       80		      .byte.b	#%10000000
   1800  f8aa		       01		      .byte.b	#%00000001
   1801  f8ab		       01		      .byte.b	#%00000001
   1802  f8ac		       00		      .byte.b	#%00000000
   1803  f8ad		       00		      .byte.b	#%00000000
   1804  f8ae		       00		      .byte.b	#%00000000
   1805  f8af		       00		      .byte.b	#%00000000
   1806  f8b0
   1807  f8b0				   Sprite10Data
   1808  f8b0							; Frame 10
   1809  f8b0		       00		      .byte.b	#%00000000
   1810  f8b1		       00		      .byte.b	#%00000000
   1811  f8b2		       00		      .byte.b	#%00000000
   1812  f8b3		       00		      .byte.b	#%00000000
   1813  f8b4		       00		      .byte.b	#%00000000
   1814  f8b5		       00		      .byte.b	#%00000000
   1815  f8b6		       00		      .byte.b	#%00000000
   1816  f8b7		       00		      .byte.b	#%00000000
   1817  f8b8		       00		      .byte.b	#%00000000
   1818  f8b9		       00		      .byte.b	#%00000000
   1819  f8ba		       00		      .byte.b	#%00000000
   1820  f8bb		       00		      .byte.b	#%00000000
   1821  f8bc		       00		      .byte.b	#%00000000
   1822  f8bd		       00		      .byte.b	#%00000000
   1823  f8be		       00		      .byte.b	#%00000000
   1824  f8bf		       00		      .byte.b	#%00000000
   1825  f8c0
   1826  f8c0							;==================================================================================
   1827  f8c0							; Sprite Data - Ghost
   1828  f8c0							;==================================================================================
   1829  f8c0
   1830  f8c0				   SpriteGhostData
   1831  f8c0		       00		      .byte.b	#%00000000
   1832  f8c1		       00		      .byte.b	#%00000000
   1833  f8c2		       55		      .byte.b	#%01010101
   1834  f8c3		       55		      .byte.b	#%01010101
   1835  f8c4		       ff		      .byte.b	#%11111111
   1836  f8c5		       ff		      .byte.b	#%11111111
   1837  f8c6		       ff		      .byte.b	#%11111111
   1838  f8c7		       99		      .byte.b	#%10011001
   1839  f8c8		       99		      .byte.b	#%10011001
   1840  f8c9		       bb		      .byte.b	#%10111011
   1841  f8ca		       bb		      .byte.b	#%10111011
   1842  f8cb		       ff		      .byte.b	#%11111111
   1843  f8cc		       7e		      .byte.b	#%01111110
   1844  f8cd		       7e		      .byte.b	#%01111110
   1845  f8ce		       7e		      .byte.b	#%01111110
   1846  f8cf		       7e		      .byte.b	#%01111110
   1847  f8d0		       00		      .byte.b	#%00000000
   1848  f8d1		       00		      .byte.b	#%00000000
   1849  f8d2
   1850  f8d2							;==================================================================================
   1851  f8d2							; Sprite Data - Lives
   1852  f8d2							;==================================================================================
   1853  f8d2
   1854  f8d2				   SpriteLifeData
   1855  f8d2		       00		      .byte.b	#%00000000
   1856  f8d3		       00		      .byte.b	#%00000000
   1857  f8d4		       00		      .byte.b	#%00000000
   1858  f8d5		       00		      .byte.b	#%00000000
   1859  f8d6		       00		      .byte.b	#%00000000
   1860  f8d7		       00		      .byte.b	#%00000000
   1861  f8d8		       00		      .byte.b	#%00000000
   1862  f8d9		       00		      .byte.b	#%00000000
   1863  f8da		       00		      .byte.b	#%00000000
   1864  f8db		       00		      .byte.b	#%00000000
   1865  f8dc		       00		      .byte.b	#%00000000
   1866  f8dd		       00		      .byte.b	#%00000000
   1867  f8de		       00		      .byte.b	#%00000000
   1868  f8df		       00		      .byte.b	#%00000000
   1869  f8e0		       00		      .byte.b	#%00000000
   1870  f8e1		       00		      .byte.b	#%00000000
   1871  f8e2		       00		      .byte.b	#%00000000
   1872  f8e3		       00		      .byte.b	#%00000000
   1873  f8e4		       3c		      .byte.b	#%00111100
   1874  f8e5		       7e		      .byte.b	#%01111110
   1875  f8e6		       ff		      .byte.b	#%11111111
   1876  f8e7		       ff		      .byte.b	#%11111111
   1877  f8e8		       3f		      .byte.b	#%00111111
   1878  f8e9		       0f		      .byte.b	#%00001111
   1879  f8ea		       3f		      .byte.b	#%00111111
   1880  f8eb		       ff		      .byte.b	#%11111111
   1881  f8ec		       ff		      .byte.b	#%11111111
   1882  f8ed		       7e		      .byte.b	#%01111110
   1883  f8ee		       3c		      .byte.b	#%00111100
   1884  f8ef		       00		      .byte.b	#%00000000
   1885  f8f0
   1886  f8f0							;==================================================================================
   1887  f8f0							; free space check before page boundry
   1888  f8f0							;==================================================================================
   1889  f8f0
 End of Sprite0Data is:  $f8f0
   1890  f8f0					      echo	"End of Sprite0Data is: ", *
   1891  f900		       00 00 00 00*	      align	256
   1892  f900
   1893  f900							;==================================================================================
   1894  f900							; Board Data
   1895  f900							;==================================================================================
   1896  f900
------- FILE MainBoard.asm LEVEL 2 PASS 2
      0  f900					      include	"MainBoard.asm"
      1  f900				   MainBoard
      2  f900
      3  f900				   MainBoard_STRIP_0
      4  f900		       50		      .byte.b	80
      5  f901		       00		      .byte.b	0
      6  f902		       f0		      .byte.b	240
      7  f903		       f0		      .byte.b	240
      8  f904		       f0		      .byte.b	240
      9  f905		       10		      .byte.b	16
     10  f906		       10		      .byte.b	16
     11  f907		       10		      .byte.b	16
     12  f908		       10		      .byte.b	16
     13  f909		       10		      .byte.b	16
     14  f90a		       10		      .byte.b	16
     15  f90b		       10		      .byte.b	16
     16  f90c		       10		      .byte.b	16
     17  f90d		       10		      .byte.b	16
     18  f90e		       10		      .byte.b	16
     19  f90f		       10		      .byte.b	16
     20  f910		       10		      .byte.b	16
     21  f911		       10		      .byte.b	16
     22  f912		       10		      .byte.b	16
     23  f913		       10		      .byte.b	16
     24  f914		       10		      .byte.b	16
     25  f915		       10		      .byte.b	16
     26  f916		       10		      .byte.b	16
     27  f917		       10		      .byte.b	16
     28  f918		       10		      .byte.b	16
     29  f919		       10		      .byte.b	16
     30  f91a		       10		      .byte.b	16
     31  f91b		       10		      .byte.b	16
     32  f91c		       10		      .byte.b	16
     33  f91d		       10		      .byte.b	16
     34  f91e		       10		      .byte.b	16
     35  f91f		       10		      .byte.b	16
     36  f920		       10		      .byte.b	16
     37  f921		       10		      .byte.b	16
     38  f922		       10		      .byte.b	16
     39  f923		       10		      .byte.b	16
     40  f924		       10		      .byte.b	16
     41  f925		       10		      .byte.b	16
     42  f926		       10		      .byte.b	16
     43  f927		       10		      .byte.b	16
     44  f928		       10		      .byte.b	16
     45  f929		       10		      .byte.b	16
     46  f92a		       10		      .byte.b	16
     47  f92b		       10		      .byte.b	16
     48  f92c		       10		      .byte.b	16
     49  f92d		       10		      .byte.b	16
     50  f92e		       10		      .byte.b	16
     51  f92f		       10		      .byte.b	16
     52  f930		       10		      .byte.b	16
     53  f931		       10		      .byte.b	16
     54  f932		       10		      .byte.b	16
     55  f933		       10		      .byte.b	16
     56  f934		       10		      .byte.b	16
     57  f935		       10		      .byte.b	16
     58  f936		       10		      .byte.b	16
     59  f937		       10		      .byte.b	16
     60  f938		       10		      .byte.b	16
     61  f939		       f0		      .byte.b	240
     62  f93a		       f0		      .byte.b	240
     63  f93b		       f0		      .byte.b	240
     64  f93c		       f0		      .byte.b	240
     65  f93d		       80		      .byte.b	128
     66  f93e		       80		      .byte.b	128
     67  f93f		       80		      .byte.b	128
     68  f940		       80		      .byte.b	128
     69  f941		       80		      .byte.b	128
     70  f942		       80		      .byte.b	128
     71  f943		       80		      .byte.b	128
     72  f944		       80		      .byte.b	128
     73  f945		       80		      .byte.b	128
     74  f946		       80		      .byte.b	128
     75  f947		       80		      .byte.b	128
     76  f948		       80		      .byte.b	128
     77  f949		       80		      .byte.b	128
     78  f94a		       80		      .byte.b	128
     79  f94b		       80		      .byte.b	128
     80  f94c		       80		      .byte.b	128
     81  f94d		       80		      .byte.b	128
     82  f94e		       80		      .byte.b	128
     83  f94f		       80		      .byte.b	128
     84  f950		       80		      .byte.b	128
     85  f951		       f0		      .byte.b	240
     86  f952		       f0		      .byte.b	240
     87  f953		       f0		      .byte.b	240
     88  f954		       f0		      .byte.b	240
     89  f955		       00		      .byte.b	0
     90  f956		       00		      .byte.b	0
     91  f957		       00		      .byte.b	0
     92  f958		       00		      .byte.b	0
     93  f959		       00		      .byte.b	0
     94  f95a		       00		      .byte.b	0
     95  f95b		       00		      .byte.b	0
     96  f95c		       00		      .byte.b	0
     97  f95d		       00		      .byte.b	0
     98  f95e		       00		      .byte.b	0
     99  f95f		       00		      .byte.b	0
    100  f960		       00		      .byte.b	0
    101  f961		       00		      .byte.b	0
    102  f962		       00		      .byte.b	0
    103  f963		       00		      .byte.b	0
    104  f964		       00		      .byte.b	0
    105  f965		       00		      .byte.b	0
    106  f966		       00		      .byte.b	0
    107  f967		       00		      .byte.b	0
    108  f968		       00		      .byte.b	0
    109  f969		       00		      .byte.b	0
    110  f96a		       00		      .byte.b	0
    111  f96b		       f0		      .byte.b	240
    112  f96c		       f0		      .byte.b	240
    113  f96d		       f0		      .byte.b	240
    114  f96e		       80		      .byte.b	128
    115  f96f		       80		      .byte.b	128
    116  f970		       80		      .byte.b	128
    117  f971		       80		      .byte.b	128
    118  f972		       80		      .byte.b	128
    119  f973		       80		      .byte.b	128
    120  f974		       80		      .byte.b	128
    121  f975		       80		      .byte.b	128
    122  f976		       80		      .byte.b	128
    123  f977		       80		      .byte.b	128
    124  f978		       80		      .byte.b	128
    125  f979		       80		      .byte.b	128
    126  f97a		       80		      .byte.b	128
    127  f97b		       80		      .byte.b	128
    128  f97c		       80		      .byte.b	128
    129  f97d		       80		      .byte.b	128
    130  f97e		       80		      .byte.b	128
    131  f97f		       80		      .byte.b	128
    132  f980		       80		      .byte.b	128
    133  f981		       f0		      .byte.b	240
    134  f982		       f0		      .byte.b	240
    135  f983		       f0		      .byte.b	240
    136  f984		       f0		      .byte.b	240
    137  f985		       10		      .byte.b	16
    138  f986		       10		      .byte.b	16
    139  f987		       10		      .byte.b	16
    140  f988		       10		      .byte.b	16
    141  f989		       10		      .byte.b	16
    142  f98a		       10		      .byte.b	16
    143  f98b		       10		      .byte.b	16
    144  f98c		       10		      .byte.b	16
    145  f98d		       10		      .byte.b	16
    146  f98e		       10		      .byte.b	16
    147  f98f		       10		      .byte.b	16
    148  f990		       10		      .byte.b	16
    149  f991		       10		      .byte.b	16
    150  f992		       10		      .byte.b	16
    151  f993		       10		      .byte.b	16
    152  f994		       10		      .byte.b	16
    153  f995		       10		      .byte.b	16
    154  f996		       10		      .byte.b	16
    155  f997		       10		      .byte.b	16
    156  f998		       10		      .byte.b	16
    157  f999		       10		      .byte.b	16
    158  f99a		       10		      .byte.b	16
    159  f99b		       10		      .byte.b	16
    160  f99c		       10		      .byte.b	16
    161  f99d		       10		      .byte.b	16
    162  f99e		       10		      .byte.b	16
    163  f99f		       10		      .byte.b	16
    164  f9a0		       10		      .byte.b	16
    165  f9a1		       10		      .byte.b	16
    166  f9a2		       10		      .byte.b	16
    167  f9a3		       10		      .byte.b	16
    168  f9a4		       10		      .byte.b	16
    169  f9a5		       10		      .byte.b	16
    170  f9a6		       10		      .byte.b	16
    171  f9a7		       10		      .byte.b	16
    172  f9a8		       10		      .byte.b	16
    173  f9a9		       10		      .byte.b	16
    174  f9aa		       10		      .byte.b	16
    175  f9ab		       10		      .byte.b	16
    176  f9ac		       10		      .byte.b	16
    177  f9ad		       10		      .byte.b	16
    178  f9ae		       10		      .byte.b	16
    179  f9af		       10		      .byte.b	16
    180  f9b0		       10		      .byte.b	16
    181  f9b1		       10		      .byte.b	16
    182  f9b2		       10		      .byte.b	16
    183  f9b3		       10		      .byte.b	16
    184  f9b4		       10		      .byte.b	16
    185  f9b5		       10		      .byte.b	16
    186  f9b6		       10		      .byte.b	16
    187  f9b7		       10		      .byte.b	16
    188  f9b8		       10		      .byte.b	16
    189  f9b9		       10		      .byte.b	16
    190  f9ba		       f0		      .byte.b	240
    191  f9bb		       f0		      .byte.b	240
    192  f9bc		       f0		      .byte.b	240
    193  f9bd		       f0		      .byte.b	240
    194  f9be		       00		      .byte.b	0
    195  f9bf		       00		      .byte.b	0
    196  f9c0				   MainBoard_STRIP_1
    197  f9c0		       aa		      .byte.b	170
    198  f9c1		       00		      .byte.b	0
    199  f9c2		       ff		      .byte.b	255
    200  f9c3		       ff		      .byte.b	255
    201  f9c4		       ff		      .byte.b	255
    202  f9c5		       00		      .byte.b	0
    203  f9c6		       00		      .byte.b	0
    204  f9c7		       00		      .byte.b	0
    205  f9c8		       00		      .byte.b	0
    206  f9c9		       00		      .byte.b	0
    207  f9ca		       00		      .byte.b	0
    208  f9cb		       00		      .byte.b	0
    209  f9cc		       00		      .byte.b	0
    210  f9cd		       00		      .byte.b	0
    211  f9ce		       00		      .byte.b	0
    212  f9cf		       00		      .byte.b	0
    213  f9d0		       00		      .byte.b	0
    214  f9d1		       00		      .byte.b	0
    215  f9d2		       00		      .byte.b	0
    216  f9d3		       00		      .byte.b	0
    217  f9d4		       00		      .byte.b	0
    218  f9d5		       00		      .byte.b	0
    219  f9d6		       00		      .byte.b	0
    220  f9d7		       00		      .byte.b	0
    221  f9d8		       00		      .byte.b	0
    222  f9d9		       00		      .byte.b	0
    223  f9da		       00		      .byte.b	0
    224  f9db		       00		      .byte.b	0
    225  f9dc		       00		      .byte.b	0
    226  f9dd		       00		      .byte.b	0
    227  f9de		       00		      .byte.b	0
    228  f9df		       e3		      .byte.b	227
    229  f9e0		       e3		      .byte.b	227
    230  f9e1		       e3		      .byte.b	227
    231  f9e2		       e3		      .byte.b	227
    232  f9e3		       03		      .byte.b	3
    233  f9e4		       03		      .byte.b	3
    234  f9e5		       03		      .byte.b	3
    235  f9e6		       03		      .byte.b	3
    236  f9e7		       03		      .byte.b	3
    237  f9e8		       03		      .byte.b	3
    238  f9e9		       03		      .byte.b	3
    239  f9ea		       03		      .byte.b	3
    240  f9eb		       03		      .byte.b	3
    241  f9ec		       03		      .byte.b	3
    242  f9ed		       03		      .byte.b	3
    243  f9ee		       03		      .byte.b	3
    244  f9ef		       03		      .byte.b	3
    245  f9f0		       03		      .byte.b	3
    246  f9f1		       03		      .byte.b	3
    247  f9f2		       03		      .byte.b	3
    248  f9f3		       03		      .byte.b	3
    249  f9f4		       03		      .byte.b	3
    250  f9f5		       03		      .byte.b	3
    251  f9f6		       03		      .byte.b	3
    252  f9f7		       03		      .byte.b	3
    253  f9f8		       03		      .byte.b	3
    254  f9f9		       e3		      .byte.b	227
    255  f9fa		       e3		      .byte.b	227
    256  f9fb		       e3		      .byte.b	227
    257  f9fc		       e3		      .byte.b	227
    258  f9fd		       00		      .byte.b	0
    259  f9fe		       00		      .byte.b	0
    260  f9ff		       00		      .byte.b	0
    261  fa00		       00		      .byte.b	0
    262  fa01		       00		      .byte.b	0
    263  fa02		       00		      .byte.b	0
    264  fa03		       00		      .byte.b	0
    265  fa04		       00		      .byte.b	0
    266  fa05		       00		      .byte.b	0
    267  fa06		       00		      .byte.b	0
    268  fa07		       00		      .byte.b	0
    269  fa08		       00		      .byte.b	0
    270  fa09		       00		      .byte.b	0
    271  fa0a		       00		      .byte.b	0
    272  fa0b		       00		      .byte.b	0
    273  fa0c		       00		      .byte.b	0
    274  fa0d		       00		      .byte.b	0
    275  fa0e		       00		      .byte.b	0
    276  fa0f		       00		      .byte.b	0
    277  fa10		       00		      .byte.b	0
    278  fa11		       00		      .byte.b	0
    279  fa12		       1f		      .byte.b	31
    280  fa13		       1f		      .byte.b	31
    281  fa14		       1f		      .byte.b	31
    282  fa15		       00		      .byte.b	0
    283  fa16		       00		      .byte.b	0
    284  fa17		       00		      .byte.b	0
    285  fa18		       00		      .byte.b	0
    286  fa19		       00		      .byte.b	0
    287  fa1a		       00		      .byte.b	0
    288  fa1b		       00		      .byte.b	0
    289  fa1c		       00		      .byte.b	0
    290  fa1d		       00		      .byte.b	0
    291  fa1e		       00		      .byte.b	0
    292  fa1f		       00		      .byte.b	0
    293  fa20		       00		      .byte.b	0
    294  fa21		       00		      .byte.b	0
    295  fa22		       00		      .byte.b	0
    296  fa23		       00		      .byte.b	0
    297  fa24		       00		      .byte.b	0
    298  fa25		       00		      .byte.b	0
    299  fa26		       00		      .byte.b	0
    300  fa27		       00		      .byte.b	0
    301  fa28		       00		      .byte.b	0
    302  fa29		       00		      .byte.b	0
    303  fa2a		       00		      .byte.b	0
    304  fa2b		       1f		      .byte.b	31
    305  fa2c		       1f		      .byte.b	31
    306  fa2d		       00		      .byte.b	0
    307  fa2e		       00		      .byte.b	0
    308  fa2f		       00		      .byte.b	0
    309  fa30		       00		      .byte.b	0
    310  fa31		       00		      .byte.b	0
    311  fa32		       00		      .byte.b	0
    312  fa33		       00		      .byte.b	0
    313  fa34		       00		      .byte.b	0
    314  fa35		       00		      .byte.b	0
    315  fa36		       00		      .byte.b	0
    316  fa37		       00		      .byte.b	0
    317  fa38		       00		      .byte.b	0
    318  fa39		       00		      .byte.b	0
    319  fa3a		       00		      .byte.b	0
    320  fa3b		       00		      .byte.b	0
    321  fa3c		       00		      .byte.b	0
    322  fa3d		       00		      .byte.b	0
    323  fa3e		       00		      .byte.b	0
    324  fa3f		       00		      .byte.b	0
    325  fa40		       00		      .byte.b	0
    326  fa41		       00		      .byte.b	0
    327  fa42		       1f		      .byte.b	31
    328  fa43		       1f		      .byte.b	31
    329  fa44		       1f		      .byte.b	31
    330  fa45		       00		      .byte.b	0
    331  fa46		       00		      .byte.b	0
    332  fa47		       00		      .byte.b	0
    333  fa48		       00		      .byte.b	0
    334  fa49		       00		      .byte.b	0
    335  fa4a		       00		      .byte.b	0
    336  fa4b		       00		      .byte.b	0
    337  fa4c		       00		      .byte.b	0
    338  fa4d		       00		      .byte.b	0
    339  fa4e		       00		      .byte.b	0
    340  fa4f		       00		      .byte.b	0
    341  fa50		       00		      .byte.b	0
    342  fa51		       00		      .byte.b	0
    343  fa52		       00		      .byte.b	0
    344  fa53		       00		      .byte.b	0
    345  fa54		       00		      .byte.b	0
    346  fa55		       00		      .byte.b	0
    347  fa56		       00		      .byte.b	0
    348  fa57		       00		      .byte.b	0
    349  fa58		       00		      .byte.b	0
    350  fa59		       00		      .byte.b	0
    351  fa5a		       00		      .byte.b	0
    352  fa5b		       f8		      .byte.b	248
    353  fa5c		       f8		      .byte.b	248
    354  fa5d		       f8		      .byte.b	248
    355  fa5e		       f8		      .byte.b	248
    356  fa5f		       f8		      .byte.b	248
    357  fa60		       f8		      .byte.b	248
    358  fa61		       f8		      .byte.b	248
    359  fa62		       f8		      .byte.b	248
    360  fa63		       f8		      .byte.b	248
    361  fa64		       00		      .byte.b	0
    362  fa65		       00		      .byte.b	0
    363  fa66		       00		      .byte.b	0
    364  fa67		       00		      .byte.b	0
    365  fa68		       00		      .byte.b	0
    366  fa69		       00		      .byte.b	0
    367  fa6a		       00		      .byte.b	0
    368  fa6b		       00		      .byte.b	0
    369  fa6c		       00		      .byte.b	0
    370  fa6d		       00		      .byte.b	0
    371  fa6e		       00		      .byte.b	0
    372  fa6f		       00		      .byte.b	0
    373  fa70		       00		      .byte.b	0
    374  fa71		       00		      .byte.b	0
    375  fa72		       00		      .byte.b	0
    376  fa73		       00		      .byte.b	0
    377  fa74		       00		      .byte.b	0
    378  fa75		       00		      .byte.b	0
    379  fa76		       00		      .byte.b	0
    380  fa77		       00		      .byte.b	0
    381  fa78		       00		      .byte.b	0
    382  fa79		       00		      .byte.b	0
    383  fa7a		       ff		      .byte.b	255
    384  fa7b		       ff		      .byte.b	255
    385  fa7c		       ff		      .byte.b	255
    386  fa7d		       ff		      .byte.b	255
    387  fa7e		       00		      .byte.b	0
    388  fa7f		       00		      .byte.b	0
    389  fa80				   MainBoard_STRIP_2
    390  fa80		       00		      .byte.b	0
    391  fa81		       00		      .byte.b	0
    392  fa82		       ff		      .byte.b	255
    393  fa83		       ff		      .byte.b	255
    394  fa84		       ff		      .byte.b	255
    395  fa85		       80		      .byte.b	128
    396  fa86		       80		      .byte.b	128
    397  fa87		       80		      .byte.b	128
    398  fa88		       80		      .byte.b	128
    399  fa89		       80		      .byte.b	128
    400  fa8a		       80		      .byte.b	128
    401  fa8b		       80		      .byte.b	128
    402  fa8c		       80		      .byte.b	128
    403  fa8d		       80		      .byte.b	128
    404  fa8e		       80		      .byte.b	128
    405  fa8f		       80		      .byte.b	128
    406  fa90		       80		      .byte.b	128
    407  fa91		       80		      .byte.b	128
    408  fa92		       80		      .byte.b	128
    409  fa93		       80		      .byte.b	128
    410  fa94		       80		      .byte.b	128
    411  fa95		       80		      .byte.b	128
    412  fa96		       80		      .byte.b	128
    413  fa97		       80		      .byte.b	128
    414  fa98		       80		      .byte.b	128
    415  fa99		       80		      .byte.b	128
    416  fa9a		       80		      .byte.b	128
    417  fa9b		       80		      .byte.b	128
    418  fa9c		       80		      .byte.b	128
    419  fa9d		       80		      .byte.b	128
    420  fa9e		       80		      .byte.b	128
    421  fa9f		       8f		      .byte.b	143
    422  faa0		       8f		      .byte.b	143
    423  faa1		       8f		      .byte.b	143
    424  faa2		       8f		      .byte.b	143
    425  faa3		       01		      .byte.b	1
    426  faa4		       01		      .byte.b	1
    427  faa5		       01		      .byte.b	1
    428  faa6		       01		      .byte.b	1
    429  faa7		       01		      .byte.b	1
    430  faa8		       01		      .byte.b	1
    431  faa9		       01		      .byte.b	1
    432  faaa		       01		      .byte.b	1
    433  faab		       01		      .byte.b	1
    434  faac		       01		      .byte.b	1
    435  faad		       01		      .byte.b	1
    436  faae		       01		      .byte.b	1
    437  faaf		       01		      .byte.b	1
    438  fab0		       01		      .byte.b	1
    439  fab1		       01		      .byte.b	1
    440  fab2		       01		      .byte.b	1
    441  fab3		       01		      .byte.b	1
    442  fab4		       01		      .byte.b	1
    443  fab5		       01		      .byte.b	1
    444  fab6		       01		      .byte.b	1
    445  fab7		       01		      .byte.b	1
    446  fab8		       01		      .byte.b	1
    447  fab9		       e1		      .byte.b	225
    448  faba		       e1		      .byte.b	225
    449  fabb		       e1		      .byte.b	225
    450  fabc		       e1		      .byte.b	225
    451  fabd		       80		      .byte.b	128
    452  fabe		       80		      .byte.b	128
    453  fabf		       80		      .byte.b	128
    454  fac0		       80		      .byte.b	128
    455  fac1		       80		      .byte.b	128
    456  fac2		       80		      .byte.b	128
    457  fac3		       80		      .byte.b	128
    458  fac4		       80		      .byte.b	128
    459  fac5		       80		      .byte.b	128
    460  fac6		       80		      .byte.b	128
    461  fac7		       80		      .byte.b	128
    462  fac8		       80		      .byte.b	128
    463  fac9		       80		      .byte.b	128
    464  faca		       80		      .byte.b	128
    465  facb		       80		      .byte.b	128
    466  facc		       80		      .byte.b	128
    467  facd		       80		      .byte.b	128
    468  face		       80		      .byte.b	128
    469  facf		       80		      .byte.b	128
    470  fad0		       80		      .byte.b	128
    471  fad1		       80		      .byte.b	128
    472  fad2		       8f		      .byte.b	143
    473  fad3		       8f		      .byte.b	143
    474  fad4		       8f		      .byte.b	143
    475  fad5		       00		      .byte.b	0
    476  fad6		       00		      .byte.b	0
    477  fad7		       00		      .byte.b	0
    478  fad8		       00		      .byte.b	0
    479  fad9		       00		      .byte.b	0
    480  fada		       00		      .byte.b	0
    481  fadb		       00		      .byte.b	0
    482  fadc		       00		      .byte.b	0
    483  fadd		       00		      .byte.b	0
    484  fade		       00		      .byte.b	0
    485  fadf		       00		      .byte.b	0
    486  fae0		       00		      .byte.b	0
    487  fae1		       00		      .byte.b	0
    488  fae2		       00		      .byte.b	0
    489  fae3		       00		      .byte.b	0
    490  fae4		       00		      .byte.b	0
    491  fae5		       00		      .byte.b	0
    492  fae6		       00		      .byte.b	0
    493  fae7		       00		      .byte.b	0
    494  fae8		       00		      .byte.b	0
    495  fae9		       00		      .byte.b	0
    496  faea		       e0		      .byte.b	224
    497  faeb		       e3		      .byte.b	227
    498  faec		       e3		      .byte.b	227
    499  faed		       20		      .byte.b	32
    500  faee		       20		      .byte.b	32
    501  faef		       20		      .byte.b	32
    502  faf0		       20		      .byte.b	32
    503  faf1		       20		      .byte.b	32
    504  faf2		       20		      .byte.b	32
    505  faf3		       20		      .byte.b	32
    506  faf4		       20		      .byte.b	32
    507  faf5		       20		      .byte.b	32
    508  faf6		       20		      .byte.b	32
    509  faf7		       20		      .byte.b	32
    510  faf8		       20		      .byte.b	32
    511  faf9		       20		      .byte.b	32
    512  fafa		       20		      .byte.b	32
    513  fafb		       20		      .byte.b	32
    514  fafc		       20		      .byte.b	32
    515  fafd		       20		      .byte.b	32
    516  fafe		       20		      .byte.b	32
    517  faff		       20		      .byte.b	32
    518  fb00		       20		      .byte.b	32
    519  fb01		       20		      .byte.b	32
    520  fb02		       3f		      .byte.b	63
    521  fb03		       ff		      .byte.b	255
    522  fb04		       ff		      .byte.b	255
    523  fb05		       00		      .byte.b	0
    524  fb06		       00		      .byte.b	0
    525  fb07		       00		      .byte.b	0
    526  fb08		       00		      .byte.b	0
    527  fb09		       00		      .byte.b	0
    528  fb0a		       00		      .byte.b	0
    529  fb0b		       00		      .byte.b	0
    530  fb0c		       00		      .byte.b	0
    531  fb0d		       00		      .byte.b	0
    532  fb0e		       00		      .byte.b	0
    533  fb0f		       00		      .byte.b	0
    534  fb10		       00		      .byte.b	0
    535  fb11		       00		      .byte.b	0
    536  fb12		       00		      .byte.b	0
    537  fb13		       00		      .byte.b	0
    538  fb14		       00		      .byte.b	0
    539  fb15		       00		      .byte.b	0
    540  fb16		       00		      .byte.b	0
    541  fb17		       00		      .byte.b	0
    542  fb18		       00		      .byte.b	0
    543  fb19		       00		      .byte.b	0
    544  fb1a		       00		      .byte.b	0
    545  fb1b		       8f		      .byte.b	143
    546  fb1c		       8f		      .byte.b	143
    547  fb1d		       8f		      .byte.b	143
    548  fb1e		       8f		      .byte.b	143
    549  fb1f		       8f		      .byte.b	143
    550  fb20		       8f		      .byte.b	143
    551  fb21		       8f		      .byte.b	143
    552  fb22		       8f		      .byte.b	143
    553  fb23		       8f		      .byte.b	143
    554  fb24		       80		      .byte.b	128
    555  fb25		       80		      .byte.b	128
    556  fb26		       80		      .byte.b	128
    557  fb27		       80		      .byte.b	128
    558  fb28		       80		      .byte.b	128
    559  fb29		       80		      .byte.b	128
    560  fb2a		       80		      .byte.b	128
    561  fb2b		       80		      .byte.b	128
    562  fb2c		       80		      .byte.b	128
    563  fb2d		       80		      .byte.b	128
    564  fb2e		       80		      .byte.b	128
    565  fb2f		       80		      .byte.b	128
    566  fb30		       80		      .byte.b	128
    567  fb31		       80		      .byte.b	128
    568  fb32		       80		      .byte.b	128
    569  fb33		       80		      .byte.b	128
    570  fb34		       80		      .byte.b	128
    571  fb35		       80		      .byte.b	128
    572  fb36		       80		      .byte.b	128
    573  fb37		       80		      .byte.b	128
    574  fb38		       80		      .byte.b	128
    575  fb39		       80		      .byte.b	128
    576  fb3a		       ff		      .byte.b	255
    577  fb3b		       ff		      .byte.b	255
    578  fb3c		       ff		      .byte.b	255
    579  fb3d		       ff		      .byte.b	255
    580  fb3e		       00		      .byte.b	0
    581  fb3f		       00		      .byte.b	0
    582  fb40							;end
    583  fb40
------- FILE PacMan.asm
------- FILE GameOverMessage.asm LEVEL 2 PASS 2
      0  fb40					      include	"GameOverMessage.asm"
      1  fb40				   GameOverMessage
      2  fb40
      3  fb40				   GameOverMessage_STRIP_0
      4  fb40		       00		      .byte.b	0
      5  fb41		       00		      .byte.b	0
      6  fb42		       00		      .byte.b	0
      7  fb43		       00		      .byte.b	0
      8  fb44		       c0		      .byte.b	192
      9  fb45		       c0		      .byte.b	192
     10  fb46		       c0		      .byte.b	192
     11  fb47		       c0		      .byte.b	192
     12  fb48		       40		      .byte.b	64
     13  fb49		       40		      .byte.b	64
     14  fb4a		       40		      .byte.b	64
     15  fb4b		       40		      .byte.b	64
     16  fb4c		       40		      .byte.b	64
     17  fb4d		       40		      .byte.b	64
     18  fb4e		       40		      .byte.b	64
     19  fb4f		       40		      .byte.b	64
     20  fb50		       40		      .byte.b	64
     21  fb51		       40		      .byte.b	64
     22  fb52		       40		      .byte.b	64
     23  fb53		       40		      .byte.b	64
     24  fb54		       c0		      .byte.b	192
     25  fb55		       c0		      .byte.b	192
     26  fb56		       c0		      .byte.b	192
     27  fb57		       c0		      .byte.b	192
     28  fb58		       00		      .byte.b	0
     29  fb59		       00		      .byte.b	0
     30  fb5a		       00		      .byte.b	0
     31  fb5b		       e0		      .byte.b	224
     32  fb5c		       e0		      .byte.b	224
     33  fb5d		       e0		      .byte.b	224
     34  fb5e		       20		      .byte.b	32
     35  fb5f		       20		      .byte.b	32
     36  fb60		       20		      .byte.b	32
     37  fb61		       20		      .byte.b	32
     38  fb62		       a0		      .byte.b	160
     39  fb63		       a0		      .byte.b	160
     40  fb64		       a0		      .byte.b	160
     41  fb65		       a0		      .byte.b	160
     42  fb66		       20		      .byte.b	32
     43  fb67		       20		      .byte.b	32
     44  fb68		       20		      .byte.b	32
     45  fb69		       20		      .byte.b	32
     46  fb6a		       20		      .byte.b	32
     47  fb6b		       e0		      .byte.b	224
     48  fb6c		       e0		      .byte.b	224
     49  fb6d		       e0		      .byte.b	224
     50  fb6e		       e0		      .byte.b	224
     51  fb6f		       00		      .byte.b	0
     52  fb70		       00		      .byte.b	0
     53  fb71		       00		      .byte.b	0
     54  fb72				   GameOverMessage_STRIP_1
     55  fb72		       00		      .byte.b	0
     56  fb73		       00		      .byte.b	0
     57  fb74		       00		      .byte.b	0
     58  fb75		       00		      .byte.b	0
     59  fb76		       93		      .byte.b	147
     60  fb77		       93		      .byte.b	147
     61  fb78		       93		      .byte.b	147
     62  fb79		       ba		      .byte.b	186
     63  fb7a		       ba		      .byte.b	186
     64  fb7b		       ba		      .byte.b	186
     65  fb7c		       ba		      .byte.b	186
     66  fb7d		       ba		      .byte.b	186
     67  fb7e		       bb		      .byte.b	187
     68  fb7f		       ab		      .byte.b	171
     69  fb80		       ab		      .byte.b	171
     70  fb81		       aa		      .byte.b	170
     71  fb82		       aa		      .byte.b	170
     72  fb83		       aa		      .byte.b	170
     73  fb84		       aa		      .byte.b	170
     74  fb85		       aa		      .byte.b	170
     75  fb86		       ab		      .byte.b	171
     76  fb87		       ab		      .byte.b	171
     77  fb88		       ab		      .byte.b	171
     78  fb89		       ab		      .byte.b	171
     79  fb8a		       00		      .byte.b	0
     80  fb8b		       00		      .byte.b	0
     81  fb8c		       00		      .byte.b	0
     82  fb8d		       aa		      .byte.b	170
     83  fb8e		       aa		      .byte.b	170
     84  fb8f		       aa		      .byte.b	170
     85  fb90		       aa		      .byte.b	170
     86  fb91		       aa		      .byte.b	170
     87  fb92		       aa		      .byte.b	170
     88  fb93		       aa		      .byte.b	170
     89  fb94		       ba		      .byte.b	186
     90  fb95		       ba		      .byte.b	186
     91  fb96		       ba		      .byte.b	186
     92  fb97		       ba		      .byte.b	186
     93  fb98		       2a		      .byte.b	42
     94  fb99		       2a		      .byte.b	42
     95  fb9a		       2a		      .byte.b	42
     96  fb9b		       2a		      .byte.b	42
     97  fb9c		       2a		      .byte.b	42
     98  fb9d		       bb		      .byte.b	187
     99  fb9e		       bb		      .byte.b	187
    100  fb9f		       bb		      .byte.b	187
    101  fba0		       bb		      .byte.b	187
    102  fba1		       00		      .byte.b	0
    103  fba2		       00		      .byte.b	0
    104  fba3		       00		      .byte.b	0
    105  fba4				   GameOverMessage_STRIP_2
    106  fba4		       00		      .byte.b	0
    107  fba5		       00		      .byte.b	0
    108  fba6		       00		      .byte.b	0
    109  fba7		       00		      .byte.b	0
    110  fba8		       15		      .byte.b	21
    111  fba9		       15		      .byte.b	21
    112  fbaa		       15		      .byte.b	21
    113  fbab		       14		      .byte.b	20
    114  fbac		       14		      .byte.b	20
    115  fbad		       14		      .byte.b	20
    116  fbae		       0c		      .byte.b	12
    117  fbaf		       0c		      .byte.b	12
    118  fbb0		       0c		      .byte.b	12
    119  fbb1		       0c		      .byte.b	12
    120  fbb2		       1c		      .byte.b	28
    121  fbb3		       14		      .byte.b	20
    122  fbb4		       14		      .byte.b	20
    123  fbb5		       14		      .byte.b	20
    124  fbb6		       14		      .byte.b	20
    125  fbb7		       14		      .byte.b	20
    126  fbb8		       1d		      .byte.b	29
    127  fbb9		       1d		      .byte.b	29
    128  fbba		       1d		      .byte.b	29
    129  fbbb		       1d		      .byte.b	29
    130  fbbc		       00		      .byte.b	0
    131  fbbd		       00		      .byte.b	0
    132  fbbe		       00		      .byte.b	0
    133  fbbf		       74		      .byte.b	116
    134  fbc0		       74		      .byte.b	116
    135  fbc1		       74		      .byte.b	116
    136  fbc2		       14		      .byte.b	20
    137  fbc3		       14		      .byte.b	20
    138  fbc4		       14		      .byte.b	20
    139  fbc5		       14		      .byte.b	20
    140  fbc6		       14		      .byte.b	20
    141  fbc7		       35		      .byte.b	53
    142  fbc8		       35		      .byte.b	53
    143  fbc9		       35		      .byte.b	53
    144  fbca		       15		      .byte.b	21
    145  fbcb		       15		      .byte.b	21
    146  fbcc		       15		      .byte.b	21
    147  fbcd		       15		      .byte.b	21
    148  fbce		       15		      .byte.b	21
    149  fbcf		       77		      .byte.b	119
    150  fbd0		       77		      .byte.b	119
    151  fbd1		       77		      .byte.b	119
    152  fbd2		       77		      .byte.b	119
    153  fbd3		       00		      .byte.b	0
    154  fbd4		       00		      .byte.b	0
    155  fbd5		       00		      .byte.b	0
    156  fbd6							;end
    157  fbd6
------- FILE PacMan.asm
   1899  fbd6
   1900  fbd6							;===============================================================================
   1901  fbd6							; free space check before page boundry
   1902  fbd6							;===============================================================================
   1903  fbd6
 End of MainBoard.asm is:  $fbd6
   1904  fbd6					      echo	"End of MainBoard.asm is: ", *
   1905  fc00		       00 00 00 00*	      align	256
   1906  fc00
   1907  fc00							;==================================================================================
   1908  fc00							; Bottom Data
   1909  fc00							;==================================================================================
   1910  fc00
   1911  fc00				   BottomData
   1912  fc00
   1913  fc00							; 0
   1914  fc00		       00		      .byte.b	%00000000
   1915  fc01		       7e		      .byte.b	%01111110
   1916  fc02		       7e		      .byte.b	%01111110
   1917  fc03		       e7		      .byte.b	%11100111
   1918  fc04		       e7		      .byte.b	%11100111
   1919  fc05		       c3		      .byte.b	%11000011
   1920  fc06		       c3		      .byte.b	%11000011
   1921  fc07		       c3		      .byte.b	%11000011
   1922  fc08		       c3		      .byte.b	%11000011
   1923  fc09		       c3		      .byte.b	%11000011
   1924  fc0a		       e7		      .byte.b	%11100111
   1925  fc0b		       e7		      .byte.b	%11100111
   1926  fc0c		       7e		      .byte.b	%01111110
   1927  fc0d		       7e		      .byte.b	%01111110
   1928  fc0e
   1929  fc0e							; 1
   1930  fc0e		       00		      .byte.b	%00000000
   1931  fc0f		       ff		      .byte.b	%11111111
   1932  fc10		       ff		      .byte.b	%11111111
   1933  fc11		       1c		      .byte.b	%00011100
   1934  fc12		       1c		      .byte.b	%00011100
   1935  fc13		       1c		      .byte.b	%00011100
   1936  fc14		       1c		      .byte.b	%00011100
   1937  fc15		       1c		      .byte.b	%00011100
   1938  fc16		       1c		      .byte.b	%00011100
   1939  fc17		       1c		      .byte.b	%00011100
   1940  fc18		       fc		      .byte.b	%11111100
   1941  fc19		       7c		      .byte.b	%01111100
   1942  fc1a		       3c		      .byte.b	%00111100
   1943  fc1b		       1c		      .byte.b	%00011100
   1944  fc1c
   1945  fc1c							; 2
   1946  fc1c		       00		      .byte.b	%00000000
   1947  fc1d		       ff		      .byte.b	%11111111
   1948  fc1e		       ff		      .byte.b	%11111111
   1949  fc1f		       e0		      .byte.b	%11100000
   1950  fc20		       e0		      .byte.b	%11100000
   1951  fc21		       38		      .byte.b	%00111000
   1952  fc22		       0e		      .byte.b	%00001110
   1953  fc23		       07		      .byte.b	%00000111
   1954  fc24		       03		      .byte.b	%00000011
   1955  fc25		       c3		      .byte.b	%11000011
   1956  fc26		       c3		      .byte.b	%11000011
   1957  fc27		       e7		      .byte.b	%11100111
   1958  fc28		       7e		      .byte.b	%01111110
   1959  fc29		       3c		      .byte.b	%00111100
   1960  fc2a
   1961  fc2a							; 3
   1962  fc2a		       00		      .byte.b	%00000000
   1963  fc2b		       3c		      .byte.b	%00111100
   1964  fc2c		       7e		      .byte.b	%01111110
   1965  fc2d		       ef		      .byte.b	%11101111
   1966  fc2e		       c7		      .byte.b	%11000111
   1967  fc2f		       07		      .byte.b	%00000111
   1968  fc30		       0e		      .byte.b	%00001110
   1969  fc31		       1c		      .byte.b	%00011100
   1970  fc32		       0e		      .byte.b	%00001110
   1971  fc33		       07		      .byte.b	%00000111
   1972  fc34		       c7		      .byte.b	%11000111
   1973  fc35		       ef		      .byte.b	%11101111
   1974  fc36		       7e		      .byte.b	%01111110
   1975  fc37		       3c		      .byte.b	%00111100
   1976  fc38
   1977  fc38							; 4
   1978  fc38		       00		      .byte.b	%00000000
   1979  fc39		       06		      .byte.b	%00000110
   1980  fc3a		       06		      .byte.b	%00000110
   1981  fc3b		       ff		      .byte.b	%11111111
   1982  fc3c		       ff		      .byte.b	%11111111
   1983  fc3d		       c6		      .byte.b	%11000110
   1984  fc3e		       c6		      .byte.b	%11000110
   1985  fc3f		       66		      .byte.b	%01100110
   1986  fc40		       66		      .byte.b	%01100110
   1987  fc41		       36		      .byte.b	%00110110
   1988  fc42		       36		      .byte.b	%00110110
   1989  fc43		       1e		      .byte.b	%00011110
   1990  fc44		       0e		      .byte.b	%00001110
   1991  fc45		       0e		      .byte.b	%00001110
   1992  fc46
   1993  fc46							; 5
   1994  fc46		       00		      .byte.b	%00000000
   1995  fc47		       fc		      .byte.b	%11111100
   1996  fc48		       fe		      .byte.b	%11111110
   1997  fc49		       0f		      .byte.b	%00001111
   1998  fc4a		       07		      .byte.b	%00000111
   1999  fc4b		       07		      .byte.b	%00000111
   2000  fc4c		       0f		      .byte.b	%00001111
   2001  fc4d		       fe		      .byte.b	%11111110
   2002  fc4e		       fc		      .byte.b	%11111100
   2003  fc4f		       e0		      .byte.b	%11100000
   2004  fc50		       e0		      .byte.b	%11100000
   2005  fc51		       e0		      .byte.b	%11100000
   2006  fc52		       ff		      .byte.b	%11111111
   2007  fc53		       ff		      .byte.b	%11111111
   2008  fc54
   2009  fc54							; 6
   2010  fc54		       00		      .byte.b	%00000000
   2011  fc55		       3c		      .byte.b	%00111100
   2012  fc56		       7e		      .byte.b	%01111110
   2013  fc57		       e7		      .byte.b	%11100111
   2014  fc58		       c3		      .byte.b	%11000011
   2015  fc59		       c3		      .byte.b	%11000011
   2016  fc5a		       e7		      .byte.b	%11100111
   2017  fc5b		       fe		      .byte.b	%11111110
   2018  fc5c		       fc		      .byte.b	%11111100
   2019  fc5d		       c0		      .byte.b	%11000000
   2020  fc5e		       c3		      .byte.b	%11000011
   2021  fc5f		       e7		      .byte.b	%11100111
   2022  fc60		       ff		      .byte.b	%11111111
   2023  fc61		       7e		      .byte.b	%01111110
   2024  fc62
   2025  fc62							; 7
   2026  fc62		       00		      .byte.b	%00000000
   2027  fc63		       18		      .byte.b	%00011000
   2028  fc64		       18		      .byte.b	%00011000
   2029  fc65		       18		      .byte.b	%00011000
   2030  fc66		       18		      .byte.b	%00011000
   2031  fc67		       18		      .byte.b	%00011000
   2032  fc68		       0c		      .byte.b	%00001100
   2033  fc69		       0c		      .byte.b	%00001100
   2034  fc6a		       0c		      .byte.b	%00001100
   2035  fc6b		       c6		      .byte.b	%11000110
   2036  fc6c		       c7		      .byte.b	%11000111
   2037  fc6d		       ff		      .byte.b	%11111111
   2038  fc6e		       ff		      .byte.b	%11111111
   2039  fc6f		       ff		      .byte.b	%11111111
   2040  fc70
   2041  fc70							; 8
   2042  fc70		       00		      .byte.b	%00000000
   2043  fc71		       3c		      .byte.b	%00111100
   2044  fc72		       7e		      .byte.b	%01111110
   2045  fc73		       e7		      .byte.b	%11100111
   2046  fc74		       c3		      .byte.b	%11000011
   2047  fc75		       c3		      .byte.b	%11000011
   2048  fc76		       e7		      .byte.b	%11100111
   2049  fc77		       7e		      .byte.b	%01111110
   2050  fc78		       3c		      .byte.b	%00111100
   2051  fc79		       66		      .byte.b	%01100110
   2052  fc7a		       c3		      .byte.b	%11000011
   2053  fc7b		       e7		      .byte.b	%11100111
   2054  fc7c		       7e		      .byte.b	%01111110
   2055  fc7d		       3c		      .byte.b	%00111100
   2056  fc7e
   2057  fc7e							; 9
   2058  fc7e		       00		      .byte.b	%00000000
   2059  fc7f		       3c		      .byte.b	%00111100
   2060  fc80		       7e		      .byte.b	%01111110
   2061  fc81		       e7		      .byte.b	%11100111
   2062  fc82		       c3		      .byte.b	%11000011
   2063  fc83		       03		      .byte.b	%00000011
   2064  fc84		       3f		      .byte.b	%00111111
   2065  fc85		       7f		      .byte.b	%01111111
   2066  fc86		       e7		      .byte.b	%11100111
   2067  fc87		       c3		      .byte.b	%11000011
   2068  fc88		       c3		      .byte.b	%11000011
   2069  fc89		       e7		      .byte.b	%11100111
   2070  fc8a		       7e		      .byte.b	%01111110
   2071  fc8b		       3c		      .byte.b	%00111100
   2072  fc8c
   2073  fc8c							;==================================================================================
   2074  fc8c							; Interrupt Routines
   2075  fc8c							;==================================================================================
   2076  fc8c
   2077  10000 ????				       SEG	Interrupt
   2078  fffa					      ORG	$FFFA
   2079  fffa
   2080  fffa				   InterruptVectors
   2081  fffa		       00 f0		      .word.w	Reset
   2082  fffc		       00 f0		      .word.w	Reset
   2083  fffe		       00 f0		      .word.w	Reset
   2084  10000
   2085  10000					       END
